/*
Copyright 2020 Adevinta
*/

package main

import (
	"database/sql"
	"fmt"
	"os"

	// This package is intended to be used by tests in other packages so they don't have to interact
	// directly with the db so makes sense to import the driver here.
	_ "github.com/lib/pq"

	testfixtures "gopkg.in/testfixtures.v2"
)

var (
	TestDBName     = "vulndbtest"
	TestDBUser     = "vulndb"
	TestDBPassword = "vulndb"
	TestDBHost     = "localhost"
	TestDBPort     = "5432"
	DBdialect      = "postgres"

	// Mock time to return in calls to NOW().
	mockNow = "2021-06-02 13:50:00.000000+00"
)

// LoadFixtures ...
func LoadFixtures(fixturesDir string) error {
	if p := os.Getenv("TestDBPort"); p != "" {
		TestDBPort = p
	}

	TestDBconnString := fmt.Sprintf("host=%s port=%s user=%s password=%s sslmode=disable dbname=%s",
		TestDBHost,
		TestDBPort,
		TestDBUser,
		TestDBPassword,
		TestDBName)

	db, err := sql.Open(DBdialect, TestDBconnString)
	if err != nil {
		return err
	}
	defer db.Close() // nolint: errcheck

	// Mock current time to ensure consistent exposure calculations.
	_, err = db.Exec(`CREATE SCHEMA mock;`)
	if err != nil {
		return err
	}
	_, err = db.Exec(fmt.Sprintf(`CREATE OR REPLACE FUNCTION mock.now() RETURNS TIMESTAMP WITH TIME ZONE LANGUAGE SQL AS $$ SELECT '%s'::timestamptz; $$;`, mockNow))
	if err != nil {
		return err
	}
	_, err = db.Exec(fmt.Sprintf(`ALTER DATABASE %s SET search_path = mock,public,pg_catalog;`, TestDBName))
	if err != nil {
		return err
	}

	fixtures, err := testfixtures.NewFolder(db, &testfixtures.PostgreSQL{}, fixturesDir)
	if err != nil {
		return err
	}
	return fixtures.Load()
}

func main() {
	err := LoadFixtures(os.Args[1])
	if err != nil {
		panic(err)
	}
	fmt.Printf("Fixtures were loaded with success\n")
}
