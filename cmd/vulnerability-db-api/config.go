/*
Copyright 2020 Adevinta
*/

package main

import (
	"io/ioutil"
	"os"

	"github.com/BurntSushi/toml"
	"github.com/adevinta/vulnerability-db-api/pkg/storage/postgresql"
	"github.com/labstack/gommon/log"
)

type config struct {
	API  apiConfig          `toml:"api"`
	PSQL postgresql.ConnStr `toml:"postgresql"`
	Log  logConfig          `toml:"log"`
}

type apiConfig struct {
	MaxSize     int `toml:"max_size"`
	DefaultSize int `toml:"default_size"`
}

type logConfig struct {
	Level string `toml:"level"`
}

func parseConfig(cfgFilePath string) (*config, error) {
	cfgFile, err := os.Open(cfgFilePath)
	if err != nil {
		return nil, err
	}
	defer cfgFile.Close()

	cfgData, err := ioutil.ReadAll(cfgFile)

	var conf config
	if _, err := toml.Decode(string(cfgData[:]), &conf); err != nil {
		return nil, err
	}

	if envVar := os.Getenv("VULNERABILITYDBAPI_DB_HOST"); envVar != "" {
		conf.PSQL.Host = envVar
	}

	if envVar := os.Getenv("VULNERABILITYDBAPI_DB_PORT"); envVar != "" {
		conf.PSQL.Port = envVar
	}

	if envVar := os.Getenv("VULNERABILITYDBAPI_DB_USER"); envVar != "" {
		conf.PSQL.User = envVar
	}

	if envVar := os.Getenv("VULNERABILITYDBAPI_DB_NAME"); envVar != "" {
		conf.PSQL.DB = envVar
	}

	return &conf, nil
}

func parseLogLvl(lvl string) log.Lvl {
	switch lvl {
	case "ERROR":
		return log.ERROR
	case "WARN":
		return log.WARN
	case "DEBUG":
		return log.DEBUG
	default:
		return log.INFO
	}
}
