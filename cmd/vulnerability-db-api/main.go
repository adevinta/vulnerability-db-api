/*
Copyright 2020 Adevinta
*/

package main

import (
	"flag"
	"log"
	"strings"

	"github.com/adevinta/vulnerability-db-api/pkg/api"
	mddleware "github.com/adevinta/vulnerability-db-api/pkg/api/middleware"
	"github.com/adevinta/vulnerability-db-api/pkg/storage/postgresql"

	"github.com/labstack/echo/v4"
	"github.com/labstack/echo/v4/middleware"
)

func main() {
	configFilePath := flag.String("c", "_resources/config/local.toml", "configuration file")

	flag.Parse()

	config, err := parseConfig(*configFilePath)
	if err != nil {
		log.Fatalf("Error reading configuration: %v", err)
	}

	e := echo.New()

	e.Logger.SetLevel(parseLogLvl(config.Log.Level))

	db, err := postgresql.NewDB(config.PSQL, e.Logger)
	if err != nil {
		e.Logger.Fatal(err)
	}

	a := api.New(db, api.Options{
		MaxSize:     config.API.MaxSize,
		DefaultSize: config.API.DefaultSize,
	})

	e.Use(middleware.LoggerWithConfig(middleware.LoggerConfig{
		// Avoid logging healthcheck requests
		Skipper: func(c echo.Context) bool {
			return strings.HasPrefix(c.Path(), "/healthcheck")
		},
	}))
	e.Use(middleware.Recover())
	e.Use(mddleware.Authorization(mddleware.NewTeamAuthorizer(db, e.Logger)))
	e.Pre(middleware.RemoveTrailingSlash())

	e.GET("/sources", a.ListSources)
	e.GET("/sources/:id", a.GetSource)
	e.GET("/sources/:id/findings", a.ListFindingsBySource)
	e.GET("/sources/:id/mttr", a.GetSourceMTTR)

	e.GET("/targets", a.ListTargets)
	e.GET("/targets/summary", a.TargetsSummary)
	e.GET("/targets/:id", a.GetTarget)
	e.POST("/targets", a.CreateTarget)
	e.GET("/targets/:id/findings", a.ListFindingsByTarget)
	e.GET("/targets/:id/mttr", a.GetTargetMTTR)
	e.GET("/targets/:target_id/issues/:issue_id/resources/:resource", a.GetFindingFromTargetIssueAndResource)
	e.DELETE("/targets/:target_id/teams/:team", a.DeleteTargetTeam)
	e.DELETE("/targets/teams/:team", a.DeleteTeam)
	e.DELETE("/targets/tags/:tag", a.DeleteTag)
	e.DELETE("/targets/:target_id/tags/:tag", a.DeleteTargetTag)

	e.GET("/issues", a.ListIssues)
	e.GET("/issues/summary", a.IssuesSummary)
	e.GET("/issues/:id", a.GetIssue)
	e.GET("/issues/:id/findings", a.ListFindingsByIssue)
	e.GET("/issues/:id/mttr", a.GetIssueMTTR)
	e.GET("/issues/:issue_id/targets/:target_id/resources/:resource", a.GetFindingFromTargetIssueAndResource)

	e.GET("/labels", a.ListLabels)

	e.GET("/findings", a.ListFindings)
	e.GET("/findings/:id", a.GetFinding)
	e.PATCH("/findings/:id", a.PatchFinding)
	e.GET("/findings/:id/events", a.ListFindingEventsByFinding)
	e.GET("/findings/:id/mttr", a.GetFindingMTTR)

	e.GET("/events", a.ListFindingEvents)

	e.GET("/stats/size", a.StatsSize)
	e.GET("/stats/open", a.StatsOpenIssues)
	e.GET("/stats/fixed", a.StatsFixedIssues)
	e.GET("/stats/issues", a.StatsIssues)
	e.GET("/stats/assets", a.StatsAssets)
	e.GET("/stats/mttr", a.StatsMTTR)
	e.GET("/stats/exposure", a.StatsExposure)
	e.GET("/stats/exposure/current", a.StatsCurrentExposure)

	e.GET("/healthcheck", a.Healthcheck)

	e.Logger.Fatal(e.Start(":8080"))
}
