/*
Copyright 2021 Adevinta
*/

package design

import (
	. "goa.design/goa/v3/dsl"
)

var SourceResult = ResultType("source", func() {
	Attributes(func() {
		Attribute("id", String, "Source ID", func() {
			Example("8502fa58-6066-4890-8039-6cd936885763")
		})
		Attribute("target_id", String, "Target ID")
		Attribute("name", String, "Source name", func() {
			Example("vulcan")
		})
		Attribute("component", String, "Source component", func() {
			Example("vulcan-tls")
		})
		Attribute("instance", String, "Source instance", func() {
			Example("6087cba3-fade-4fee-81ca-7459e87de098")
		})
		Attribute("options", String, "Source options", func() {
			Example("{\"timeout\":60}")
		})
		Attribute("time", String, "Time on which the source scanned the target", func() {
			Example("2019-06-08 11:16:40")
		})
	})
})

var SourceResultNoTarget = ResultType("sourceWithNoTarget", func() {
	Attributes(func() {
		Attribute("id", String, "Source ID", func() {
			Example("8502fa58-6066-4890-8039-6cd936885763")
		})
		Attribute("name", String, "Source name", func() {
			Example("vulcan")
		})
		Attribute("component", String, "Source component", func() {
			Example("vulcan-tls")
		})
		Attribute("instance", String, "Source instance", func() {
			Example("6087cba3-fade-4fee-81ca-7459e87de098")
		})
		Attribute("options", String, "Source options", func() {
			Example("{\"timeout\":60}")
		})
		Attribute("time", String, "Time on which the source scanned the target", func() {
			Example("2019-06-08 11:16:40")
		})
	})
})

var _ = Service("sources", func() {
	Description("Sources endpoint.")

	Method("List sources", func() {
		Payload(func() {
			Field(1, "page", Int, "Number of page requested")
			Field(2, "size", Int, "Number of results per page")
		})

		Result(CollectionOf(SourceResult))

		HTTP(func() {
			GET("/sources")

			Param("page")
			Param("size")

			Response(StatusOK)
		})
	})

	Method("Get source", func() {
		Payload(func() {
			Field(1, "id", String, "Source ID")
		})

		Result(SourceResult)

		HTTP(func() {
			GET("/sources/{id}")

			Response(StatusOK)
		})
	})

	Method("List findings by source", func() {
		Payload(func() {
			Field(1, "id", String, "Source ID")
			Field(2, "status", String, "Finding status filter. Can be 'OPEN' or 'FIXED'.")
			Field(3, "sortBy", String, "Sorting criteria. Supported fields: score, -score (for descending order)")
			Field(4, "page", Int, "Number of page requested")
			Field(5, "size", Int, "Number of results per page")
		})

		Result(CollectionOf(FindingResult))

		HTTP(func() {
			GET("/sources/{id}/findings")

			Param("status")
			Param("sortBy")
			Param("page")
			Param("size")

			Response(StatusOK)
		})
	})

	Method("Get source MTTR", func() {
		Payload(func() {
			Field(1, "id", String, "Source ID")
		})

		Result(Float32)

		HTTP(func() {
			GET("/sources/{id}/mttr")

			Response(StatusOK)
		})
	})
})
