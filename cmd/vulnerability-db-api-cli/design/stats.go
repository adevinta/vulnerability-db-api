/*
Copyright 2020 Adevinta
*/

package design

import (
	. "goa.design/goa/v3/dsl"
)

var StatsSizeResult = ResultType("size", func() {
	Attributes(func() {
		Attribute("sources", Int, "Number of sources")
		Attribute("targets", Int, "Number of targets")
		Attribute("issues", Int, "Number of issues")
		Attribute("findings", Int, "Number of findings")
		Attribute("finding_events", Int, "Number of finding events")
	})
})

var StatsSeverityResult = ResultType("severity", func() {
	Attributes(func() {
		Attribute("critical", Int, "Number of critial issues")
		Attribute("high", Int, "Number of high issues")
		Attribute("medium", Int, "Number of medium issues")
		Attribute("low", Int, "Number of low issues")
		Attribute("informational", Int, "Number of informational issues")
	})
})

var StatsSeverityAndTotalResult = ResultType("severity_and_total", func() {
	Attributes(func() {
		Attribute("critical", Int, "Value for critical severity")
		Attribute("high", Int, "Value for high severity")
		Attribute("medium", Int, "Value for medium severity")
		Attribute("low", Int, "Value for low severity")
		Attribute("informational", Int, "Value for informational severity")
		Attribute("total", Int, "Total number of issues")
	})
})

var StatsExposureResult = ResultType("exposure", func() {
	Attributes(func() {
		Attribute("percentile_10", Float32, "Percentile 10 of exposure")
		Attribute("percentile_25", Float32, "Percentile 25 of exposure or first quartile")
		Attribute("percentile_50", Float32, "Percentile 50 of exposure or median")
		Attribute("percentile_75", Float32, "Percentile 75 of exposure or third quartile")
		Attribute("percentile_90", Float32, "Percentile 90 of exposure")
		Attribute("mean", Float32, "Mean exposure")
	})
})

var StatsCurrentExposureResult = ResultType("current_exposure", func() {
	Attributes(func() {
		Attribute("percentile_10", Float32, "Percentile 10 of exposure")
		Attribute("percentile_25", Float32, "Percentile 25 of exposure or first quartile")
		Attribute("percentile_50", Float32, "Percentile 50 of exposure or median")
		Attribute("percentile_75", Float32, "Percentile 75 of exposure or third quartile")
		Attribute("percentile_90", Float32, "Percentile 90 of exposure")
		Attribute("mean", Float32, "Mean exposure")
	})
})

var IssueStatsResult = ResultType("issue_stats", func() {
	Attributes(func() {
		Attribute("id", String, "Issue ID", func() {
			Example("234ec73f-74c8-400f-be73-27dae8e5ff16")
		})
		Attribute("summary", String, "Issue summary", func() {
			Example("TLS Version 1.0 Protocol Detection")
		})
		Attribute("cwe_id", Int, "Common Weakness Enumeration ID")
		Attribute("description", String, "Issue description", func() {
			Example("The remote service accepts connections encrypted using TLS 1.0. TLS 1.0 has a" +
				"\nnumber of cryptographic design flaws. Modern implementations of TLS 1.0\nmitigate " +
				"these problems, but newer versions of TLS like 1.1 and 1.2 are\ndesigned against these " +
				"flaws and should be used whenever possible.\n\nPCI DSS v3.2 requires that TLS 1.0 be disabled " +
				"entirely by June 30,\n2018, except for POS POI terminals (and the SSL/TLS termination\npoints " +
				"to which they connect) that can be verified as not being\nsusceptible to any known exploits.")
		})
		Attribute("recommendations", ArrayOf(String), "Recommendations to fix the issue", func() {
			Example([]string{"Enable support for TLS 1.1 and 1.2, and disable support for TLS 1.0."})
		})
		Attribute("reference_links", ArrayOf(String), "Documentation reference for the issue", func() {
			Example([]string{"http://www.example.com"})
		})
		Attribute("open", Int, "Number of OPEN findings for this issue", func() {
			Example(1)
		})
		Attribute("fixed", Int, "Number of FIXED findings for this issue", func() {
			Example(3)
		})

	})
})

var MTTRResult = ResultType("mttr", func() {
	Attributes(func() {
		Attribute("mttr", Int, func() {
			Example(305)
		})
	})
})

var _ = Service("stats", func() {
	Description("Stats endpoint.")

	Method("Get size stats", func() {
		Payload(func() {
		})

		Result(StatsSizeResult)

		HTTP(func() {
			GET("/stats/size")

			Response(StatusOK)
		})
	})

	Method("Get open issues stats", func() {
		Description("This method gets statistics for open findings by using different filters.\n" +
			"When querying for a specific time range, it returns every finding that " +
			"has been found in that time, regardless if that finding has also been fixed in that span of time.")

		Payload(func() {
			Field(1, "tag", String, "Target's tag filter")
			Field(2, "tags", String, "Comma separated list of target tags to filter by")
			Field(3, "minDate", String, "Minimum date filter (YYY-MM-DD)")
			Field(4, "maxDate", String, "Maximum date filter (YYY-MM-DD)")
			Field(5, "atDate", String, "Allows to get stats for open findings at a specific date (YYY-MM-DD). This filter has preference over minDate and maxDate.")
			Field(6, "identifiers", String, "A comma separated list of asset identifiers")
			Field(7, "labels", String, "A comma separated list of associated labels")
		})

		Result(StatsSeverityResult)

		HTTP(func() {
			GET("/stats/open")

			Param("tag")
			Param("tags")
			Param("minDate")
			Param("maxDate")
			Param("atDate")
			Param("identifiers")
			Param("labels")

			Response(StatusOK)
		})
	})

	Method("Get fixed issues stats", func() {
		Description("This method gets statistics for fixed findings by using different filters.\n" +
			"When querying for a specific time range, it returns every finding that " +
			"has been fixed in that time and it's fixed at the end of the time range specified, so a " +
			"finding that is fixed and then reopened in that range of time will not be counted.")

		Payload(func() {
			Field(1, "tag", String, "Target's tag filter")
			Field(2, "tags", String, "Comma separated list of target tags to filter by")
			Field(3, "minDate", String, "Minimum date filter (YYY-MM-DD)")
			Field(4, "maxDate", String, "Maximum date filter (YYY-MM-DD)")
			Field(5, "atDate", String, "Allows to get stats for fixed findings at a specific date (YYY-MM-DD). This filter has preference over minDate and maxDate.")
			Field(6, "identifiers", String, "A comma separated list of asset identifiers")
			Field(7, "labels", String, "A comma separated list of associated labels")
		})

		Result(StatsSeverityResult)

		HTTP(func() {
			GET("/stats/fixed")

			Param("tag")
			Param("tags")
			Param("minDate")
			Param("maxDate")
			Param("atDate")
			Param("identifiers")
			Param("labels")

			Response(StatusOK)
		})
	})

	Method("Get stats assets per severity", func() {
		Payload(func() {
			Field(1, "tag", String, "Target's tag filter")
			Field(2, "tags", String, "Comma separated list of target tags to filter by")
			Field(4, "identifiers", String, "A comma separated list of asset identifiers")
			Field(5, "labels", String, "A comma separated list of associated labels")
		})

		Result(StatsSeverityAndTotalResult)

		HTTP(func() {
			GET("/stats/assets")

			Param("tag")
			Param("tags")
			Param("identifiers")
			Param("labels")

			Response(StatusOK)
		})
	})

	Method("Get issues stats", func() {
		Payload(func() {
			Field(1, "minDate", String, "Minimum date filter (YYY-MM-DD)")
			Field(2, "maxDate", String, "Maximum date filter (YYY-MM-DD)")
			Field(3, "minScore", Int, "Minimum issues score filter")
			Field(4, "maxScore", Int, "Maximum issues score filter")
		})

		Result(CollectionOf(IssueStatsResult))

		HTTP(func() {
			GET("/stats/issues")

			Param("minDate")
			Param("maxDate")
			Param("minScore")
			Param("maxScore")

			Response(StatusOK)
		})
	})

	Method("Get stats MTTR", func() {
		Payload(func() {
			Field(1, "tag", String, "Target's tag filter")
			Field(2, "tags", String, "Comma separated list of target tags to filter by")
			Field(3, "minDate", String, "Minimum date filter (YYY-MM-DD)")
			Field(4, "maxDate", String, "Maximum date filter (YYY-MM-DD)")
		})

		Result(StatsSeverityAndTotalResult)

		HTTP(func() {
			GET("/stats/mttr")

			Param("tag")
			Param("tags")
			Param("minDate")
			Param("maxDate")

			Response(StatusOK)
		})
	})

	Method("Get stats exposure", func() {
		Payload(func() {
			Field(1, "tag", String, "Target's tag filter")
			Field(2, "tags", String, "Comma separated list of target tags to filter by")
			Field(3, "atDate", String, "Allows to get stats at a specific date (YYY-MM-DD)")
			Field(4, "minScore", Int, "Minimum issues score filter")
			Field(5, "maxScore", Int, "Maximum issues score filter")
		})

		Result(StatsExposureResult)

		HTTP(func() {
			GET("/stats/exposure")

			Param("tag")
			Param("tags")
			Param("atDate")
			Param("minScore")
			Param("maxScore")

			Response(StatusOK)
		})
	})

	Method("Get stats current exposure", func() {
		Payload(func() {
			Field(1, "tag", String, "Target's tag filter")
			Field(2, "tags", String, "Comma separated list of target tags to filter by")
			Field(3, "minScore", Int, "Minimum issues score filter")
			Field(4, "maxScore", Int, "Maximum issues score filter")
		})

		Result(StatsCurrentExposureResult)

		HTTP(func() {
			GET("/stats/exposure/current")

			Param("tag")
			Param("tags")
			Param("minScore")
			Param("maxScore")

			Response(StatusOK)
		})
	})
})
