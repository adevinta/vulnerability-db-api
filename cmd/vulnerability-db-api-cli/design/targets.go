/*
Copyright 2020 Adevinta
*/

package design

import (
	. "goa.design/goa/v3/dsl"
)

var TargetResult = ResultType("target", func() {
	Attributes(func() {
		Attribute("id", String, "Target ID", func() {
			Example("8d14bf4b-2cb1-43f2-9c23-f7985c63858a")
		})
		Attribute("identifier", String, "Target identifier", func() {
			Example("www.example.com")
		})
		Attribute("teams", ArrayOf(String), "List of teams associated with target", func() {
			Example([]string{"e84cfeeb-7a2b-442b-b1cf-15af8b4a52d3"})
		})
		Attribute("tags", ArrayOf(String), "List of tags associated with target", func() {
			Example([]string{"security"})
		})
	})
})

var TargetSummaryResult = ResultType("target_summary", func() {
	Attributes(func() {
		Attribute("target_id", String, "Target ID", func() {
			Example("8d14bf4b-2cb1-43f2-9c23-f7985c63858a")
		})
		Attribute("identifier", String, "Target identifier", func() {
			Example("www.example.com")
		})
		Attribute("findings_count", Int, "Number of findings for target", func() {
			Example(14)
		})
		Attribute("issues_count", Int, "Number of issues for target", func() {
			Example(10)
		})
		Attribute("max_score", Float32, "Max score for target", func() {
			Example(5)
		})
	})
})

var _ = Service("targets", func() {
	Description("Targets endpoint.")

	Method("List targets", func() {
		Payload(func() {
			Field(1, "team", String, "Targets team filter")
			Field(2, "tag", String, "Targets tag filter")
			Field(3, "identifier", String, "Targets identifier filter")
			Field(4, "page", Int, "Number of page requested")
			Field(5, "size", Int, "Number of results per page")
			Field(6, "identifiermatch", Boolean, "Exact match in identifier filter")
			Field(7, "identifiers", String, "A list of asset identifiers")
		})

		Result(CollectionOf(TargetResult))

		HTTP(func() {
			GET("/targets")

			Param("team")
			Param("tag")
			Param("identifier")
			Param("page")
			Param("size")
			Param("identifiermatch")
			Param("identifiers")

			Response(StatusOK)
		})
	})

	Method("Targets summary", func() {
		Payload(func() {
			Field(1, "team", String, "Targets team filter")
			Field(2, "tag", String, "Targets tag filter")
			Field(3, "status", String, "Finding status filter. Can be 'OPEN' or 'FIXED'.")
			Field(4, "sortBy", String, "Sorting criteria. Supported fields: max_score, findings_count (use - for descending order. E.g.: -max_score)")
			Field(5, "page", Int, "Number of page requested")
			Field(6, "size", Int, "Number of results per page")
			Field(7, "identifiers", String, "A list of asset identifiers")
			Field(8, "labels", String, "List of associated issues labels to filter by")
		})

		Result(CollectionOf(TargetSummaryResult))

		HTTP(func() {
			GET("/targets/summary")

			Param("team")
			Param("tag")
			Param("status")
			Param("sortBy")
			Param("page")
			Param("size")
			Param("identifiers")
			Param("labels")

			Response(StatusOK)
		})
	})

	Method("Get target", func() {
		Payload(func() {
			Field(1, "id", String, "Target ID")
		})

		Result(TargetResult)

		HTTP(func() {
			GET("/targets/{id}")

			Response(StatusOK)
		})
	})

	Method("Create target", func() {
		Payload(func() {
			Field(1, "identifier", String, "Target Identifier", func() {
				Example("www.example.com")
			})
			Field(2, "teams", ArrayOf(String), "Target Teams", func() {
				Example([]string{"e84cfeeb-7a2b-442b-b1cf-15af8b4a52d3"})
			})
			Field(3, "tags", ArrayOf(String), "Target Tags", func() {
				Example([]string{"security"})
			})
		})

		Result(TargetResult)

		HTTP(func() {
			POST("/targets")

			Response(StatusCreated)
		})
	})

	Method("List findings by target", func() {
		Payload(func() {
			Field(1, "id", String, "Target ID")
			Field(2, "status", String, "Finding status filter. Can be 'OPEN' or 'FIXED'.")
			Field(3, "sortBy", String, "Sorting criteria. Supported fields: score, -score (for descending order)")
			Field(4, "page", Int, "Number of page requested")
			Field(5, "size", Int, "Number of results per page")
			Field(6, "labels", String, "List of labels to filter by")
		})

		Result(CollectionOf(FindingResult))

		HTTP(func() {
			GET("/targets/{id}/findings")

			Param("status")
			Param("sortBy")
			Param("page")
			Param("size")
			Param("labels")

			Response(StatusOK)
		})
	})

	Method("Get finding by target, issue and affected resource", func() {
		Payload(func() {
			Field(1, "target_id", String, "Target ID")
			Field(2, "issue_id", String, "Issue ID")
			Field(3, "resource", String, "Resource identifier")
		})

		Result(FindingResult)

		HTTP(func() {
			GET("/targets/{target_id}/issues/{issue_id}/resources/{resource}")
			Response(StatusOK)
		})
	})

	Method("Get target MTTR", func() {
		Payload(func() {
			Field(1, "id", String, "Target ID")
		})

		Result(Float32)

		HTTP(func() {
			GET("/targets/{id}/mttr")

			Response(StatusOK)
		})
	})

	Method("Delete target team", func() {
		Payload(func() {
			Field(1, "target_id", String, "Target ID")
			Field(2, "team", String, "Team ID")
			Field(3, "auth", String, func() {
				Pattern("^TEAM team=[^ ]+$")
				Example("TEAM team=myteam")
			})
			Required("auth")
		})

		HTTP(func() {
			Header("auth:Authorization", String, "Auth Team", func() {
				Pattern("^TEAM team=[^ ]+$")
				Example("TEAM team=myteam")
			})

			DELETE("/targets/{target_id}/teams/{team}")

			Response(StatusNoContent)
		})
	})

	Method("Delete team", func() {
		Payload(func() {
			Field(1, "team", String, "Team ID")
			Field(2, "auth", String, func() {
				Pattern("^TEAM team=[^ ]+$")
				Example("TEAM team=myteam")
			})
			Required("auth")
		})

		HTTP(func() {
			Header("auth:Authorization", String, "Auth Team", func() {
				Pattern("^TEAM team=[^ ]+$")
				Example("TEAM team=myteam")
			})

			DELETE("/targets/teams/{team}")

			Response(StatusNoContent)
		})
	})

	Method("Delete target tag", func() {
		Payload(func() {
			Field(1, "target_id", String, "Target ID")
			Field(2, "tag", String, "Tag")
			Field(3, "auth", String, func() {
				Pattern("^TEAM team=[^ ]+$")
				Example("TEAM team=myteam")
			})
			Required("auth")
		})

		HTTP(func() {
			Header("auth:Authorization", String, "Auth Tag", func() {
				Pattern("^TEAM team=[^ ]+$")
				Example("TEAM team=myteam")
			})

			DELETE("/targets/{target_id}/tags/{tag}")

			Response(StatusNoContent)
		})
	})

	Method("Delete tag", func() {
		Payload(func() {
			Field(1, "tag", String, "Tag")
			Field(2, "auth", String, func() {
				Pattern("^TEAM team=[^ ]+$")
				Example("TEAM team=myteam")
			})
			Required("auth")
		})

		HTTP(func() {
			Header("auth:Authorization", String, "Auth Tag", func() {
				Pattern("^TEAM team=[^ ]+$")
				Example("TEAM team=myteam")
			})

			DELETE("/targets/tags/{tag}")

			Response(StatusNoContent)
		})
	})

	Method("Delete all target tag associations for a team", func() {
		Payload(func() {
			Field(1, "team", String, "Team")
			Field(2, "tag", String, "Tag")
			Field(3, "auth", String, func() {
				Pattern("^TEAM team=[^ ]+$")
				Example("TEAM team=myteam")
			})
			Required("auth")
		})

		HTTP(func() {
			Header("auth:Authorization", String, "Auth Tag", func() {
				Pattern("^TEAM team=[^ ]+$")
				Example("TEAM team=myteam")
			})

			DELETE("/targets/teams/{team}/tags/{tag}")

			Response(StatusNoContent)
		})
	})
})
