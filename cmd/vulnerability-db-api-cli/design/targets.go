/*
Copyright 2020 Adevinta
*/

package design

import (
	. "goa.design/goa/v3/dsl"
)

var TargetResult = ResultType("target", func() {
	Attributes(func() {
		Attribute("id", String, "Target ID", func() {
			Example("8d14bf4b-2cb1-43f2-9c23-f7985c63858a")
		})
		Attribute("identifier", String, "Target identifier", func() {
			Example("www.example.com")
		})
		Attribute("tags", ArrayOf(String), "List of tags associated with target", func() {
			Example([]string{"sdrn:adevinta:team:security"})
		})
	})
})

var TargetSummaryResult = ResultType("target_summary", func() {
	Attributes(func() {
		Attribute("target_id", String, "Target ID", func() {
			Example("8d14bf4b-2cb1-43f2-9c23-f7985c63858a")
		})
		Attribute("identifier", String, "Target identifier", func() {
			Example("www.example.com")
		})
		Attribute("findings_count", Int, "Number of findings for target", func() {
			Example(14)
		})
		Attribute("max_score", Float32, "Max score for target", func() {
			Example(5)
		})
	})
})

var _ = Service("targets", func() {
	Description("Targets endpoint.")

	Method("List targets", func() {
		Payload(func() {
			Field(1, "tag", String, "Targets tag filter")
			Field(2, "identifier", String, "Targets identifier filter")
			Field(3, "page", Int, "Number of page requested")
			Field(4, "size", Int, "Number of results per page")
		})

		Result(CollectionOf(TargetResult))

		HTTP(func() {
			GET("/targets")

			Param("tag")
			Param("identifier")
			Param("page")
			Param("size")

			Response(StatusOK)
		})
	})

	Method("Targets summary", func() {
		Payload(func() {
			Field(1, "tag", String, "Targets tag filter")
			Field(2, "status", String, "Finding status filter. Can be 'OPEN' or 'FIXED'.")
			Field(3, "sortBy", String, "Sorting criteria. Supported fields: score, findings_count (use - for descending order. E.g.: -score)")
			Field(4, "page", Int, "Number of page requested")
			Field(5, "size", Int, "Number of results per page")
		})

		Result(CollectionOf(TargetSummaryResult))

		HTTP(func() {
			GET("/targets/summary")

			Param("tag")
			Param("status")
			Param("sortBy")
			Param("page")
			Param("size")

			Response(StatusOK)
		})
	})

	Method("Get target", func() {
		Payload(func() {
			Field(1, "id", String, "Target ID")
		})

		Result(TargetResult)

		HTTP(func() {
			GET("/targets/{id}")

			Response(StatusOK)
		})
	})

	Method("List findings by target", func() {
		Payload(func() {
			Field(1, "id", String, "Target ID")
			Field(2, "status", String, "Finding status filter. Can be 'OPEN' or 'FIXED'.")
			Field(3, "sortBy", String, "Sorting criteria. Supported fields: score, -score (for descending order)")
			Field(4, "page", Int, "Number of page requested")
			Field(5, "size", Int, "Number of results per page")
		})

		Result(CollectionOf(FindingResult))

		HTTP(func() {
			GET("/targets/{id}/findings")

			Param("status")
			Param("sortBy")
			Param("page")
			Param("size")

			Response(StatusOK)
		})
	})

	Method("List findings by target and issue", func() {
		Payload(func() {
			Field(1, "target_id", String, "Target ID")
			Field(2, "issue_id", String, "Issue ID")
		})

		Result(FindingResult)

		HTTP(func() {
			GET("/targets/{target_id}/issues/{issue_id}")
			Response(StatusOK)
		})
	})

	Method("Get target MTTR", func() {
		Payload(func() {
			Field(1, "id", String, "Target ID")
		})

		Result(Float32)

		HTTP(func() {
			GET("/targets/{id}/mttr")

			Response(StatusOK)
		})
	})

	Method("Delete target tag", func() {
		Payload(func() {
			Field(1, "target_id", String, "Target ID")
			Field(2, "tag", String, "Tag")
			Field(3, "auth", String, func() {
				Pattern("^TAG tag=[^ ]+$")
				Example("TAG tag=mytag")
			})
			Required("auth")
		})

		HTTP(func() {
			Header("auth:Authorization", String, "Auth Tag", func() {
				Pattern("^TAG tag=[^ ]+$")
				Example("TAG tag=mytag")
			})

			DELETE("/targets/{target_id}/tags/{tag}")

			Response(StatusNoContent)
		})
	})

	Method("Delete tag", func() {
		Payload(func() {
			Field(1, "tag", String, "Tag")
			Field(2, "auth", String, func() {
				Pattern("^TAG tag=[^ ]+$")
				Example("TAG tag=mytag")
			})
			Required("auth")
		})

		HTTP(func() {
			Header("auth:Authorization", String, "Auth Tag", func() {
				Pattern("^TAG tag=[^ ]+$")
				Example("TAG tag=mytag")
			})

			DELETE("/targets/tags/{tag}")

			Response(StatusNoContent)
		})
	})
})
