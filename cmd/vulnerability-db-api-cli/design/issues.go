/*
Copyright 2021 Adevinta
*/

package design

import (
	. "goa.design/goa/v3/dsl"
)

var IssueResult = ResultType("issue", func() {
	Attributes(func() {
		Attribute("id", String, "Issue ID", func() {
			Example("234ec73f-74c8-400f-be73-27dae8e5ff16")
		})
		Attribute("summary", String, "Issue summary", func() {
			Example("TLS Version 1.0 Protocol Detection")
		})
		Attribute("cwe_id", Int, "Common Weakness Enumeration ID", func() {
			Example(216)
		})
		Attribute("description", String, "Issue description", func() {
			Example("The remote service accepts connections encrypted using TLS 1.0. TLS 1.0 has a" +
				"\nnumber of cryptographic design flaws. Modern implementations of TLS 1.0\nmitigate " +
				"these problems, but newer versions of TLS like 1.1 and 1.2 are\ndesigned against these " +
				"flaws and should be used whenever possible.\n\nPCI DSS v3.2 requires that TLS 1.0 be disabled " +
				"entirely by June 30,\n2018, except for POS POI terminals (and the SSL/TLS termination\npoints " +
				"to which they connect) that can be verified as not being\nsusceptible to any known exploits.")
		})
		Attribute("recommendations", ArrayOf(String), "Recommendations to fix the issue", func() {
			Example([]string{"Enable support for TLS 1.1 and 1.2, and disable support for TLS 1.0."})
		})
		Attribute("reference_links", ArrayOf(String), "Documentation reference for the issue", func() {
			Example([]string{"http://www.example.com"})
		})
	})
})

var IssueSummaryResult = ResultType("issue_summary", func() {
	Attributes(func() {
		Attribute("issue_id", String, "Issue ID", func() {
			Example("234ec73f-74c8-400f-be73-27dae8e5ff16")
		})
		Attribute("summary", String, "Issue summary", func() {
			Example("TLS Version 1.0 Protocol Detection")
		})
		Attribute("targets_count", Int, "Number of affected targets for issue", func() {
			Example(14)
		})
		Attribute("max_score", Float32, "Max score for issue", func() {
			Example(5)
		})
	})
})

var _ = Service("issues", func() {
	Description("Issues endpoint.")

	Method("List issues", func() {
		Payload(func() {
			Field(1, "page", Int, "Number of page requested")
			Field(2, "size", Int, "Number of results per page")
		})

		Result(CollectionOf(IssueResult))

		HTTP(func() {
			GET("/issues")

			Param("page")
			Param("size")

			Response(StatusOK)
		})
	})

	Method("Issues summary", func() {
		Payload(func() {
			Field(1, "tag", String, "Targets tag filter")
			Field(2, "status", String, "Finding status filter. Can be 'OPEN' or 'FIXED'.")
			Field(3, "sortBy", String, "Sorting criteria. Supported fields: score, targets_count (use - for descending order. E.g.: -score)")
			Field(4, "page", Int, "Number of page requested")
			Field(5, "size", Int, "Number of results per page")
		})

		Result(CollectionOf(IssueSummaryResult))

		HTTP(func() {
			GET("/issues/summary")

			Param("tag")
			Param("status")
			Param("sortBy")
			Param("page")
			Param("size")

			Response(StatusOK)
		})
	})

	Method("Get issue", func() {
		Payload(func() {
			Field(1, "id", String, "Issue ID")
		})

		Result(IssueResult)

		HTTP(func() {
			GET("/issues/{id}")

			Response(StatusOK)
		})
	})

	Method("List findings by issue", func() {
		Payload(func() {
			Field(1, "id", String, "Issue ID")
			Field(2, "status", String, "Finding status filter. Can be 'OPEN' or 'FIXED'.")
			Field(3, "sortBy", String, "Sorting criteria. Supported fields: score, -score (for descending order)")
			Field(4, "page", Int, "Number of page requested")
			Field(5, "size", Int, "Number of results per page")
		})

		Result(CollectionOf(FindingResult))

		HTTP(func() {
			GET("/issues/{id}/findings")

			Param("status")
			Param("sortBy")
			Param("page")
			Param("size")

			Response(StatusOK)
		})
	})

	Method("List findings by issue and target", func() {
		Payload(func() {
			Field(1, "issue_id", String, "Issue ID")
			Field(2, "target_id", String, "Target ID")
		})

		Result(FindingResult)

		HTTP(func() {
			GET("/issues/{issue_id}/targets/{target_id}")
			Response(StatusOK)
		})
	})

	Method("Get issue MTTR", func() {
		Payload(func() {
			Field(1, "id", String, "Issue ID")
		})

		Result(Float32)

		HTTP(func() {
			GET("/issues/{id}/mttr")

			Response(StatusOK)
		})
	})
})
