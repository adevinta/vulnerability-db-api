/*
Copyright 2021 Adevinta
*/

// Code generated by goa v3.0.6, DO NOT EDIT.
//
// vulnerability-db-api HTTP client CLI support package
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	eventsc "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/http/events/client"
	findingsc "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/http/findings/client"
	issuesc "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/http/issues/client"
	sourcesc "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/http/sources/client"
	statsc "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/http/stats/client"
	targetsc "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/http/targets/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `events list- finding- events
stats (get- size- stats|get- open- issues- stats|get- fixed- issues- stats|get- issues- stats|get- stats- mttr)
findings (list- findings|get- finding|list- events- by- finding|get- finding- mttr)
issues (list- issues|issues- summary|get- issue|list- findings- by- issue|list- findings- by- issue- and- target|get- issue- mttr)
sources (list- sources|get- source|list- findings- by- source|get- source- mttr)
targets (list- targets|targets- summary|get- target|list- findings- by- target|list- findings- by- target- and- issue|get- target- mttr|delete- target- tag|delete- tag)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` events list- finding- events --min-score 3658746551860606042 --max-score 9045686723811193024 --min-date "Similique quae voluptate temporibus." --max-date "Aut et." --page 7878978031843854175 --size 6808670066526919206` + "\n" +
		os.Args[0] + ` stats get- size- stats` + "\n" +
		os.Args[0] + ` findings list- findings --tag "Eos et et est dolores quis." --status "Ipsa vel." --min-score 2934361164996192541 --max-score 3242935233917102927 --at-date "Ipsa ut quia quod molestiae." --min-date "Eos voluptatem nihil molestiae officiis." --max-date "Itaque laborum non dolorem natus veniam sint." --sort-by "Minus cupiditate blanditiis quia exercitationem sint." --page 1900947858375086732 --size 423289908899154444 --identifier "Ut quis ut optio voluptates laboriosam maiores." --identifiermatch false` + "\n" +
		os.Args[0] + ` issues list- issues --page 9036939894384681291 --size 3925975963127894705` + "\n" +
		os.Args[0] + ` sources list- sources --page 5139768737605662158 --size 6450233093740567818` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		eventsFlags = flag.NewFlagSet("events", flag.ContinueOnError)

		eventsListFindingEventsFlags        = flag.NewFlagSet("list- finding- events", flag.ExitOnError)
		eventsListFindingEventsMinScoreFlag = eventsListFindingEventsFlags.String("min-score", "", "")
		eventsListFindingEventsMaxScoreFlag = eventsListFindingEventsFlags.String("max-score", "", "")
		eventsListFindingEventsMinDateFlag  = eventsListFindingEventsFlags.String("min-date", "", "")
		eventsListFindingEventsMaxDateFlag  = eventsListFindingEventsFlags.String("max-date", "", "")
		eventsListFindingEventsPageFlag     = eventsListFindingEventsFlags.String("page", "", "")
		eventsListFindingEventsSizeFlag     = eventsListFindingEventsFlags.String("size", "", "")

		statsFlags = flag.NewFlagSet("stats", flag.ContinueOnError)

		statsGetSizeStatsFlags = flag.NewFlagSet("get- size- stats", flag.ExitOnError)

		statsGetOpenIssuesStatsFlags       = flag.NewFlagSet("get- open- issues- stats", flag.ExitOnError)
		statsGetOpenIssuesStatsTagFlag     = statsGetOpenIssuesStatsFlags.String("tag", "", "")
		statsGetOpenIssuesStatsMinDateFlag = statsGetOpenIssuesStatsFlags.String("min-date", "", "")
		statsGetOpenIssuesStatsMaxDateFlag = statsGetOpenIssuesStatsFlags.String("max-date", "", "")
		statsGetOpenIssuesStatsAtDateFlag  = statsGetOpenIssuesStatsFlags.String("at-date", "", "")

		statsGetFixedIssuesStatsFlags       = flag.NewFlagSet("get- fixed- issues- stats", flag.ExitOnError)
		statsGetFixedIssuesStatsTagFlag     = statsGetFixedIssuesStatsFlags.String("tag", "", "")
		statsGetFixedIssuesStatsMinDateFlag = statsGetFixedIssuesStatsFlags.String("min-date", "", "")
		statsGetFixedIssuesStatsMaxDateFlag = statsGetFixedIssuesStatsFlags.String("max-date", "", "")
		statsGetFixedIssuesStatsAtDateFlag  = statsGetFixedIssuesStatsFlags.String("at-date", "", "")

		statsGetIssuesStatsFlags        = flag.NewFlagSet("get- issues- stats", flag.ExitOnError)
		statsGetIssuesStatsMinDateFlag  = statsGetIssuesStatsFlags.String("min-date", "", "")
		statsGetIssuesStatsMaxDateFlag  = statsGetIssuesStatsFlags.String("max-date", "", "")
		statsGetIssuesStatsMinScoreFlag = statsGetIssuesStatsFlags.String("min-score", "", "")
		statsGetIssuesStatsMaxScoreFlag = statsGetIssuesStatsFlags.String("max-score", "", "")

		statsGetStatsMTTRFlags       = flag.NewFlagSet("get- stats- mttr", flag.ExitOnError)
		statsGetStatsMTTRTagFlag     = statsGetStatsMTTRFlags.String("tag", "", "")
		statsGetStatsMTTRMinDateFlag = statsGetStatsMTTRFlags.String("min-date", "", "")
		statsGetStatsMTTRMaxDateFlag = statsGetStatsMTTRFlags.String("max-date", "", "")

		findingsFlags = flag.NewFlagSet("findings", flag.ContinueOnError)

		findingsListFindingsFlags               = flag.NewFlagSet("list- findings", flag.ExitOnError)
		findingsListFindingsTagFlag             = findingsListFindingsFlags.String("tag", "", "")
		findingsListFindingsStatusFlag          = findingsListFindingsFlags.String("status", "", "")
		findingsListFindingsMinScoreFlag        = findingsListFindingsFlags.String("min-score", "", "")
		findingsListFindingsMaxScoreFlag        = findingsListFindingsFlags.String("max-score", "", "")
		findingsListFindingsAtDateFlag          = findingsListFindingsFlags.String("at-date", "", "")
		findingsListFindingsMinDateFlag         = findingsListFindingsFlags.String("min-date", "", "")
		findingsListFindingsMaxDateFlag         = findingsListFindingsFlags.String("max-date", "", "")
		findingsListFindingsSortByFlag          = findingsListFindingsFlags.String("sort-by", "", "")
		findingsListFindingsPageFlag            = findingsListFindingsFlags.String("page", "", "")
		findingsListFindingsSizeFlag            = findingsListFindingsFlags.String("size", "", "")
		findingsListFindingsIdentifierFlag      = findingsListFindingsFlags.String("identifier", "", "")
		findingsListFindingsIdentifiermatchFlag = findingsListFindingsFlags.String("identifiermatch", "", "")

		findingsGetFindingFlags  = flag.NewFlagSet("get- finding", flag.ExitOnError)
		findingsGetFindingIDFlag = findingsGetFindingFlags.String("id", "REQUIRED", "Finding ID")

		findingsListEventsByFindingFlags    = flag.NewFlagSet("list- events- by- finding", flag.ExitOnError)
		findingsListEventsByFindingIDFlag   = findingsListEventsByFindingFlags.String("id", "REQUIRED", "Finding ID")
		findingsListEventsByFindingPageFlag = findingsListEventsByFindingFlags.String("page", "", "")
		findingsListEventsByFindingSizeFlag = findingsListEventsByFindingFlags.String("size", "", "")

		findingsGetFindingMTTRFlags  = flag.NewFlagSet("get- finding- mttr", flag.ExitOnError)
		findingsGetFindingMTTRIDFlag = findingsGetFindingMTTRFlags.String("id", "REQUIRED", "Finding ID")

		issuesFlags = flag.NewFlagSet("issues", flag.ContinueOnError)

		issuesListIssuesFlags    = flag.NewFlagSet("list- issues", flag.ExitOnError)
		issuesListIssuesPageFlag = issuesListIssuesFlags.String("page", "", "")
		issuesListIssuesSizeFlag = issuesListIssuesFlags.String("size", "", "")

		issuesIssuesSummaryFlags      = flag.NewFlagSet("issues- summary", flag.ExitOnError)
		issuesIssuesSummaryTagFlag    = issuesIssuesSummaryFlags.String("tag", "", "")
		issuesIssuesSummaryStatusFlag = issuesIssuesSummaryFlags.String("status", "", "")
		issuesIssuesSummarySortByFlag = issuesIssuesSummaryFlags.String("sort-by", "", "")
		issuesIssuesSummaryPageFlag   = issuesIssuesSummaryFlags.String("page", "", "")
		issuesIssuesSummarySizeFlag   = issuesIssuesSummaryFlags.String("size", "", "")

		issuesGetIssueFlags  = flag.NewFlagSet("get- issue", flag.ExitOnError)
		issuesGetIssueIDFlag = issuesGetIssueFlags.String("id", "REQUIRED", "Issue ID")

		issuesListFindingsByIssueFlags      = flag.NewFlagSet("list- findings- by- issue", flag.ExitOnError)
		issuesListFindingsByIssueIDFlag     = issuesListFindingsByIssueFlags.String("id", "REQUIRED", "Issue ID")
		issuesListFindingsByIssueStatusFlag = issuesListFindingsByIssueFlags.String("status", "", "")
		issuesListFindingsByIssueSortByFlag = issuesListFindingsByIssueFlags.String("sort-by", "", "")
		issuesListFindingsByIssuePageFlag   = issuesListFindingsByIssueFlags.String("page", "", "")
		issuesListFindingsByIssueSizeFlag   = issuesListFindingsByIssueFlags.String("size", "", "")

		issuesListFindingsByIssueAndTargetFlags        = flag.NewFlagSet("list- findings- by- issue- and- target", flag.ExitOnError)
		issuesListFindingsByIssueAndTargetIssueIDFlag  = issuesListFindingsByIssueAndTargetFlags.String("issue-id", "REQUIRED", "Issue ID")
		issuesListFindingsByIssueAndTargetTargetIDFlag = issuesListFindingsByIssueAndTargetFlags.String("target-id", "REQUIRED", "Target ID")

		issuesGetIssueMTTRFlags  = flag.NewFlagSet("get- issue- mttr", flag.ExitOnError)
		issuesGetIssueMTTRIDFlag = issuesGetIssueMTTRFlags.String("id", "REQUIRED", "Issue ID")

		sourcesFlags = flag.NewFlagSet("sources", flag.ContinueOnError)

		sourcesListSourcesFlags    = flag.NewFlagSet("list- sources", flag.ExitOnError)
		sourcesListSourcesPageFlag = sourcesListSourcesFlags.String("page", "", "")
		sourcesListSourcesSizeFlag = sourcesListSourcesFlags.String("size", "", "")

		sourcesGetSourceFlags  = flag.NewFlagSet("get- source", flag.ExitOnError)
		sourcesGetSourceIDFlag = sourcesGetSourceFlags.String("id", "REQUIRED", "Source ID")

		sourcesListFindingsBySourceFlags      = flag.NewFlagSet("list- findings- by- source", flag.ExitOnError)
		sourcesListFindingsBySourceIDFlag     = sourcesListFindingsBySourceFlags.String("id", "REQUIRED", "Source ID")
		sourcesListFindingsBySourceStatusFlag = sourcesListFindingsBySourceFlags.String("status", "", "")
		sourcesListFindingsBySourceSortByFlag = sourcesListFindingsBySourceFlags.String("sort-by", "", "")
		sourcesListFindingsBySourcePageFlag   = sourcesListFindingsBySourceFlags.String("page", "", "")
		sourcesListFindingsBySourceSizeFlag   = sourcesListFindingsBySourceFlags.String("size", "", "")

		sourcesGetSourceMTTRFlags  = flag.NewFlagSet("get- source- mttr", flag.ExitOnError)
		sourcesGetSourceMTTRIDFlag = sourcesGetSourceMTTRFlags.String("id", "REQUIRED", "Source ID")

		targetsFlags = flag.NewFlagSet("targets", flag.ContinueOnError)

		targetsListTargetsFlags               = flag.NewFlagSet("list- targets", flag.ExitOnError)
		targetsListTargetsTagFlag             = targetsListTargetsFlags.String("tag", "", "")
		targetsListTargetsIdentifierFlag      = targetsListTargetsFlags.String("identifier", "", "")
		targetsListTargetsPageFlag            = targetsListTargetsFlags.String("page", "", "")
		targetsListTargetsSizeFlag            = targetsListTargetsFlags.String("size", "", "")
		targetsListTargetsIdentifiermatchFlag = targetsListTargetsFlags.String("identifiermatch", "", "")

		targetsTargetsSummaryFlags      = flag.NewFlagSet("targets- summary", flag.ExitOnError)
		targetsTargetsSummaryTagFlag    = targetsTargetsSummaryFlags.String("tag", "", "")
		targetsTargetsSummaryStatusFlag = targetsTargetsSummaryFlags.String("status", "", "")
		targetsTargetsSummarySortByFlag = targetsTargetsSummaryFlags.String("sort-by", "", "")
		targetsTargetsSummaryPageFlag   = targetsTargetsSummaryFlags.String("page", "", "")
		targetsTargetsSummarySizeFlag   = targetsTargetsSummaryFlags.String("size", "", "")

		targetsGetTargetFlags  = flag.NewFlagSet("get- target", flag.ExitOnError)
		targetsGetTargetIDFlag = targetsGetTargetFlags.String("id", "REQUIRED", "Target ID")

		targetsListFindingsByTargetFlags      = flag.NewFlagSet("list- findings- by- target", flag.ExitOnError)
		targetsListFindingsByTargetIDFlag     = targetsListFindingsByTargetFlags.String("id", "REQUIRED", "Target ID")
		targetsListFindingsByTargetStatusFlag = targetsListFindingsByTargetFlags.String("status", "", "")
		targetsListFindingsByTargetSortByFlag = targetsListFindingsByTargetFlags.String("sort-by", "", "")
		targetsListFindingsByTargetPageFlag   = targetsListFindingsByTargetFlags.String("page", "", "")
		targetsListFindingsByTargetSizeFlag   = targetsListFindingsByTargetFlags.String("size", "", "")

		targetsListFindingsByTargetAndIssueFlags        = flag.NewFlagSet("list- findings- by- target- and- issue", flag.ExitOnError)
		targetsListFindingsByTargetAndIssueTargetIDFlag = targetsListFindingsByTargetAndIssueFlags.String("target-id", "REQUIRED", "Target ID")
		targetsListFindingsByTargetAndIssueIssueIDFlag  = targetsListFindingsByTargetAndIssueFlags.String("issue-id", "REQUIRED", "Issue ID")

		targetsGetTargetMTTRFlags  = flag.NewFlagSet("get- target- mttr", flag.ExitOnError)
		targetsGetTargetMTTRIDFlag = targetsGetTargetMTTRFlags.String("id", "REQUIRED", "Target ID")

		targetsDeleteTargetTagFlags        = flag.NewFlagSet("delete- target- tag", flag.ExitOnError)
		targetsDeleteTargetTagTargetIDFlag = targetsDeleteTargetTagFlags.String("target-id", "REQUIRED", "Target ID")
		targetsDeleteTargetTagTagFlag      = targetsDeleteTargetTagFlags.String("tag", "REQUIRED", "Tag")
		targetsDeleteTargetTagAuthFlag     = targetsDeleteTargetTagFlags.String("auth", "REQUIRED", "")

		targetsDeleteTagFlags    = flag.NewFlagSet("delete- tag", flag.ExitOnError)
		targetsDeleteTagTagFlag  = targetsDeleteTagFlags.String("tag", "REQUIRED", "Tag")
		targetsDeleteTagAuthFlag = targetsDeleteTagFlags.String("auth", "REQUIRED", "")
	)
	eventsFlags.Usage = eventsUsage
	eventsListFindingEventsFlags.Usage = eventsListFindingEventsUsage

	statsFlags.Usage = statsUsage
	statsGetSizeStatsFlags.Usage = statsGetSizeStatsUsage
	statsGetOpenIssuesStatsFlags.Usage = statsGetOpenIssuesStatsUsage
	statsGetFixedIssuesStatsFlags.Usage = statsGetFixedIssuesStatsUsage
	statsGetIssuesStatsFlags.Usage = statsGetIssuesStatsUsage
	statsGetStatsMTTRFlags.Usage = statsGetStatsMTTRUsage

	findingsFlags.Usage = findingsUsage
	findingsListFindingsFlags.Usage = findingsListFindingsUsage
	findingsGetFindingFlags.Usage = findingsGetFindingUsage
	findingsListEventsByFindingFlags.Usage = findingsListEventsByFindingUsage
	findingsGetFindingMTTRFlags.Usage = findingsGetFindingMTTRUsage

	issuesFlags.Usage = issuesUsage
	issuesListIssuesFlags.Usage = issuesListIssuesUsage
	issuesIssuesSummaryFlags.Usage = issuesIssuesSummaryUsage
	issuesGetIssueFlags.Usage = issuesGetIssueUsage
	issuesListFindingsByIssueFlags.Usage = issuesListFindingsByIssueUsage
	issuesListFindingsByIssueAndTargetFlags.Usage = issuesListFindingsByIssueAndTargetUsage
	issuesGetIssueMTTRFlags.Usage = issuesGetIssueMTTRUsage

	sourcesFlags.Usage = sourcesUsage
	sourcesListSourcesFlags.Usage = sourcesListSourcesUsage
	sourcesGetSourceFlags.Usage = sourcesGetSourceUsage
	sourcesListFindingsBySourceFlags.Usage = sourcesListFindingsBySourceUsage
	sourcesGetSourceMTTRFlags.Usage = sourcesGetSourceMTTRUsage

	targetsFlags.Usage = targetsUsage
	targetsListTargetsFlags.Usage = targetsListTargetsUsage
	targetsTargetsSummaryFlags.Usage = targetsTargetsSummaryUsage
	targetsGetTargetFlags.Usage = targetsGetTargetUsage
	targetsListFindingsByTargetFlags.Usage = targetsListFindingsByTargetUsage
	targetsListFindingsByTargetAndIssueFlags.Usage = targetsListFindingsByTargetAndIssueUsage
	targetsGetTargetMTTRFlags.Usage = targetsGetTargetMTTRUsage
	targetsDeleteTargetTagFlags.Usage = targetsDeleteTargetTagUsage
	targetsDeleteTagFlags.Usage = targetsDeleteTagUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "events":
			svcf = eventsFlags
		case "stats":
			svcf = statsFlags
		case "findings":
			svcf = findingsFlags
		case "issues":
			svcf = issuesFlags
		case "sources":
			svcf = sourcesFlags
		case "targets":
			svcf = targetsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "events":
			switch epn {
			case "list- finding- events":
				epf = eventsListFindingEventsFlags

			}

		case "stats":
			switch epn {
			case "get- size- stats":
				epf = statsGetSizeStatsFlags

			case "get- open- issues- stats":
				epf = statsGetOpenIssuesStatsFlags

			case "get- fixed- issues- stats":
				epf = statsGetFixedIssuesStatsFlags

			case "get- issues- stats":
				epf = statsGetIssuesStatsFlags

			case "get- stats- mttr":
				epf = statsGetStatsMTTRFlags

			}

		case "findings":
			switch epn {
			case "list- findings":
				epf = findingsListFindingsFlags

			case "get- finding":
				epf = findingsGetFindingFlags

			case "list- events- by- finding":
				epf = findingsListEventsByFindingFlags

			case "get- finding- mttr":
				epf = findingsGetFindingMTTRFlags

			}

		case "issues":
			switch epn {
			case "list- issues":
				epf = issuesListIssuesFlags

			case "issues- summary":
				epf = issuesIssuesSummaryFlags

			case "get- issue":
				epf = issuesGetIssueFlags

			case "list- findings- by- issue":
				epf = issuesListFindingsByIssueFlags

			case "list- findings- by- issue- and- target":
				epf = issuesListFindingsByIssueAndTargetFlags

			case "get- issue- mttr":
				epf = issuesGetIssueMTTRFlags

			}

		case "sources":
			switch epn {
			case "list- sources":
				epf = sourcesListSourcesFlags

			case "get- source":
				epf = sourcesGetSourceFlags

			case "list- findings- by- source":
				epf = sourcesListFindingsBySourceFlags

			case "get- source- mttr":
				epf = sourcesGetSourceMTTRFlags

			}

		case "targets":
			switch epn {
			case "list- targets":
				epf = targetsListTargetsFlags

			case "targets- summary":
				epf = targetsTargetsSummaryFlags

			case "get- target":
				epf = targetsGetTargetFlags

			case "list- findings- by- target":
				epf = targetsListFindingsByTargetFlags

			case "list- findings- by- target- and- issue":
				epf = targetsListFindingsByTargetAndIssueFlags

			case "get- target- mttr":
				epf = targetsGetTargetMTTRFlags

			case "delete- target- tag":
				epf = targetsDeleteTargetTagFlags

			case "delete- tag":
				epf = targetsDeleteTagFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "events":
			c := eventsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list- finding- events":
				endpoint = c.ListFindingEvents()
				data, err = eventsc.BuildListFindingEventsPayload(*eventsListFindingEventsMinScoreFlag, *eventsListFindingEventsMaxScoreFlag, *eventsListFindingEventsMinDateFlag, *eventsListFindingEventsMaxDateFlag, *eventsListFindingEventsPageFlag, *eventsListFindingEventsSizeFlag)
			}
		case "stats":
			c := statsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get- size- stats":
				endpoint = c.GetSizeStats()
				data = nil
			case "get- open- issues- stats":
				endpoint = c.GetOpenIssuesStats()
				data, err = statsc.BuildGetOpenIssuesStatsPayload(*statsGetOpenIssuesStatsTagFlag, *statsGetOpenIssuesStatsMinDateFlag, *statsGetOpenIssuesStatsMaxDateFlag, *statsGetOpenIssuesStatsAtDateFlag)
			case "get- fixed- issues- stats":
				endpoint = c.GetFixedIssuesStats()
				data, err = statsc.BuildGetFixedIssuesStatsPayload(*statsGetFixedIssuesStatsTagFlag, *statsGetFixedIssuesStatsMinDateFlag, *statsGetFixedIssuesStatsMaxDateFlag, *statsGetFixedIssuesStatsAtDateFlag)
			case "get- issues- stats":
				endpoint = c.GetIssuesStats()
				data, err = statsc.BuildGetIssuesStatsPayload(*statsGetIssuesStatsMinDateFlag, *statsGetIssuesStatsMaxDateFlag, *statsGetIssuesStatsMinScoreFlag, *statsGetIssuesStatsMaxScoreFlag)
			case "get- stats- mttr":
				endpoint = c.GetStatsMTTR()
				data, err = statsc.BuildGetStatsMTTRPayload(*statsGetStatsMTTRTagFlag, *statsGetStatsMTTRMinDateFlag, *statsGetStatsMTTRMaxDateFlag)
			}
		case "findings":
			c := findingsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list- findings":
				endpoint = c.ListFindings()
				data, err = findingsc.BuildListFindingsPayload(*findingsListFindingsTagFlag, *findingsListFindingsStatusFlag, *findingsListFindingsMinScoreFlag, *findingsListFindingsMaxScoreFlag, *findingsListFindingsAtDateFlag, *findingsListFindingsMinDateFlag, *findingsListFindingsMaxDateFlag, *findingsListFindingsSortByFlag, *findingsListFindingsPageFlag, *findingsListFindingsSizeFlag, *findingsListFindingsIdentifierFlag, *findingsListFindingsIdentifiermatchFlag)
			case "get- finding":
				endpoint = c.GetFinding()
				data, err = findingsc.BuildGetFindingPayload(*findingsGetFindingIDFlag)
			case "list- events- by- finding":
				endpoint = c.ListEventsByFinding()
				data, err = findingsc.BuildListEventsByFindingPayload(*findingsListEventsByFindingIDFlag, *findingsListEventsByFindingPageFlag, *findingsListEventsByFindingSizeFlag)
			case "get- finding- mttr":
				endpoint = c.GetFindingMTTR()
				data, err = findingsc.BuildGetFindingMTTRPayload(*findingsGetFindingMTTRIDFlag)
			}
		case "issues":
			c := issuesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list- issues":
				endpoint = c.ListIssues()
				data, err = issuesc.BuildListIssuesPayload(*issuesListIssuesPageFlag, *issuesListIssuesSizeFlag)
			case "issues- summary":
				endpoint = c.IssuesSummary()
				data, err = issuesc.BuildIssuesSummaryPayload(*issuesIssuesSummaryTagFlag, *issuesIssuesSummaryStatusFlag, *issuesIssuesSummarySortByFlag, *issuesIssuesSummaryPageFlag, *issuesIssuesSummarySizeFlag)
			case "get- issue":
				endpoint = c.GetIssue()
				data, err = issuesc.BuildGetIssuePayload(*issuesGetIssueIDFlag)
			case "list- findings- by- issue":
				endpoint = c.ListFindingsByIssue()
				data, err = issuesc.BuildListFindingsByIssuePayload(*issuesListFindingsByIssueIDFlag, *issuesListFindingsByIssueStatusFlag, *issuesListFindingsByIssueSortByFlag, *issuesListFindingsByIssuePageFlag, *issuesListFindingsByIssueSizeFlag)
			case "list- findings- by- issue- and- target":
				endpoint = c.ListFindingsByIssueAndTarget()
				data, err = issuesc.BuildListFindingsByIssueAndTargetPayload(*issuesListFindingsByIssueAndTargetIssueIDFlag, *issuesListFindingsByIssueAndTargetTargetIDFlag)
			case "get- issue- mttr":
				endpoint = c.GetIssueMTTR()
				data, err = issuesc.BuildGetIssueMTTRPayload(*issuesGetIssueMTTRIDFlag)
			}
		case "sources":
			c := sourcesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list- sources":
				endpoint = c.ListSources()
				data, err = sourcesc.BuildListSourcesPayload(*sourcesListSourcesPageFlag, *sourcesListSourcesSizeFlag)
			case "get- source":
				endpoint = c.GetSource()
				data, err = sourcesc.BuildGetSourcePayload(*sourcesGetSourceIDFlag)
			case "list- findings- by- source":
				endpoint = c.ListFindingsBySource()
				data, err = sourcesc.BuildListFindingsBySourcePayload(*sourcesListFindingsBySourceIDFlag, *sourcesListFindingsBySourceStatusFlag, *sourcesListFindingsBySourceSortByFlag, *sourcesListFindingsBySourcePageFlag, *sourcesListFindingsBySourceSizeFlag)
			case "get- source- mttr":
				endpoint = c.GetSourceMTTR()
				data, err = sourcesc.BuildGetSourceMTTRPayload(*sourcesGetSourceMTTRIDFlag)
			}
		case "targets":
			c := targetsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list- targets":
				endpoint = c.ListTargets()
				data, err = targetsc.BuildListTargetsPayload(*targetsListTargetsTagFlag, *targetsListTargetsIdentifierFlag, *targetsListTargetsPageFlag, *targetsListTargetsSizeFlag, *targetsListTargetsIdentifiermatchFlag)
			case "targets- summary":
				endpoint = c.TargetsSummary()
				data, err = targetsc.BuildTargetsSummaryPayload(*targetsTargetsSummaryTagFlag, *targetsTargetsSummaryStatusFlag, *targetsTargetsSummarySortByFlag, *targetsTargetsSummaryPageFlag, *targetsTargetsSummarySizeFlag)
			case "get- target":
				endpoint = c.GetTarget()
				data, err = targetsc.BuildGetTargetPayload(*targetsGetTargetIDFlag)
			case "list- findings- by- target":
				endpoint = c.ListFindingsByTarget()
				data, err = targetsc.BuildListFindingsByTargetPayload(*targetsListFindingsByTargetIDFlag, *targetsListFindingsByTargetStatusFlag, *targetsListFindingsByTargetSortByFlag, *targetsListFindingsByTargetPageFlag, *targetsListFindingsByTargetSizeFlag)
			case "list- findings- by- target- and- issue":
				endpoint = c.ListFindingsByTargetAndIssue()
				data, err = targetsc.BuildListFindingsByTargetAndIssuePayload(*targetsListFindingsByTargetAndIssueTargetIDFlag, *targetsListFindingsByTargetAndIssueIssueIDFlag)
			case "get- target- mttr":
				endpoint = c.GetTargetMTTR()
				data, err = targetsc.BuildGetTargetMTTRPayload(*targetsGetTargetMTTRIDFlag)
			case "delete- target- tag":
				endpoint = c.DeleteTargetTag()
				data, err = targetsc.BuildDeleteTargetTagPayload(*targetsDeleteTargetTagTargetIDFlag, *targetsDeleteTargetTagTagFlag, *targetsDeleteTargetTagAuthFlag)
			case "delete- tag":
				endpoint = c.DeleteTag()
				data, err = targetsc.BuildDeleteTagPayload(*targetsDeleteTagTagFlag, *targetsDeleteTagAuthFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// eventsUsage displays the usage of the events command and its subcommands.
func eventsUsage() {
	fmt.Fprintf(os.Stderr, `Finding events endpoint.
Usage:
    %s [globalflags] events COMMAND [flags]

COMMAND:
    list- finding- events: ListFindingEvents implements List finding events.

Additional help:
    %s events COMMAND --help
`, os.Args[0], os.Args[0])
}
func eventsListFindingEventsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] events list- finding- events -min-score INT -max-score INT -min-date STRING -max-date STRING -page INT -size INT

ListFindingEvents implements List finding events.
    -min-score INT: 
    -max-score INT: 
    -min-date STRING: 
    -max-date STRING: 
    -page INT: 
    -size INT: 

Example:
    `+os.Args[0]+` events list- finding- events --min-score 3658746551860606042 --max-score 9045686723811193024 --min-date "Similique quae voluptate temporibus." --max-date "Aut et." --page 7878978031843854175 --size 6808670066526919206
`, os.Args[0])
}

// statsUsage displays the usage of the stats command and its subcommands.
func statsUsage() {
	fmt.Fprintf(os.Stderr, `Stats endpoint.
Usage:
    %s [globalflags] stats COMMAND [flags]

COMMAND:
    get- size- stats: GetSizeStats implements Get size stats.
    get- open- issues- stats: This method gets statistics for open findings by using different filters.
	When querying for a specific time range, it returns every finding that has been found in that time, regardless if that finding has also been fixed in that span of time.
    get- fixed- issues- stats: This method gets statistics for fixed findings by using different filters.
	When querying for a specific time range, it returns every finding that has been fixed in that time and it's fixed at the end of the time range specified, so a finding that is fixed and then reopened in that range of time will not be counted.
    get- issues- stats: GetIssuesStats implements Get issues stats.
    get- stats- mttr: GetStatsMTTR implements Get stats MTTR.

Additional help:
    %s stats COMMAND --help
`, os.Args[0], os.Args[0])
}
func statsGetSizeStatsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] stats get- size- stats

GetSizeStats implements Get size stats.

Example:
    `+os.Args[0]+` stats get- size- stats
`, os.Args[0])
}

func statsGetOpenIssuesStatsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] stats get- open- issues- stats -tag STRING -min-date STRING -max-date STRING -at-date STRING

This method gets statistics for open findings by using different filters.
	When querying for a specific time range, it returns every finding that has been found in that time, regardless if that finding has also been fixed in that span of time.
    -tag STRING: 
    -min-date STRING: 
    -max-date STRING: 
    -at-date STRING: 

Example:
    `+os.Args[0]+` stats get- open- issues- stats --tag "Et et." --min-date "Et tempora reiciendis sed nobis." --max-date "Alias fuga et perferendis soluta voluptatem excepturi." --at-date "Veniam accusamus."
`, os.Args[0])
}

func statsGetFixedIssuesStatsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] stats get- fixed- issues- stats -tag STRING -min-date STRING -max-date STRING -at-date STRING

This method gets statistics for fixed findings by using different filters.
	When querying for a specific time range, it returns every finding that has been fixed in that time and it's fixed at the end of the time range specified, so a finding that is fixed and then reopened in that range of time will not be counted.
    -tag STRING: 
    -min-date STRING: 
    -max-date STRING: 
    -at-date STRING: 

Example:
    `+os.Args[0]+` stats get- fixed- issues- stats --tag "In dolores." --min-date "Sunt commodi qui enim architecto eos." --max-date "Quis mollitia et." --at-date "Illum non."
`, os.Args[0])
}

func statsGetIssuesStatsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] stats get- issues- stats -min-date STRING -max-date STRING -min-score INT -max-score INT

GetIssuesStats implements Get issues stats.
    -min-date STRING: 
    -max-date STRING: 
    -min-score INT: 
    -max-score INT: 

Example:
    `+os.Args[0]+` stats get- issues- stats --min-date "In qui reprehenderit et ipsam nulla doloribus." --max-date "Tempora tenetur sunt sit." --min-score 8804216514421776374 --max-score 7871634496073358209
`, os.Args[0])
}

func statsGetStatsMTTRUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] stats get- stats- mttr -tag STRING -min-date STRING -max-date STRING

GetStatsMTTR implements Get stats MTTR.
    -tag STRING: 
    -min-date STRING: 
    -max-date STRING: 

Example:
    `+os.Args[0]+` stats get- stats- mttr --tag "Possimus beatae itaque aut est minima commodi." --min-date "Est et ut velit voluptatem quis." --max-date "Blanditiis sed."
`, os.Args[0])
}

// findingsUsage displays the usage of the findings command and its subcommands.
func findingsUsage() {
	fmt.Fprintf(os.Stderr, `Findings endpoint.
Usage:
    %s [globalflags] findings COMMAND [flags]

COMMAND:
    list- findings: This method allows to list findings by using different filters.
	When querying for open findings in a specific time range, it returns every finding that has been found in that time, regardless if that finding has also been fixed in that span of time.
	When querying for fixed findings in a specific time range, it returns every finding that has been fixed in that time and it's fixed at the end of that time range, so a finding that is fixed and then reopened in that range of time will not be returned.
    get- finding: GetFinding implements Get finding.
    list- events- by- finding: ListEventsByFinding implements List events by finding.
    get- finding- mttr: GetFindingMTTR implements Get finding MTTR.

Additional help:
    %s findings COMMAND --help
`, os.Args[0], os.Args[0])
}
func findingsListFindingsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] findings list- findings -tag STRING -status STRING -min-score INT -max-score INT -at-date STRING -min-date STRING -max-date STRING -sort-by STRING -page INT -size INT -identifier STRING -identifiermatch BOOL

This method allows to list findings by using different filters.
	When querying for open findings in a specific time range, it returns every finding that has been found in that time, regardless if that finding has also been fixed in that span of time.
	When querying for fixed findings in a specific time range, it returns every finding that has been fixed in that time and it's fixed at the end of that time range, so a finding that is fixed and then reopened in that range of time will not be returned.
    -tag STRING: 
    -status STRING: 
    -min-score INT: 
    -max-score INT: 
    -at-date STRING: 
    -min-date STRING: 
    -max-date STRING: 
    -sort-by STRING: 
    -page INT: 
    -size INT: 
    -identifier STRING: 
    -identifiermatch BOOL: 

Example:
    `+os.Args[0]+` findings list- findings --tag "Eos et et est dolores quis." --status "Ipsa vel." --min-score 2934361164996192541 --max-score 3242935233917102927 --at-date "Ipsa ut quia quod molestiae." --min-date "Eos voluptatem nihil molestiae officiis." --max-date "Itaque laborum non dolorem natus veniam sint." --sort-by "Minus cupiditate blanditiis quia exercitationem sint." --page 1900947858375086732 --size 423289908899154444 --identifier "Ut quis ut optio voluptates laboriosam maiores." --identifiermatch false
`, os.Args[0])
}

func findingsGetFindingUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] findings get- finding -id STRING

GetFinding implements Get finding.
    -id STRING: Finding ID

Example:
    `+os.Args[0]+` findings get- finding --id "Optio illum."
`, os.Args[0])
}

func findingsListEventsByFindingUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] findings list- events- by- finding -id STRING -page INT -size INT

ListEventsByFinding implements List events by finding.
    -id STRING: Finding ID
    -page INT: 
    -size INT: 

Example:
    `+os.Args[0]+` findings list- events- by- finding --id "Sit nihil fugiat sed aliquid consequatur sed." --page 6815817296718664766 --size 969405237466907915
`, os.Args[0])
}

func findingsGetFindingMTTRUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] findings get- finding- mttr -id STRING

GetFindingMTTR implements Get finding MTTR.
    -id STRING: Finding ID

Example:
    `+os.Args[0]+` findings get- finding- mttr --id "Id delectus dolores quidem."
`, os.Args[0])
}

// issuesUsage displays the usage of the issues command and its subcommands.
func issuesUsage() {
	fmt.Fprintf(os.Stderr, `Issues endpoint.
Usage:
    %s [globalflags] issues COMMAND [flags]

COMMAND:
    list- issues: ListIssues implements List issues.
    issues- summary: IssuesSummary implements Issues summary.
    get- issue: GetIssue implements Get issue.
    list- findings- by- issue: ListFindingsByIssue implements List findings by issue.
    list- findings- by- issue- and- target: ListFindingsByIssueAndTarget implements List findings by issue and target.
    get- issue- mttr: GetIssueMTTR implements Get issue MTTR.

Additional help:
    %s issues COMMAND --help
`, os.Args[0], os.Args[0])
}
func issuesListIssuesUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] issues list- issues -page INT -size INT

ListIssues implements List issues.
    -page INT: 
    -size INT: 

Example:
    `+os.Args[0]+` issues list- issues --page 9036939894384681291 --size 3925975963127894705
`, os.Args[0])
}

func issuesIssuesSummaryUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] issues issues- summary -tag STRING -status STRING -sort-by STRING -page INT -size INT

IssuesSummary implements Issues summary.
    -tag STRING: 
    -status STRING: 
    -sort-by STRING: 
    -page INT: 
    -size INT: 

Example:
    `+os.Args[0]+` issues issues- summary --tag "Nostrum eius qui nemo iure quos quisquam." --status "Laborum facilis voluptas et." --sort-by "Ut ab deserunt pariatur ex ipsum deleniti." --page 7262289788038828029 --size 3700419542981394506
`, os.Args[0])
}

func issuesGetIssueUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] issues get- issue -id STRING

GetIssue implements Get issue.
    -id STRING: Issue ID

Example:
    `+os.Args[0]+` issues get- issue --id "Dicta voluptatum adipisci voluptas."
`, os.Args[0])
}

func issuesListFindingsByIssueUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] issues list- findings- by- issue -id STRING -status STRING -sort-by STRING -page INT -size INT

ListFindingsByIssue implements List findings by issue.
    -id STRING: Issue ID
    -status STRING: 
    -sort-by STRING: 
    -page INT: 
    -size INT: 

Example:
    `+os.Args[0]+` issues list- findings- by- issue --id "Blanditiis ducimus qui voluptatem nemo." --status "Harum modi." --sort-by "Animi dignissimos laborum quod doloribus." --page 2380728719526698105 --size 2365504070455883539
`, os.Args[0])
}

func issuesListFindingsByIssueAndTargetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] issues list- findings- by- issue- and- target -issue-id STRING -target-id STRING

ListFindingsByIssueAndTarget implements List findings by issue and target.
    -issue-id STRING: Issue ID
    -target-id STRING: Target ID

Example:
    `+os.Args[0]+` issues list- findings- by- issue- and- target --issue-id "Soluta officia fugiat ab delectus unde odit." --target-id "Cum consequatur illo saepe."
`, os.Args[0])
}

func issuesGetIssueMTTRUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] issues get- issue- mttr -id STRING

GetIssueMTTR implements Get issue MTTR.
    -id STRING: Issue ID

Example:
    `+os.Args[0]+` issues get- issue- mttr --id "Corporis eos iusto voluptas iste ipsam nisi."
`, os.Args[0])
}

// sourcesUsage displays the usage of the sources command and its subcommands.
func sourcesUsage() {
	fmt.Fprintf(os.Stderr, `Sources endpoint.
Usage:
    %s [globalflags] sources COMMAND [flags]

COMMAND:
    list- sources: ListSources implements List sources.
    get- source: GetSource implements Get source.
    list- findings- by- source: ListFindingsBySource implements List findings by source.
    get- source- mttr: GetSourceMTTR implements Get source MTTR.

Additional help:
    %s sources COMMAND --help
`, os.Args[0], os.Args[0])
}
func sourcesListSourcesUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] sources list- sources -page INT -size INT

ListSources implements List sources.
    -page INT: 
    -size INT: 

Example:
    `+os.Args[0]+` sources list- sources --page 5139768737605662158 --size 6450233093740567818
`, os.Args[0])
}

func sourcesGetSourceUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] sources get- source -id STRING

GetSource implements Get source.
    -id STRING: Source ID

Example:
    `+os.Args[0]+` sources get- source --id "Qui dolores alias iusto harum dolores nulla."
`, os.Args[0])
}

func sourcesListFindingsBySourceUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] sources list- findings- by- source -id STRING -status STRING -sort-by STRING -page INT -size INT

ListFindingsBySource implements List findings by source.
    -id STRING: Source ID
    -status STRING: 
    -sort-by STRING: 
    -page INT: 
    -size INT: 

Example:
    `+os.Args[0]+` sources list- findings- by- source --id "Aut facilis vitae." --status "Explicabo quasi sapiente explicabo." --sort-by "Et pariatur." --page 788720848441642391 --size 6430717436975785015
`, os.Args[0])
}

func sourcesGetSourceMTTRUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] sources get- source- mttr -id STRING

GetSourceMTTR implements Get source MTTR.
    -id STRING: Source ID

Example:
    `+os.Args[0]+` sources get- source- mttr --id "Commodi praesentium sint voluptatem sed."
`, os.Args[0])
}

// targetsUsage displays the usage of the targets command and its subcommands.
func targetsUsage() {
	fmt.Fprintf(os.Stderr, `Targets endpoint.
Usage:
    %s [globalflags] targets COMMAND [flags]

COMMAND:
    list- targets: ListTargets implements List targets.
    targets- summary: TargetsSummary implements Targets summary.
    get- target: GetTarget implements Get target.
    list- findings- by- target: ListFindingsByTarget implements List findings by target.
    list- findings- by- target- and- issue: ListFindingsByTargetAndIssue implements List findings by target and issue.
    get- target- mttr: GetTargetMTTR implements Get target MTTR.
    delete- target- tag: DeleteTargetTag implements Delete target tag.
    delete- tag: DeleteTag implements Delete tag.

Additional help:
    %s targets COMMAND --help
`, os.Args[0], os.Args[0])
}
func targetsListTargetsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] targets list- targets -tag STRING -identifier STRING -page INT -size INT -identifiermatch BOOL

ListTargets implements List targets.
    -tag STRING: 
    -identifier STRING: 
    -page INT: 
    -size INT: 
    -identifiermatch BOOL: 

Example:
    `+os.Args[0]+` targets list- targets --tag "Quod qui ratione nobis." --identifier "Nobis sapiente qui mollitia repellendus." --page 8830932856761267821 --size 1989934718131249439 --identifiermatch true
`, os.Args[0])
}

func targetsTargetsSummaryUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] targets targets- summary -tag STRING -status STRING -sort-by STRING -page INT -size INT

TargetsSummary implements Targets summary.
    -tag STRING: 
    -status STRING: 
    -sort-by STRING: 
    -page INT: 
    -size INT: 

Example:
    `+os.Args[0]+` targets targets- summary --tag "Perspiciatis doloribus eum voluptatem distinctio et." --status "Rerum deleniti non." --sort-by "Minima atque rerum quia repudiandae." --page 9112769630470342285 --size 2922616992315727164
`, os.Args[0])
}

func targetsGetTargetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] targets get- target -id STRING

GetTarget implements Get target.
    -id STRING: Target ID

Example:
    `+os.Args[0]+` targets get- target --id "Sit ad quos magnam vel eum est."
`, os.Args[0])
}

func targetsListFindingsByTargetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] targets list- findings- by- target -id STRING -status STRING -sort-by STRING -page INT -size INT

ListFindingsByTarget implements List findings by target.
    -id STRING: Target ID
    -status STRING: 
    -sort-by STRING: 
    -page INT: 
    -size INT: 

Example:
    `+os.Args[0]+` targets list- findings- by- target --id "Modi quisquam." --status "Quae aut blanditiis quidem ipsam corporis." --sort-by "Culpa debitis quisquam eius quos." --page 4407197748731854967 --size 4281676833467848890
`, os.Args[0])
}

func targetsListFindingsByTargetAndIssueUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] targets list- findings- by- target- and- issue -target-id STRING -issue-id STRING

ListFindingsByTargetAndIssue implements List findings by target and issue.
    -target-id STRING: Target ID
    -issue-id STRING: Issue ID

Example:
    `+os.Args[0]+` targets list- findings- by- target- and- issue --target-id "Ad nobis repellendus ipsa dolores velit labore." --issue-id "Omnis ipsam quae voluptatem."
`, os.Args[0])
}

func targetsGetTargetMTTRUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] targets get- target- mttr -id STRING

GetTargetMTTR implements Get target MTTR.
    -id STRING: Target ID

Example:
    `+os.Args[0]+` targets get- target- mttr --id "Sapiente itaque fuga necessitatibus voluptates consequatur illum."
`, os.Args[0])
}

func targetsDeleteTargetTagUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] targets delete- target- tag -target-id STRING -tag STRING -auth STRING

DeleteTargetTag implements Delete target tag.
    -target-id STRING: Target ID
    -tag STRING: Tag
    -auth STRING: 

Example:
    `+os.Args[0]+` targets delete- target- tag --target-id "Similique adipisci velit assumenda nostrum sit occaecati." --tag "Cumque occaecati labore quisquam repellendus." --auth "TAG tag=mytag"
`, os.Args[0])
}

func targetsDeleteTagUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] targets delete- tag -tag STRING -auth STRING

DeleteTag implements Delete tag.
    -tag STRING: Tag
    -auth STRING: 

Example:
    `+os.Args[0]+` targets delete- tag --tag "Nihil hic labore sed eos similique amet." --auth "TAG tag=mytag"
`, os.Args[0])
}
