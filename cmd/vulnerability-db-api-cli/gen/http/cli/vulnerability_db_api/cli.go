// Code generated by goa v3.0.6, DO NOT EDIT.
//
// vulnerability-db-api HTTP client CLI support package
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	eventsc "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/http/events/client"
	findingsc "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/http/findings/client"
	issuesc "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/http/issues/client"
	labelsc "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/http/labels/client"
	sourcesc "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/http/sources/client"
	statsc "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/http/stats/client"
	targetsc "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/http/targets/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `events list- finding- events
labels list- labels
stats (get- size- stats|get- open- issues- stats|get- fixed- issues- stats|get- issues- stats|get- stats- mttr|get- stats- exposure)
findings (list- findings|get- finding|list- events- by- finding|get- finding- mttr|patch- finding)
issues (list- issues|issues- summary|get- issue|list- findings- by- issue|list- findings- by- issue- and- target|get- issue- mttr)
sources (list- sources|get- source|list- findings- by- source|get- source- mttr)
targets (list- targets|targets- summary|get- target|create- target|list- findings- by- target|list- findings- by- target- and- issue|get- target- mttr|delete- target- tag|delete- tag)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` events list- finding- events --min-score 6797912008452328905 --max-score 2934361164996192541 --min-date "Incidunt ipsa ut quia quod." --max-date "Aliquid eos voluptatem." --page 7346016241856859671 --size 7613360009095655762` + "\n" +
		os.Args[0] + ` labels list- labels --tag "Non dolorem natus veniam." --status "Laudantium minus cupiditate blanditiis quia exercitationem sint." --at-date "Expedita ullam ut quis ut." --min-date "Voluptates laboriosam maiores maxime." --max-date "Consequatur dolore est qui." --identifiers "Optio doloremque."` + "\n" +
		os.Args[0] + ` stats get- size- stats` + "\n" +
		os.Args[0] + ` findings list- findings --tag "Qui dolores alias iusto harum dolores nulla." --status "Saepe et voluptatem corrupti quisquam vitae." --min-score 8086326669012016674 --max-score 8606047200335516518 --at-date "Cumque sint dolorem." --min-date "Unde natus aut facilis vitae eum explicabo." --max-date "Sapiente explicabo tenetur et." --sort-by "Perspiciatis qui ex ut sunt nemo." --page 3622791337925535008 --size 1059598710614675546 --identifier "Sint voluptatem sed enim veniam." --identifiermatch true --identifiers "Qui ratione nobis." --labels "Nobis sapiente qui mollitia repellendus."` + "\n" +
		os.Args[0] + ` issues list- issues --page 5419968525105284682 --size 1265661371217974861` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		eventsFlags = flag.NewFlagSet("events", flag.ContinueOnError)

		eventsListFindingEventsFlags        = flag.NewFlagSet("list- finding- events", flag.ExitOnError)
		eventsListFindingEventsMinScoreFlag = eventsListFindingEventsFlags.String("min-score", "", "")
		eventsListFindingEventsMaxScoreFlag = eventsListFindingEventsFlags.String("max-score", "", "")
		eventsListFindingEventsMinDateFlag  = eventsListFindingEventsFlags.String("min-date", "", "")
		eventsListFindingEventsMaxDateFlag  = eventsListFindingEventsFlags.String("max-date", "", "")
		eventsListFindingEventsPageFlag     = eventsListFindingEventsFlags.String("page", "", "")
		eventsListFindingEventsSizeFlag     = eventsListFindingEventsFlags.String("size", "", "")

		labelsFlags = flag.NewFlagSet("labels", flag.ContinueOnError)

		labelsListLabelsFlags           = flag.NewFlagSet("list- labels", flag.ExitOnError)
		labelsListLabelsTagFlag         = labelsListLabelsFlags.String("tag", "", "")
		labelsListLabelsStatusFlag      = labelsListLabelsFlags.String("status", "", "")
		labelsListLabelsAtDateFlag      = labelsListLabelsFlags.String("at-date", "", "")
		labelsListLabelsMinDateFlag     = labelsListLabelsFlags.String("min-date", "", "")
		labelsListLabelsMaxDateFlag     = labelsListLabelsFlags.String("max-date", "", "")
		labelsListLabelsIdentifiersFlag = labelsListLabelsFlags.String("identifiers", "", "")

		statsFlags = flag.NewFlagSet("stats", flag.ContinueOnError)

		statsGetSizeStatsFlags = flag.NewFlagSet("get- size- stats", flag.ExitOnError)

		statsGetOpenIssuesStatsFlags           = flag.NewFlagSet("get- open- issues- stats", flag.ExitOnError)
		statsGetOpenIssuesStatsTagFlag         = statsGetOpenIssuesStatsFlags.String("tag", "", "")
		statsGetOpenIssuesStatsMinDateFlag     = statsGetOpenIssuesStatsFlags.String("min-date", "", "")
		statsGetOpenIssuesStatsMaxDateFlag     = statsGetOpenIssuesStatsFlags.String("max-date", "", "")
		statsGetOpenIssuesStatsAtDateFlag      = statsGetOpenIssuesStatsFlags.String("at-date", "", "")
		statsGetOpenIssuesStatsIdentifiersFlag = statsGetOpenIssuesStatsFlags.String("identifiers", "", "")
		statsGetOpenIssuesStatsLabelsFlag      = statsGetOpenIssuesStatsFlags.String("labels", "", "")

		statsGetFixedIssuesStatsFlags           = flag.NewFlagSet("get- fixed- issues- stats", flag.ExitOnError)
		statsGetFixedIssuesStatsTagFlag         = statsGetFixedIssuesStatsFlags.String("tag", "", "")
		statsGetFixedIssuesStatsMinDateFlag     = statsGetFixedIssuesStatsFlags.String("min-date", "", "")
		statsGetFixedIssuesStatsMaxDateFlag     = statsGetFixedIssuesStatsFlags.String("max-date", "", "")
		statsGetFixedIssuesStatsAtDateFlag      = statsGetFixedIssuesStatsFlags.String("at-date", "", "")
		statsGetFixedIssuesStatsIdentifiersFlag = statsGetFixedIssuesStatsFlags.String("identifiers", "", "")
		statsGetFixedIssuesStatsLabelsFlag      = statsGetFixedIssuesStatsFlags.String("labels", "", "")

		statsGetIssuesStatsFlags        = flag.NewFlagSet("get- issues- stats", flag.ExitOnError)
		statsGetIssuesStatsMinDateFlag  = statsGetIssuesStatsFlags.String("min-date", "", "")
		statsGetIssuesStatsMaxDateFlag  = statsGetIssuesStatsFlags.String("max-date", "", "")
		statsGetIssuesStatsMinScoreFlag = statsGetIssuesStatsFlags.String("min-score", "", "")
		statsGetIssuesStatsMaxScoreFlag = statsGetIssuesStatsFlags.String("max-score", "", "")

		statsGetStatsMTTRFlags       = flag.NewFlagSet("get- stats- mttr", flag.ExitOnError)
		statsGetStatsMTTRTagFlag     = statsGetStatsMTTRFlags.String("tag", "", "")
		statsGetStatsMTTRMinDateFlag = statsGetStatsMTTRFlags.String("min-date", "", "")
		statsGetStatsMTTRMaxDateFlag = statsGetStatsMTTRFlags.String("max-date", "", "")

		statsGetStatsExposureFlags        = flag.NewFlagSet("get- stats- exposure", flag.ExitOnError)
		statsGetStatsExposureTagFlag      = statsGetStatsExposureFlags.String("tag", "", "")
		statsGetStatsExposureAtDateFlag   = statsGetStatsExposureFlags.String("at-date", "", "")
		statsGetStatsExposureMinScoreFlag = statsGetStatsExposureFlags.String("min-score", "", "")
		statsGetStatsExposureMaxScoreFlag = statsGetStatsExposureFlags.String("max-score", "", "")

		findingsFlags = flag.NewFlagSet("findings", flag.ContinueOnError)

		findingsListFindingsFlags               = flag.NewFlagSet("list- findings", flag.ExitOnError)
		findingsListFindingsTagFlag             = findingsListFindingsFlags.String("tag", "", "")
		findingsListFindingsStatusFlag          = findingsListFindingsFlags.String("status", "", "")
		findingsListFindingsMinScoreFlag        = findingsListFindingsFlags.String("min-score", "", "")
		findingsListFindingsMaxScoreFlag        = findingsListFindingsFlags.String("max-score", "", "")
		findingsListFindingsAtDateFlag          = findingsListFindingsFlags.String("at-date", "", "")
		findingsListFindingsMinDateFlag         = findingsListFindingsFlags.String("min-date", "", "")
		findingsListFindingsMaxDateFlag         = findingsListFindingsFlags.String("max-date", "", "")
		findingsListFindingsSortByFlag          = findingsListFindingsFlags.String("sort-by", "", "")
		findingsListFindingsPageFlag            = findingsListFindingsFlags.String("page", "", "")
		findingsListFindingsSizeFlag            = findingsListFindingsFlags.String("size", "", "")
		findingsListFindingsIdentifierFlag      = findingsListFindingsFlags.String("identifier", "", "")
		findingsListFindingsIdentifiermatchFlag = findingsListFindingsFlags.String("identifiermatch", "", "")
		findingsListFindingsIdentifiersFlag     = findingsListFindingsFlags.String("identifiers", "", "")
		findingsListFindingsLabelsFlag          = findingsListFindingsFlags.String("labels", "", "")

		findingsGetFindingFlags  = flag.NewFlagSet("get- finding", flag.ExitOnError)
		findingsGetFindingIDFlag = findingsGetFindingFlags.String("id", "REQUIRED", "Finding ID")

		findingsListEventsByFindingFlags    = flag.NewFlagSet("list- events- by- finding", flag.ExitOnError)
		findingsListEventsByFindingIDFlag   = findingsListEventsByFindingFlags.String("id", "REQUIRED", "Finding ID")
		findingsListEventsByFindingPageFlag = findingsListEventsByFindingFlags.String("page", "", "")
		findingsListEventsByFindingSizeFlag = findingsListEventsByFindingFlags.String("size", "", "")

		findingsGetFindingMTTRFlags  = flag.NewFlagSet("get- finding- mttr", flag.ExitOnError)
		findingsGetFindingMTTRIDFlag = findingsGetFindingMTTRFlags.String("id", "REQUIRED", "Finding ID")

		findingsPatchFindingFlags             = flag.NewFlagSet("patch- finding", flag.ExitOnError)
		findingsPatchFindingBodyFlag          = findingsPatchFindingFlags.String("body", "REQUIRED", "")
		findingsPatchFindingIDFlag            = findingsPatchFindingFlags.String("id", "REQUIRED", "Finding ID")
		findingsPatchFindingAuthorizationFlag = findingsPatchFindingFlags.String("authorization", "", "")

		issuesFlags = flag.NewFlagSet("issues", flag.ContinueOnError)

		issuesListIssuesFlags    = flag.NewFlagSet("list- issues", flag.ExitOnError)
		issuesListIssuesPageFlag = issuesListIssuesFlags.String("page", "", "")
		issuesListIssuesSizeFlag = issuesListIssuesFlags.String("size", "", "")

		issuesIssuesSummaryFlags           = flag.NewFlagSet("issues- summary", flag.ExitOnError)
		issuesIssuesSummaryTagFlag         = issuesIssuesSummaryFlags.String("tag", "", "")
		issuesIssuesSummaryStatusFlag      = issuesIssuesSummaryFlags.String("status", "", "")
		issuesIssuesSummarySortByFlag      = issuesIssuesSummaryFlags.String("sort-by", "", "")
		issuesIssuesSummaryPageFlag        = issuesIssuesSummaryFlags.String("page", "", "")
		issuesIssuesSummarySizeFlag        = issuesIssuesSummaryFlags.String("size", "", "")
		issuesIssuesSummaryIdentifiersFlag = issuesIssuesSummaryFlags.String("identifiers", "", "")
		issuesIssuesSummaryLabelsFlag      = issuesIssuesSummaryFlags.String("labels", "", "")

		issuesGetIssueFlags  = flag.NewFlagSet("get- issue", flag.ExitOnError)
		issuesGetIssueIDFlag = issuesGetIssueFlags.String("id", "REQUIRED", "Issue ID")

		issuesListFindingsByIssueFlags           = flag.NewFlagSet("list- findings- by- issue", flag.ExitOnError)
		issuesListFindingsByIssueIDFlag          = issuesListFindingsByIssueFlags.String("id", "REQUIRED", "Issue ID")
		issuesListFindingsByIssueStatusFlag      = issuesListFindingsByIssueFlags.String("status", "", "")
		issuesListFindingsByIssueSortByFlag      = issuesListFindingsByIssueFlags.String("sort-by", "", "")
		issuesListFindingsByIssuePageFlag        = issuesListFindingsByIssueFlags.String("page", "", "")
		issuesListFindingsByIssueSizeFlag        = issuesListFindingsByIssueFlags.String("size", "", "")
		issuesListFindingsByIssueIdentifiersFlag = issuesListFindingsByIssueFlags.String("identifiers", "", "")
		issuesListFindingsByIssueLabelsFlag      = issuesListFindingsByIssueFlags.String("labels", "", "")

		issuesListFindingsByIssueAndTargetFlags        = flag.NewFlagSet("list- findings- by- issue- and- target", flag.ExitOnError)
		issuesListFindingsByIssueAndTargetIssueIDFlag  = issuesListFindingsByIssueAndTargetFlags.String("issue-id", "REQUIRED", "Issue ID")
		issuesListFindingsByIssueAndTargetTargetIDFlag = issuesListFindingsByIssueAndTargetFlags.String("target-id", "REQUIRED", "Target ID")

		issuesGetIssueMTTRFlags  = flag.NewFlagSet("get- issue- mttr", flag.ExitOnError)
		issuesGetIssueMTTRIDFlag = issuesGetIssueMTTRFlags.String("id", "REQUIRED", "Issue ID")

		sourcesFlags = flag.NewFlagSet("sources", flag.ContinueOnError)

		sourcesListSourcesFlags    = flag.NewFlagSet("list- sources", flag.ExitOnError)
		sourcesListSourcesPageFlag = sourcesListSourcesFlags.String("page", "", "")
		sourcesListSourcesSizeFlag = sourcesListSourcesFlags.String("size", "", "")

		sourcesGetSourceFlags  = flag.NewFlagSet("get- source", flag.ExitOnError)
		sourcesGetSourceIDFlag = sourcesGetSourceFlags.String("id", "REQUIRED", "Source ID")

		sourcesListFindingsBySourceFlags      = flag.NewFlagSet("list- findings- by- source", flag.ExitOnError)
		sourcesListFindingsBySourceIDFlag     = sourcesListFindingsBySourceFlags.String("id", "REQUIRED", "Source ID")
		sourcesListFindingsBySourceStatusFlag = sourcesListFindingsBySourceFlags.String("status", "", "")
		sourcesListFindingsBySourceSortByFlag = sourcesListFindingsBySourceFlags.String("sort-by", "", "")
		sourcesListFindingsBySourcePageFlag   = sourcesListFindingsBySourceFlags.String("page", "", "")
		sourcesListFindingsBySourceSizeFlag   = sourcesListFindingsBySourceFlags.String("size", "", "")

		sourcesGetSourceMTTRFlags  = flag.NewFlagSet("get- source- mttr", flag.ExitOnError)
		sourcesGetSourceMTTRIDFlag = sourcesGetSourceMTTRFlags.String("id", "REQUIRED", "Source ID")

		targetsFlags = flag.NewFlagSet("targets", flag.ContinueOnError)

		targetsListTargetsFlags               = flag.NewFlagSet("list- targets", flag.ExitOnError)
		targetsListTargetsTagFlag             = targetsListTargetsFlags.String("tag", "", "")
		targetsListTargetsIdentifierFlag      = targetsListTargetsFlags.String("identifier", "", "")
		targetsListTargetsPageFlag            = targetsListTargetsFlags.String("page", "", "")
		targetsListTargetsSizeFlag            = targetsListTargetsFlags.String("size", "", "")
		targetsListTargetsIdentifiermatchFlag = targetsListTargetsFlags.String("identifiermatch", "", "")
		targetsListTargetsIdentifiersFlag     = targetsListTargetsFlags.String("identifiers", "", "")

		targetsTargetsSummaryFlags           = flag.NewFlagSet("targets- summary", flag.ExitOnError)
		targetsTargetsSummaryTagFlag         = targetsTargetsSummaryFlags.String("tag", "", "")
		targetsTargetsSummaryStatusFlag      = targetsTargetsSummaryFlags.String("status", "", "")
		targetsTargetsSummarySortByFlag      = targetsTargetsSummaryFlags.String("sort-by", "", "")
		targetsTargetsSummaryPageFlag        = targetsTargetsSummaryFlags.String("page", "", "")
		targetsTargetsSummarySizeFlag        = targetsTargetsSummaryFlags.String("size", "", "")
		targetsTargetsSummaryIdentifiersFlag = targetsTargetsSummaryFlags.String("identifiers", "", "")
		targetsTargetsSummaryLabelsFlag      = targetsTargetsSummaryFlags.String("labels", "", "")

		targetsGetTargetFlags  = flag.NewFlagSet("get- target", flag.ExitOnError)
		targetsGetTargetIDFlag = targetsGetTargetFlags.String("id", "REQUIRED", "Target ID")

		targetsCreateTargetFlags    = flag.NewFlagSet("create- target", flag.ExitOnError)
		targetsCreateTargetBodyFlag = targetsCreateTargetFlags.String("body", "REQUIRED", "")

		targetsListFindingsByTargetFlags      = flag.NewFlagSet("list- findings- by- target", flag.ExitOnError)
		targetsListFindingsByTargetIDFlag     = targetsListFindingsByTargetFlags.String("id", "REQUIRED", "Target ID")
		targetsListFindingsByTargetStatusFlag = targetsListFindingsByTargetFlags.String("status", "", "")
		targetsListFindingsByTargetSortByFlag = targetsListFindingsByTargetFlags.String("sort-by", "", "")
		targetsListFindingsByTargetPageFlag   = targetsListFindingsByTargetFlags.String("page", "", "")
		targetsListFindingsByTargetSizeFlag   = targetsListFindingsByTargetFlags.String("size", "", "")
		targetsListFindingsByTargetLabelsFlag = targetsListFindingsByTargetFlags.String("labels", "", "")

		targetsListFindingsByTargetAndIssueFlags        = flag.NewFlagSet("list- findings- by- target- and- issue", flag.ExitOnError)
		targetsListFindingsByTargetAndIssueTargetIDFlag = targetsListFindingsByTargetAndIssueFlags.String("target-id", "REQUIRED", "Target ID")
		targetsListFindingsByTargetAndIssueIssueIDFlag  = targetsListFindingsByTargetAndIssueFlags.String("issue-id", "REQUIRED", "Issue ID")

		targetsGetTargetMTTRFlags  = flag.NewFlagSet("get- target- mttr", flag.ExitOnError)
		targetsGetTargetMTTRIDFlag = targetsGetTargetMTTRFlags.String("id", "REQUIRED", "Target ID")

		targetsDeleteTargetTagFlags        = flag.NewFlagSet("delete- target- tag", flag.ExitOnError)
		targetsDeleteTargetTagTargetIDFlag = targetsDeleteTargetTagFlags.String("target-id", "REQUIRED", "Target ID")
		targetsDeleteTargetTagTagFlag      = targetsDeleteTargetTagFlags.String("tag", "REQUIRED", "Tag")
		targetsDeleteTargetTagAuthFlag     = targetsDeleteTargetTagFlags.String("auth", "REQUIRED", "")

		targetsDeleteTagFlags    = flag.NewFlagSet("delete- tag", flag.ExitOnError)
		targetsDeleteTagTagFlag  = targetsDeleteTagFlags.String("tag", "REQUIRED", "Tag")
		targetsDeleteTagAuthFlag = targetsDeleteTagFlags.String("auth", "REQUIRED", "")
	)
	eventsFlags.Usage = eventsUsage
	eventsListFindingEventsFlags.Usage = eventsListFindingEventsUsage

	labelsFlags.Usage = labelsUsage
	labelsListLabelsFlags.Usage = labelsListLabelsUsage

	statsFlags.Usage = statsUsage
	statsGetSizeStatsFlags.Usage = statsGetSizeStatsUsage
	statsGetOpenIssuesStatsFlags.Usage = statsGetOpenIssuesStatsUsage
	statsGetFixedIssuesStatsFlags.Usage = statsGetFixedIssuesStatsUsage
	statsGetIssuesStatsFlags.Usage = statsGetIssuesStatsUsage
	statsGetStatsMTTRFlags.Usage = statsGetStatsMTTRUsage
	statsGetStatsExposureFlags.Usage = statsGetStatsExposureUsage

	findingsFlags.Usage = findingsUsage
	findingsListFindingsFlags.Usage = findingsListFindingsUsage
	findingsGetFindingFlags.Usage = findingsGetFindingUsage
	findingsListEventsByFindingFlags.Usage = findingsListEventsByFindingUsage
	findingsGetFindingMTTRFlags.Usage = findingsGetFindingMTTRUsage
	findingsPatchFindingFlags.Usage = findingsPatchFindingUsage

	issuesFlags.Usage = issuesUsage
	issuesListIssuesFlags.Usage = issuesListIssuesUsage
	issuesIssuesSummaryFlags.Usage = issuesIssuesSummaryUsage
	issuesGetIssueFlags.Usage = issuesGetIssueUsage
	issuesListFindingsByIssueFlags.Usage = issuesListFindingsByIssueUsage
	issuesListFindingsByIssueAndTargetFlags.Usage = issuesListFindingsByIssueAndTargetUsage
	issuesGetIssueMTTRFlags.Usage = issuesGetIssueMTTRUsage

	sourcesFlags.Usage = sourcesUsage
	sourcesListSourcesFlags.Usage = sourcesListSourcesUsage
	sourcesGetSourceFlags.Usage = sourcesGetSourceUsage
	sourcesListFindingsBySourceFlags.Usage = sourcesListFindingsBySourceUsage
	sourcesGetSourceMTTRFlags.Usage = sourcesGetSourceMTTRUsage

	targetsFlags.Usage = targetsUsage
	targetsListTargetsFlags.Usage = targetsListTargetsUsage
	targetsTargetsSummaryFlags.Usage = targetsTargetsSummaryUsage
	targetsGetTargetFlags.Usage = targetsGetTargetUsage
	targetsCreateTargetFlags.Usage = targetsCreateTargetUsage
	targetsListFindingsByTargetFlags.Usage = targetsListFindingsByTargetUsage
	targetsListFindingsByTargetAndIssueFlags.Usage = targetsListFindingsByTargetAndIssueUsage
	targetsGetTargetMTTRFlags.Usage = targetsGetTargetMTTRUsage
	targetsDeleteTargetTagFlags.Usage = targetsDeleteTargetTagUsage
	targetsDeleteTagFlags.Usage = targetsDeleteTagUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "events":
			svcf = eventsFlags
		case "labels":
			svcf = labelsFlags
		case "stats":
			svcf = statsFlags
		case "findings":
			svcf = findingsFlags
		case "issues":
			svcf = issuesFlags
		case "sources":
			svcf = sourcesFlags
		case "targets":
			svcf = targetsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "events":
			switch epn {
			case "list- finding- events":
				epf = eventsListFindingEventsFlags

			}

		case "labels":
			switch epn {
			case "list- labels":
				epf = labelsListLabelsFlags

			}

		case "stats":
			switch epn {
			case "get- size- stats":
				epf = statsGetSizeStatsFlags

			case "get- open- issues- stats":
				epf = statsGetOpenIssuesStatsFlags

			case "get- fixed- issues- stats":
				epf = statsGetFixedIssuesStatsFlags

			case "get- issues- stats":
				epf = statsGetIssuesStatsFlags

			case "get- stats- mttr":
				epf = statsGetStatsMTTRFlags

			case "get- stats- exposure":
				epf = statsGetStatsExposureFlags

			}

		case "findings":
			switch epn {
			case "list- findings":
				epf = findingsListFindingsFlags

			case "get- finding":
				epf = findingsGetFindingFlags

			case "list- events- by- finding":
				epf = findingsListEventsByFindingFlags

			case "get- finding- mttr":
				epf = findingsGetFindingMTTRFlags

			case "patch- finding":
				epf = findingsPatchFindingFlags

			}

		case "issues":
			switch epn {
			case "list- issues":
				epf = issuesListIssuesFlags

			case "issues- summary":
				epf = issuesIssuesSummaryFlags

			case "get- issue":
				epf = issuesGetIssueFlags

			case "list- findings- by- issue":
				epf = issuesListFindingsByIssueFlags

			case "list- findings- by- issue- and- target":
				epf = issuesListFindingsByIssueAndTargetFlags

			case "get- issue- mttr":
				epf = issuesGetIssueMTTRFlags

			}

		case "sources":
			switch epn {
			case "list- sources":
				epf = sourcesListSourcesFlags

			case "get- source":
				epf = sourcesGetSourceFlags

			case "list- findings- by- source":
				epf = sourcesListFindingsBySourceFlags

			case "get- source- mttr":
				epf = sourcesGetSourceMTTRFlags

			}

		case "targets":
			switch epn {
			case "list- targets":
				epf = targetsListTargetsFlags

			case "targets- summary":
				epf = targetsTargetsSummaryFlags

			case "get- target":
				epf = targetsGetTargetFlags

			case "create- target":
				epf = targetsCreateTargetFlags

			case "list- findings- by- target":
				epf = targetsListFindingsByTargetFlags

			case "list- findings- by- target- and- issue":
				epf = targetsListFindingsByTargetAndIssueFlags

			case "get- target- mttr":
				epf = targetsGetTargetMTTRFlags

			case "delete- target- tag":
				epf = targetsDeleteTargetTagFlags

			case "delete- tag":
				epf = targetsDeleteTagFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "events":
			c := eventsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list- finding- events":
				endpoint = c.ListFindingEvents()
				data, err = eventsc.BuildListFindingEventsPayload(*eventsListFindingEventsMinScoreFlag, *eventsListFindingEventsMaxScoreFlag, *eventsListFindingEventsMinDateFlag, *eventsListFindingEventsMaxDateFlag, *eventsListFindingEventsPageFlag, *eventsListFindingEventsSizeFlag)
			}
		case "labels":
			c := labelsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list- labels":
				endpoint = c.ListLabels()
				data, err = labelsc.BuildListLabelsPayload(*labelsListLabelsTagFlag, *labelsListLabelsStatusFlag, *labelsListLabelsAtDateFlag, *labelsListLabelsMinDateFlag, *labelsListLabelsMaxDateFlag, *labelsListLabelsIdentifiersFlag)
			}
		case "stats":
			c := statsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get- size- stats":
				endpoint = c.GetSizeStats()
				data = nil
			case "get- open- issues- stats":
				endpoint = c.GetOpenIssuesStats()
				data, err = statsc.BuildGetOpenIssuesStatsPayload(*statsGetOpenIssuesStatsTagFlag, *statsGetOpenIssuesStatsMinDateFlag, *statsGetOpenIssuesStatsMaxDateFlag, *statsGetOpenIssuesStatsAtDateFlag, *statsGetOpenIssuesStatsIdentifiersFlag, *statsGetOpenIssuesStatsLabelsFlag)
			case "get- fixed- issues- stats":
				endpoint = c.GetFixedIssuesStats()
				data, err = statsc.BuildGetFixedIssuesStatsPayload(*statsGetFixedIssuesStatsTagFlag, *statsGetFixedIssuesStatsMinDateFlag, *statsGetFixedIssuesStatsMaxDateFlag, *statsGetFixedIssuesStatsAtDateFlag, *statsGetFixedIssuesStatsIdentifiersFlag, *statsGetFixedIssuesStatsLabelsFlag)
			case "get- issues- stats":
				endpoint = c.GetIssuesStats()
				data, err = statsc.BuildGetIssuesStatsPayload(*statsGetIssuesStatsMinDateFlag, *statsGetIssuesStatsMaxDateFlag, *statsGetIssuesStatsMinScoreFlag, *statsGetIssuesStatsMaxScoreFlag)
			case "get- stats- mttr":
				endpoint = c.GetStatsMTTR()
				data, err = statsc.BuildGetStatsMTTRPayload(*statsGetStatsMTTRTagFlag, *statsGetStatsMTTRMinDateFlag, *statsGetStatsMTTRMaxDateFlag)
			case "get- stats- exposure":
				endpoint = c.GetStatsExposure()
				data, err = statsc.BuildGetStatsExposurePayload(*statsGetStatsExposureTagFlag, *statsGetStatsExposureAtDateFlag, *statsGetStatsExposureMinScoreFlag, *statsGetStatsExposureMaxScoreFlag)
			}
		case "findings":
			c := findingsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list- findings":
				endpoint = c.ListFindings()
				data, err = findingsc.BuildListFindingsPayload(*findingsListFindingsTagFlag, *findingsListFindingsStatusFlag, *findingsListFindingsMinScoreFlag, *findingsListFindingsMaxScoreFlag, *findingsListFindingsAtDateFlag, *findingsListFindingsMinDateFlag, *findingsListFindingsMaxDateFlag, *findingsListFindingsSortByFlag, *findingsListFindingsPageFlag, *findingsListFindingsSizeFlag, *findingsListFindingsIdentifierFlag, *findingsListFindingsIdentifiermatchFlag, *findingsListFindingsIdentifiersFlag, *findingsListFindingsLabelsFlag)
			case "get- finding":
				endpoint = c.GetFinding()
				data, err = findingsc.BuildGetFindingPayload(*findingsGetFindingIDFlag)
			case "list- events- by- finding":
				endpoint = c.ListEventsByFinding()
				data, err = findingsc.BuildListEventsByFindingPayload(*findingsListEventsByFindingIDFlag, *findingsListEventsByFindingPageFlag, *findingsListEventsByFindingSizeFlag)
			case "get- finding- mttr":
				endpoint = c.GetFindingMTTR()
				data, err = findingsc.BuildGetFindingMTTRPayload(*findingsGetFindingMTTRIDFlag)
			case "patch- finding":
				endpoint = c.PatchFinding()
				data, err = findingsc.BuildPatchFindingPayload(*findingsPatchFindingBodyFlag, *findingsPatchFindingIDFlag, *findingsPatchFindingAuthorizationFlag)
			}
		case "issues":
			c := issuesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list- issues":
				endpoint = c.ListIssues()
				data, err = issuesc.BuildListIssuesPayload(*issuesListIssuesPageFlag, *issuesListIssuesSizeFlag)
			case "issues- summary":
				endpoint = c.IssuesSummary()
				data, err = issuesc.BuildIssuesSummaryPayload(*issuesIssuesSummaryTagFlag, *issuesIssuesSummaryStatusFlag, *issuesIssuesSummarySortByFlag, *issuesIssuesSummaryPageFlag, *issuesIssuesSummarySizeFlag, *issuesIssuesSummaryIdentifiersFlag, *issuesIssuesSummaryLabelsFlag)
			case "get- issue":
				endpoint = c.GetIssue()
				data, err = issuesc.BuildGetIssuePayload(*issuesGetIssueIDFlag)
			case "list- findings- by- issue":
				endpoint = c.ListFindingsByIssue()
				data, err = issuesc.BuildListFindingsByIssuePayload(*issuesListFindingsByIssueIDFlag, *issuesListFindingsByIssueStatusFlag, *issuesListFindingsByIssueSortByFlag, *issuesListFindingsByIssuePageFlag, *issuesListFindingsByIssueSizeFlag, *issuesListFindingsByIssueIdentifiersFlag, *issuesListFindingsByIssueLabelsFlag)
			case "list- findings- by- issue- and- target":
				endpoint = c.ListFindingsByIssueAndTarget()
				data, err = issuesc.BuildListFindingsByIssueAndTargetPayload(*issuesListFindingsByIssueAndTargetIssueIDFlag, *issuesListFindingsByIssueAndTargetTargetIDFlag)
			case "get- issue- mttr":
				endpoint = c.GetIssueMTTR()
				data, err = issuesc.BuildGetIssueMTTRPayload(*issuesGetIssueMTTRIDFlag)
			}
		case "sources":
			c := sourcesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list- sources":
				endpoint = c.ListSources()
				data, err = sourcesc.BuildListSourcesPayload(*sourcesListSourcesPageFlag, *sourcesListSourcesSizeFlag)
			case "get- source":
				endpoint = c.GetSource()
				data, err = sourcesc.BuildGetSourcePayload(*sourcesGetSourceIDFlag)
			case "list- findings- by- source":
				endpoint = c.ListFindingsBySource()
				data, err = sourcesc.BuildListFindingsBySourcePayload(*sourcesListFindingsBySourceIDFlag, *sourcesListFindingsBySourceStatusFlag, *sourcesListFindingsBySourceSortByFlag, *sourcesListFindingsBySourcePageFlag, *sourcesListFindingsBySourceSizeFlag)
			case "get- source- mttr":
				endpoint = c.GetSourceMTTR()
				data, err = sourcesc.BuildGetSourceMTTRPayload(*sourcesGetSourceMTTRIDFlag)
			}
		case "targets":
			c := targetsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list- targets":
				endpoint = c.ListTargets()
				data, err = targetsc.BuildListTargetsPayload(*targetsListTargetsTagFlag, *targetsListTargetsIdentifierFlag, *targetsListTargetsPageFlag, *targetsListTargetsSizeFlag, *targetsListTargetsIdentifiermatchFlag, *targetsListTargetsIdentifiersFlag)
			case "targets- summary":
				endpoint = c.TargetsSummary()
				data, err = targetsc.BuildTargetsSummaryPayload(*targetsTargetsSummaryTagFlag, *targetsTargetsSummaryStatusFlag, *targetsTargetsSummarySortByFlag, *targetsTargetsSummaryPageFlag, *targetsTargetsSummarySizeFlag, *targetsTargetsSummaryIdentifiersFlag, *targetsTargetsSummaryLabelsFlag)
			case "get- target":
				endpoint = c.GetTarget()
				data, err = targetsc.BuildGetTargetPayload(*targetsGetTargetIDFlag)
			case "create- target":
				endpoint = c.CreateTarget()
				data, err = targetsc.BuildCreateTargetPayload(*targetsCreateTargetBodyFlag)
			case "list- findings- by- target":
				endpoint = c.ListFindingsByTarget()
				data, err = targetsc.BuildListFindingsByTargetPayload(*targetsListFindingsByTargetIDFlag, *targetsListFindingsByTargetStatusFlag, *targetsListFindingsByTargetSortByFlag, *targetsListFindingsByTargetPageFlag, *targetsListFindingsByTargetSizeFlag, *targetsListFindingsByTargetLabelsFlag)
			case "list- findings- by- target- and- issue":
				endpoint = c.ListFindingsByTargetAndIssue()
				data, err = targetsc.BuildListFindingsByTargetAndIssuePayload(*targetsListFindingsByTargetAndIssueTargetIDFlag, *targetsListFindingsByTargetAndIssueIssueIDFlag)
			case "get- target- mttr":
				endpoint = c.GetTargetMTTR()
				data, err = targetsc.BuildGetTargetMTTRPayload(*targetsGetTargetMTTRIDFlag)
			case "delete- target- tag":
				endpoint = c.DeleteTargetTag()
				data, err = targetsc.BuildDeleteTargetTagPayload(*targetsDeleteTargetTagTargetIDFlag, *targetsDeleteTargetTagTagFlag, *targetsDeleteTargetTagAuthFlag)
			case "delete- tag":
				endpoint = c.DeleteTag()
				data, err = targetsc.BuildDeleteTagPayload(*targetsDeleteTagTagFlag, *targetsDeleteTagAuthFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// eventsUsage displays the usage of the events command and its subcommands.
func eventsUsage() {
	fmt.Fprintf(os.Stderr, `Finding events endpoint.
Usage:
    %s [globalflags] events COMMAND [flags]

COMMAND:
    list- finding- events: ListFindingEvents implements List finding events.

Additional help:
    %s events COMMAND --help
`, os.Args[0], os.Args[0])
}
func eventsListFindingEventsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] events list- finding- events -min-score INT -max-score INT -min-date STRING -max-date STRING -page INT -size INT

ListFindingEvents implements List finding events.
    -min-score INT: 
    -max-score INT: 
    -min-date STRING: 
    -max-date STRING: 
    -page INT: 
    -size INT: 

Example:
    `+os.Args[0]+` events list- finding- events --min-score 6797912008452328905 --max-score 2934361164996192541 --min-date "Incidunt ipsa ut quia quod." --max-date "Aliquid eos voluptatem." --page 7346016241856859671 --size 7613360009095655762
`, os.Args[0])
}

// labelsUsage displays the usage of the labels command and its subcommands.
func labelsUsage() {
	fmt.Fprintf(os.Stderr, `Labels endpoint.
Usage:
    %s [globalflags] labels COMMAND [flags]

COMMAND:
    list- labels: ListLabels implements List labels.

Additional help:
    %s labels COMMAND --help
`, os.Args[0], os.Args[0])
}
func labelsListLabelsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] labels list- labels -tag STRING -status STRING -at-date STRING -min-date STRING -max-date STRING -identifiers STRING

ListLabels implements List labels.
    -tag STRING: 
    -status STRING: 
    -at-date STRING: 
    -min-date STRING: 
    -max-date STRING: 
    -identifiers STRING: 

Example:
    `+os.Args[0]+` labels list- labels --tag "Non dolorem natus veniam." --status "Laudantium minus cupiditate blanditiis quia exercitationem sint." --at-date "Expedita ullam ut quis ut." --min-date "Voluptates laboriosam maiores maxime." --max-date "Consequatur dolore est qui." --identifiers "Optio doloremque."
`, os.Args[0])
}

// statsUsage displays the usage of the stats command and its subcommands.
func statsUsage() {
	fmt.Fprintf(os.Stderr, `Stats endpoint.
Usage:
    %s [globalflags] stats COMMAND [flags]

COMMAND:
    get- size- stats: GetSizeStats implements Get size stats.
    get- open- issues- stats: This method gets statistics for open findings by using different filters.
	When querying for a specific time range, it returns every finding that has been found in that time, regardless if that finding has also been fixed in that span of time.
    get- fixed- issues- stats: This method gets statistics for fixed findings by using different filters.
	When querying for a specific time range, it returns every finding that has been fixed in that time and it's fixed at the end of the time range specified, so a finding that is fixed and then reopened in that range of time will not be counted.
    get- issues- stats: GetIssuesStats implements Get issues stats.
    get- stats- mttr: GetStatsMTTR implements Get stats MTTR.
    get- stats- exposure: GetStatsExposure implements Get stats exposure.

Additional help:
    %s stats COMMAND --help
`, os.Args[0], os.Args[0])
}
func statsGetSizeStatsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] stats get- size- stats

GetSizeStats implements Get size stats.

Example:
    `+os.Args[0]+` stats get- size- stats
`, os.Args[0])
}

func statsGetOpenIssuesStatsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] stats get- open- issues- stats -tag STRING -min-date STRING -max-date STRING -at-date STRING -identifiers STRING -labels STRING

This method gets statistics for open findings by using different filters.
	When querying for a specific time range, it returns every finding that has been found in that time, regardless if that finding has also been fixed in that span of time.
    -tag STRING: 
    -min-date STRING: 
    -max-date STRING: 
    -at-date STRING: 
    -identifiers STRING: 
    -labels STRING: 

Example:
    `+os.Args[0]+` stats get- open- issues- stats --tag "Fugiat sed aliquid consequatur sed eum." --min-date "Deleniti est suscipit." --max-date "Voluptate id delectus dolores quidem iste dolor." --at-date "Eligendi accusantium inventore." --identifiers "Eius qui nemo iure quos." --labels "Ullam laborum facilis voluptas."
`, os.Args[0])
}

func statsGetFixedIssuesStatsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] stats get- fixed- issues- stats -tag STRING -min-date STRING -max-date STRING -at-date STRING -identifiers STRING -labels STRING

This method gets statistics for fixed findings by using different filters.
	When querying for a specific time range, it returns every finding that has been fixed in that time and it's fixed at the end of the time range specified, so a finding that is fixed and then reopened in that range of time will not be counted.
    -tag STRING: 
    -min-date STRING: 
    -max-date STRING: 
    -at-date STRING: 
    -identifiers STRING: 
    -labels STRING: 

Example:
    `+os.Args[0]+` stats get- fixed- issues- stats --tag "Earum quia illo." --min-date "Animi nulla quaerat perferendis non." --max-date "Dicta voluptatum adipisci voluptas." --at-date "Illum minus nostrum numquam." --identifiers "Blanditiis ducimus qui voluptatem nemo." --labels "Harum modi."
`, os.Args[0])
}

func statsGetIssuesStatsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] stats get- issues- stats -min-date STRING -max-date STRING -min-score INT -max-score INT

GetIssuesStats implements Get issues stats.
    -min-date STRING: 
    -max-date STRING: 
    -min-score INT: 
    -max-score INT: 

Example:
    `+os.Args[0]+` stats get- issues- stats --min-date "Molestiae et consequatur totam et." --max-date "Cumque deleniti quo laborum." --min-score 2675288203878151451 --max-score 223400334070180172
`, os.Args[0])
}

func statsGetStatsMTTRUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] stats get- stats- mttr -tag STRING -min-date STRING -max-date STRING

GetStatsMTTR implements Get stats MTTR.
    -tag STRING: 
    -min-date STRING: 
    -max-date STRING: 

Example:
    `+os.Args[0]+` stats get- stats- mttr --tag "Odit quis cum consequatur illo saepe." --min-date "Sequi unde veniam reprehenderit." --max-date "Ad corporis."
`, os.Args[0])
}

func statsGetStatsExposureUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] stats get- stats- exposure -tag STRING -at-date STRING -min-score INT -max-score INT

GetStatsExposure implements Get stats exposure.
    -tag STRING: 
    -at-date STRING: 
    -min-score INT: 
    -max-score INT: 

Example:
    `+os.Args[0]+` stats get- stats- exposure --tag "Animi consectetur soluta sit error possimus." --at-date "Omnis quia laborum." --min-score 8619551339247722728 --max-score 7830955280873127056
`, os.Args[0])
}

// findingsUsage displays the usage of the findings command and its subcommands.
func findingsUsage() {
	fmt.Fprintf(os.Stderr, `Findings endpoint.
Usage:
    %s [globalflags] findings COMMAND [flags]

COMMAND:
    list- findings: This method allows to list findings by using different filters.
	When querying for open findings in a specific time range, it returns every finding that has been found in that time, regardless if that finding has also been fixed in that span of time.
	When querying for fixed findings in a specific time range, it returns every finding that has been fixed in that time and it's fixed at the end of that time range, so a finding that is fixed and then reopened in that range of time will not be returned.
    get- finding: GetFinding implements Get finding.
    list- events- by- finding: ListEventsByFinding implements List events by finding.
    get- finding- mttr: GetFindingMTTR implements Get finding MTTR.
    patch- finding: PatchFinding implements Patch finding.

Additional help:
    %s findings COMMAND --help
`, os.Args[0], os.Args[0])
}
func findingsListFindingsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] findings list- findings -tag STRING -status STRING -min-score INT -max-score INT -at-date STRING -min-date STRING -max-date STRING -sort-by STRING -page INT -size INT -identifier STRING -identifiermatch BOOL -identifiers STRING -labels STRING

This method allows to list findings by using different filters.
	When querying for open findings in a specific time range, it returns every finding that has been found in that time, regardless if that finding has also been fixed in that span of time.
	When querying for fixed findings in a specific time range, it returns every finding that has been fixed in that time and it's fixed at the end of that time range, so a finding that is fixed and then reopened in that range of time will not be returned.
    -tag STRING: 
    -status STRING: 
    -min-score INT: 
    -max-score INT: 
    -at-date STRING: 
    -min-date STRING: 
    -max-date STRING: 
    -sort-by STRING: 
    -page INT: 
    -size INT: 
    -identifier STRING: 
    -identifiermatch BOOL: 
    -identifiers STRING: 
    -labels STRING: 

Example:
    `+os.Args[0]+` findings list- findings --tag "Qui dolores alias iusto harum dolores nulla." --status "Saepe et voluptatem corrupti quisquam vitae." --min-score 8086326669012016674 --max-score 8606047200335516518 --at-date "Cumque sint dolorem." --min-date "Unde natus aut facilis vitae eum explicabo." --max-date "Sapiente explicabo tenetur et." --sort-by "Perspiciatis qui ex ut sunt nemo." --page 3622791337925535008 --size 1059598710614675546 --identifier "Sint voluptatem sed enim veniam." --identifiermatch true --identifiers "Qui ratione nobis." --labels "Nobis sapiente qui mollitia repellendus."
`, os.Args[0])
}

func findingsGetFindingUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] findings get- finding -id STRING

GetFinding implements Get finding.
    -id STRING: Finding ID

Example:
    `+os.Args[0]+` findings get- finding --id "Et exercitationem rerum deleniti non quia minima."
`, os.Args[0])
}

func findingsListEventsByFindingUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] findings list- events- by- finding -id STRING -page INT -size INT

ListEventsByFinding implements List events by finding.
    -id STRING: Finding ID
    -page INT: 
    -size INT: 

Example:
    `+os.Args[0]+` findings list- events- by- finding --id "Error perspiciatis laborum accusamus qui et minus." --page 4422628158762415501 --size 7807467125616110074
`, os.Args[0])
}

func findingsGetFindingMTTRUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] findings get- finding- mttr -id STRING

GetFindingMTTR implements Get finding MTTR.
    -id STRING: Finding ID

Example:
    `+os.Args[0]+` findings get- finding- mttr --id "Et excepturi aliquid ducimus."
`, os.Args[0])
}

func findingsPatchFindingUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] findings patch- finding -body JSON -id STRING -authorization STRING

PatchFinding implements Patch finding.
    -body JSON: 
    -id STRING: Finding ID
    -authorization STRING: 

Example:
    `+os.Args[0]+` findings patch- finding --body '{
      "status": "OPEN"
   }' --id "Blanditiis quidem ipsam corporis atque." --authorization "Debitis quisquam eius quos dolor."
`, os.Args[0])
}

// issuesUsage displays the usage of the issues command and its subcommands.
func issuesUsage() {
	fmt.Fprintf(os.Stderr, `Issues endpoint.
Usage:
    %s [globalflags] issues COMMAND [flags]

COMMAND:
    list- issues: ListIssues implements List issues.
    issues- summary: IssuesSummary implements Issues summary.
    get- issue: GetIssue implements Get issue.
    list- findings- by- issue: ListFindingsByIssue implements List findings by issue.
    list- findings- by- issue- and- target: ListFindingsByIssueAndTarget implements List findings by issue and target.
    get- issue- mttr: GetIssueMTTR implements Get issue MTTR.

Additional help:
    %s issues COMMAND --help
`, os.Args[0], os.Args[0])
}
func issuesListIssuesUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] issues list- issues -page INT -size INT

ListIssues implements List issues.
    -page INT: 
    -size INT: 

Example:
    `+os.Args[0]+` issues list- issues --page 5419968525105284682 --size 1265661371217974861
`, os.Args[0])
}

func issuesIssuesSummaryUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] issues issues- summary -tag STRING -status STRING -sort-by STRING -page INT -size INT -identifiers STRING -labels STRING

IssuesSummary implements Issues summary.
    -tag STRING: 
    -status STRING: 
    -sort-by STRING: 
    -page INT: 
    -size INT: 
    -identifiers STRING: 
    -labels STRING: 

Example:
    `+os.Args[0]+` issues issues- summary --tag "Illum praesentium beatae libero repellendus illum." --status "Ad nobis repellendus ipsa dolores velit labore." --sort-by "Omnis ipsam quae voluptatem." --page 6680912362927638877 --size 8780299085855296257 --identifiers "Laborum reprehenderit est veritatis rerum." --labels "Enim sapiente itaque fuga necessitatibus voluptates consequatur."
`, os.Args[0])
}

func issuesGetIssueUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] issues get- issue -id STRING

GetIssue implements Get issue.
    -id STRING: Issue ID

Example:
    `+os.Args[0]+` issues get- issue --id "Cupiditate voluptatem qui eum qui assumenda."
`, os.Args[0])
}

func issuesListFindingsByIssueUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] issues list- findings- by- issue -id STRING -status STRING -sort-by STRING -page INT -size INT -identifiers STRING -labels STRING

ListFindingsByIssue implements List findings by issue.
    -id STRING: Issue ID
    -status STRING: 
    -sort-by STRING: 
    -page INT: 
    -size INT: 
    -identifiers STRING: 
    -labels STRING: 

Example:
    `+os.Args[0]+` issues list- findings- by- issue --id "Cumque occaecati labore quisquam repellendus." --status "Deserunt et odit omnis eos suscipit sapiente." --sort-by "Nihil hic labore sed eos similique amet." --page 229559405855443673 --size 1488325984461779477 --identifiers "Incidunt eveniet in." --labels "Modi dolorum explicabo non temporibus alias."
`, os.Args[0])
}

func issuesListFindingsByIssueAndTargetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] issues list- findings- by- issue- and- target -issue-id STRING -target-id STRING

ListFindingsByIssueAndTarget implements List findings by issue and target.
    -issue-id STRING: Issue ID
    -target-id STRING: Target ID

Example:
    `+os.Args[0]+` issues list- findings- by- issue- and- target --issue-id "Omnis deserunt." --target-id "Et in."
`, os.Args[0])
}

func issuesGetIssueMTTRUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] issues get- issue- mttr -id STRING

GetIssueMTTR implements Get issue MTTR.
    -id STRING: Issue ID

Example:
    `+os.Args[0]+` issues get- issue- mttr --id "Sequi sed ea."
`, os.Args[0])
}

// sourcesUsage displays the usage of the sources command and its subcommands.
func sourcesUsage() {
	fmt.Fprintf(os.Stderr, `Sources endpoint.
Usage:
    %s [globalflags] sources COMMAND [flags]

COMMAND:
    list- sources: ListSources implements List sources.
    get- source: GetSource implements Get source.
    list- findings- by- source: ListFindingsBySource implements List findings by source.
    get- source- mttr: GetSourceMTTR implements Get source MTTR.

Additional help:
    %s sources COMMAND --help
`, os.Args[0], os.Args[0])
}
func sourcesListSourcesUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] sources list- sources -page INT -size INT

ListSources implements List sources.
    -page INT: 
    -size INT: 

Example:
    `+os.Args[0]+` sources list- sources --page 6761982973477914836 --size 6840492927435796690
`, os.Args[0])
}

func sourcesGetSourceUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] sources get- source -id STRING

GetSource implements Get source.
    -id STRING: Source ID

Example:
    `+os.Args[0]+` sources get- source --id "Eum consequatur odio voluptas delectus."
`, os.Args[0])
}

func sourcesListFindingsBySourceUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] sources list- findings- by- source -id STRING -status STRING -sort-by STRING -page INT -size INT

ListFindingsBySource implements List findings by source.
    -id STRING: Source ID
    -status STRING: 
    -sort-by STRING: 
    -page INT: 
    -size INT: 

Example:
    `+os.Args[0]+` sources list- findings- by- source --id "Voluptas earum laboriosam." --status "Iste facilis aut qui sequi voluptatem." --sort-by "Omnis quisquam." --page 3239417118325774545 --size 1847136080760459638
`, os.Args[0])
}

func sourcesGetSourceMTTRUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] sources get- source- mttr -id STRING

GetSourceMTTR implements Get source MTTR.
    -id STRING: Source ID

Example:
    `+os.Args[0]+` sources get- source- mttr --id "Et dolorem maiores consequatur distinctio rem."
`, os.Args[0])
}

// targetsUsage displays the usage of the targets command and its subcommands.
func targetsUsage() {
	fmt.Fprintf(os.Stderr, `Targets endpoint.
Usage:
    %s [globalflags] targets COMMAND [flags]

COMMAND:
    list- targets: ListTargets implements List targets.
    targets- summary: TargetsSummary implements Targets summary.
    get- target: GetTarget implements Get target.
    create- target: CreateTarget implements Create target.
    list- findings- by- target: ListFindingsByTarget implements List findings by target.
    list- findings- by- target- and- issue: ListFindingsByTargetAndIssue implements List findings by target and issue.
    get- target- mttr: GetTargetMTTR implements Get target MTTR.
    delete- target- tag: DeleteTargetTag implements Delete target tag.
    delete- tag: DeleteTag implements Delete tag.

Additional help:
    %s targets COMMAND --help
`, os.Args[0], os.Args[0])
}
func targetsListTargetsUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] targets list- targets -tag STRING -identifier STRING -page INT -size INT -identifiermatch BOOL -identifiers STRING

ListTargets implements List targets.
    -tag STRING: 
    -identifier STRING: 
    -page INT: 
    -size INT: 
    -identifiermatch BOOL: 
    -identifiers STRING: 

Example:
    `+os.Args[0]+` targets list- targets --tag "Dignissimos dolore culpa beatae." --identifier "Non assumenda eligendi saepe ratione facilis quia." --page 8918550167254582053 --size 237421497365339523 --identifiermatch false --identifiers "Consectetur repellendus eos repudiandae quos quod."
`, os.Args[0])
}

func targetsTargetsSummaryUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] targets targets- summary -tag STRING -status STRING -sort-by STRING -page INT -size INT -identifiers STRING -labels STRING

TargetsSummary implements Targets summary.
    -tag STRING: 
    -status STRING: 
    -sort-by STRING: 
    -page INT: 
    -size INT: 
    -identifiers STRING: 
    -labels STRING: 

Example:
    `+os.Args[0]+` targets targets- summary --tag "Hic ex ullam." --status "Non rem aut iusto aut id." --sort-by "Assumenda quidem magni molestiae porro." --page 5639259110863692 --size 8954098057144733957 --identifiers "Eos ipsa tempore dolorem at voluptatem aut." --labels "Voluptas aut neque repellendus quia quo qui."
`, os.Args[0])
}

func targetsGetTargetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] targets get- target -id STRING

GetTarget implements Get target.
    -id STRING: Target ID

Example:
    `+os.Args[0]+` targets get- target --id "Cupiditate magnam."
`, os.Args[0])
}

func targetsCreateTargetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] targets create- target -body JSON

CreateTarget implements Create target.
    -body JSON: 

Example:
    `+os.Args[0]+` targets create- target --body '{
      "identifier": "www.example.com",
      "tags": [
         "sdrn:adevinta:team:security"
      ]
   }'
`, os.Args[0])
}

func targetsListFindingsByTargetUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] targets list- findings- by- target -id STRING -status STRING -sort-by STRING -page INT -size INT -labels STRING

ListFindingsByTarget implements List findings by target.
    -id STRING: Target ID
    -status STRING: 
    -sort-by STRING: 
    -page INT: 
    -size INT: 
    -labels STRING: 

Example:
    `+os.Args[0]+` targets list- findings- by- target --id "Culpa non nam possimus harum est eos." --status "Odit in." --sort-by "Dignissimos sed amet voluptatem." --page 73438433183727040 --size 2345730100935598168 --labels "Ea ut reiciendis."
`, os.Args[0])
}

func targetsListFindingsByTargetAndIssueUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] targets list- findings- by- target- and- issue -target-id STRING -issue-id STRING

ListFindingsByTargetAndIssue implements List findings by target and issue.
    -target-id STRING: Target ID
    -issue-id STRING: Issue ID

Example:
    `+os.Args[0]+` targets list- findings- by- target- and- issue --target-id "Qui molestias aut aliquid eum voluptatem dicta." --issue-id "Suscipit laborum."
`, os.Args[0])
}

func targetsGetTargetMTTRUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] targets get- target- mttr -id STRING

GetTargetMTTR implements Get target MTTR.
    -id STRING: Target ID

Example:
    `+os.Args[0]+` targets get- target- mttr --id "Et quaerat magni saepe."
`, os.Args[0])
}

func targetsDeleteTargetTagUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] targets delete- target- tag -target-id STRING -tag STRING -auth STRING

DeleteTargetTag implements Delete target tag.
    -target-id STRING: Target ID
    -tag STRING: Tag
    -auth STRING: 

Example:
    `+os.Args[0]+` targets delete- target- tag --target-id "Blanditiis fuga dolorum ullam quos qui." --tag "Dolorem molestias et facilis accusamus esse aut." --auth "TAG tag=mytag"
`, os.Args[0])
}

func targetsDeleteTagUsage() {
	fmt.Fprintf(os.Stderr, `%s [flags] targets delete- tag -tag STRING -auth STRING

DeleteTag implements Delete tag.
    -tag STRING: Tag
    -auth STRING: 

Example:
    `+os.Args[0]+` targets delete- tag --tag "Officiis culpa magnam ea eum molestiae." --auth "TAG tag=mytag"
`, os.Args[0])
}
