// Code generated by goa v3.5.2, DO NOT EDIT.
//
// vulnerability-db-api HTTP client CLI support package
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	eventsc "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/http/events/client"
	findingsc "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/http/findings/client"
	issuesc "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/http/issues/client"
	labelsc "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/http/labels/client"
	sourcesc "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/http/sources/client"
	statsc "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/http/stats/client"
	targetsc "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/http/targets/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `events list- finding- events
labels list- labels
stats (get- size- stats|get- open- issues- stats|get- fixed- issues- stats|get- stats- assets- per- severity|get- issues- stats|get- stats- mttr|get- stats- exposure|get- stats- current- exposure)
findings (list- findings|get- finding|list- events- by- finding|get- finding- mttr|patch- finding)
issues (list- issues|issues- summary|get- issue|list- findings- by- issue|get- finding- by- issue-,- target- and- affected- resource|get- issue- mttr)
sources (list- sources|get- source|list- findings- by- source|get- source- mttr)
targets (list- targets|targets- summary|get- target|create- target|list- findings- by- target|get- finding- by- target-,- issue- and- affected- resource|get- target- mttr|delete- target- team|delete- team|delete- target- tag|delete- tag)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` events list- finding- events --min-score 5417766179193376107 --max-score 5663207668600435835 --min-date "Tempore necessitatibus et eum inventore qui dolores." --max-date "Iusto harum." --page 9027869851862118397 --size 9141472216866784964` + "\n" +
		os.Args[0] + ` labels list- labels --team "Et voluptatem." --tag "Quisquam vitae totam vel sit cumque." --status "Dolorem omnis unde natus." --at-date "Facilis vitae eum explicabo." --min-date "Sapiente explicabo tenetur et." --max-date "Perspiciatis qui ex ut sunt nemo." --identifiers "Commodi praesentium sint voluptatem sed."` + "\n" +
		os.Args[0] + ` stats get- size- stats` + "\n" +
		os.Args[0] + ` findings list- findings --team "Qui qui alias." --tag "Reprehenderit ea fugit dolore." --status "Cupiditate magnam." --min-score 9176748733626154358 --max-score 5694357860577872464 --at-date "Non culpa non nam possimus harum." --min-date "Eos ipsam odit in quidem dignissimos." --max-date "Amet voluptatem unde sit voluptas ea." --sort-by "Reiciendis alias et blanditiis enim." --page 603513144413787829 --size 5070900335168518831 --identifier "Explicabo tempora alias distinctio." --identifiermatch false --identifiers "Qui molestias aut aliquid eum voluptatem dicta." --labels "Suscipit laborum."` + "\n" +
		os.Args[0] + ` issues list- issues --page 5799931546838610515 --size 1192589839946177443` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		eventsFlags = flag.NewFlagSet("events", flag.ContinueOnError)

		eventsListFindingEventsFlags        = flag.NewFlagSet("list- finding- events", flag.ExitOnError)
		eventsListFindingEventsMinScoreFlag = eventsListFindingEventsFlags.String("min-score", "", "")
		eventsListFindingEventsMaxScoreFlag = eventsListFindingEventsFlags.String("max-score", "", "")
		eventsListFindingEventsMinDateFlag  = eventsListFindingEventsFlags.String("min-date", "", "")
		eventsListFindingEventsMaxDateFlag  = eventsListFindingEventsFlags.String("max-date", "", "")
		eventsListFindingEventsPageFlag     = eventsListFindingEventsFlags.String("page", "", "")
		eventsListFindingEventsSizeFlag     = eventsListFindingEventsFlags.String("size", "", "")

		labelsFlags = flag.NewFlagSet("labels", flag.ContinueOnError)

		labelsListLabelsFlags           = flag.NewFlagSet("list- labels", flag.ExitOnError)
		labelsListLabelsTeamFlag        = labelsListLabelsFlags.String("team", "", "")
		labelsListLabelsTagFlag         = labelsListLabelsFlags.String("tag", "", "")
		labelsListLabelsStatusFlag      = labelsListLabelsFlags.String("status", "", "")
		labelsListLabelsAtDateFlag      = labelsListLabelsFlags.String("at-date", "", "")
		labelsListLabelsMinDateFlag     = labelsListLabelsFlags.String("min-date", "", "")
		labelsListLabelsMaxDateFlag     = labelsListLabelsFlags.String("max-date", "", "")
		labelsListLabelsIdentifiersFlag = labelsListLabelsFlags.String("identifiers", "", "")

		statsFlags = flag.NewFlagSet("stats", flag.ContinueOnError)

		statsGetSizeStatsFlags = flag.NewFlagSet("get- size- stats", flag.ExitOnError)

		statsGetOpenIssuesStatsFlags           = flag.NewFlagSet("get- open- issues- stats", flag.ExitOnError)
		statsGetOpenIssuesStatsTeamFlag        = statsGetOpenIssuesStatsFlags.String("team", "", "")
		statsGetOpenIssuesStatsTeamsFlag       = statsGetOpenIssuesStatsFlags.String("teams", "", "")
		statsGetOpenIssuesStatsTagFlag         = statsGetOpenIssuesStatsFlags.String("tag", "", "")
		statsGetOpenIssuesStatsTagsFlag        = statsGetOpenIssuesStatsFlags.String("tags", "", "")
		statsGetOpenIssuesStatsMinDateFlag     = statsGetOpenIssuesStatsFlags.String("min-date", "", "")
		statsGetOpenIssuesStatsMaxDateFlag     = statsGetOpenIssuesStatsFlags.String("max-date", "", "")
		statsGetOpenIssuesStatsAtDateFlag      = statsGetOpenIssuesStatsFlags.String("at-date", "", "")
		statsGetOpenIssuesStatsIdentifiersFlag = statsGetOpenIssuesStatsFlags.String("identifiers", "", "")
		statsGetOpenIssuesStatsLabelsFlag      = statsGetOpenIssuesStatsFlags.String("labels", "", "")

		statsGetFixedIssuesStatsFlags           = flag.NewFlagSet("get- fixed- issues- stats", flag.ExitOnError)
		statsGetFixedIssuesStatsTeamFlag        = statsGetFixedIssuesStatsFlags.String("team", "", "")
		statsGetFixedIssuesStatsTeamsFlag       = statsGetFixedIssuesStatsFlags.String("teams", "", "")
		statsGetFixedIssuesStatsTagFlag         = statsGetFixedIssuesStatsFlags.String("tag", "", "")
		statsGetFixedIssuesStatsTagsFlag        = statsGetFixedIssuesStatsFlags.String("tags", "", "")
		statsGetFixedIssuesStatsMinDateFlag     = statsGetFixedIssuesStatsFlags.String("min-date", "", "")
		statsGetFixedIssuesStatsMaxDateFlag     = statsGetFixedIssuesStatsFlags.String("max-date", "", "")
		statsGetFixedIssuesStatsAtDateFlag      = statsGetFixedIssuesStatsFlags.String("at-date", "", "")
		statsGetFixedIssuesStatsIdentifiersFlag = statsGetFixedIssuesStatsFlags.String("identifiers", "", "")
		statsGetFixedIssuesStatsLabelsFlag      = statsGetFixedIssuesStatsFlags.String("labels", "", "")

		statsGetStatsAssetsPerSeverityFlags           = flag.NewFlagSet("get- stats- assets- per- severity", flag.ExitOnError)
		statsGetStatsAssetsPerSeverityTeamFlag        = statsGetStatsAssetsPerSeverityFlags.String("team", "", "")
		statsGetStatsAssetsPerSeverityTeamsFlag       = statsGetStatsAssetsPerSeverityFlags.String("teams", "", "")
		statsGetStatsAssetsPerSeverityTagFlag         = statsGetStatsAssetsPerSeverityFlags.String("tag", "", "")
		statsGetStatsAssetsPerSeverityTagsFlag        = statsGetStatsAssetsPerSeverityFlags.String("tags", "", "")
		statsGetStatsAssetsPerSeverityIdentifiersFlag = statsGetStatsAssetsPerSeverityFlags.String("identifiers", "", "")
		statsGetStatsAssetsPerSeverityLabelsFlag      = statsGetStatsAssetsPerSeverityFlags.String("labels", "", "")

		statsGetIssuesStatsFlags        = flag.NewFlagSet("get- issues- stats", flag.ExitOnError)
		statsGetIssuesStatsMinDateFlag  = statsGetIssuesStatsFlags.String("min-date", "", "")
		statsGetIssuesStatsMaxDateFlag  = statsGetIssuesStatsFlags.String("max-date", "", "")
		statsGetIssuesStatsMinScoreFlag = statsGetIssuesStatsFlags.String("min-score", "", "")
		statsGetIssuesStatsMaxScoreFlag = statsGetIssuesStatsFlags.String("max-score", "", "")

		statsGetStatsMTTRFlags       = flag.NewFlagSet("get- stats- mttr", flag.ExitOnError)
		statsGetStatsMTTRTeamFlag    = statsGetStatsMTTRFlags.String("team", "", "")
		statsGetStatsMTTRTeamsFlag   = statsGetStatsMTTRFlags.String("teams", "", "")
		statsGetStatsMTTRTagFlag     = statsGetStatsMTTRFlags.String("tag", "", "")
		statsGetStatsMTTRTagsFlag    = statsGetStatsMTTRFlags.String("tags", "", "")
		statsGetStatsMTTRMinDateFlag = statsGetStatsMTTRFlags.String("min-date", "", "")
		statsGetStatsMTTRMaxDateFlag = statsGetStatsMTTRFlags.String("max-date", "", "")
		statsGetStatsMTTRLabelsFlag  = statsGetStatsMTTRFlags.String("labels", "", "")

		statsGetStatsExposureFlags        = flag.NewFlagSet("get- stats- exposure", flag.ExitOnError)
		statsGetStatsExposureTeamFlag     = statsGetStatsExposureFlags.String("team", "", "")
		statsGetStatsExposureTeamsFlag    = statsGetStatsExposureFlags.String("teams", "", "")
		statsGetStatsExposureTagFlag      = statsGetStatsExposureFlags.String("tag", "", "")
		statsGetStatsExposureTagsFlag     = statsGetStatsExposureFlags.String("tags", "", "")
		statsGetStatsExposureAtDateFlag   = statsGetStatsExposureFlags.String("at-date", "", "")
		statsGetStatsExposureMinScoreFlag = statsGetStatsExposureFlags.String("min-score", "", "")
		statsGetStatsExposureMaxScoreFlag = statsGetStatsExposureFlags.String("max-score", "", "")

		statsGetStatsCurrentExposureFlags        = flag.NewFlagSet("get- stats- current- exposure", flag.ExitOnError)
		statsGetStatsCurrentExposureTeamFlag     = statsGetStatsCurrentExposureFlags.String("team", "", "")
		statsGetStatsCurrentExposureTeamsFlag    = statsGetStatsCurrentExposureFlags.String("teams", "", "")
		statsGetStatsCurrentExposureTagFlag      = statsGetStatsCurrentExposureFlags.String("tag", "", "")
		statsGetStatsCurrentExposureTagsFlag     = statsGetStatsCurrentExposureFlags.String("tags", "", "")
		statsGetStatsCurrentExposureMinScoreFlag = statsGetStatsCurrentExposureFlags.String("min-score", "", "")
		statsGetStatsCurrentExposureMaxScoreFlag = statsGetStatsCurrentExposureFlags.String("max-score", "", "")
		statsGetStatsCurrentExposureLabelsFlag   = statsGetStatsCurrentExposureFlags.String("labels", "", "")

		findingsFlags = flag.NewFlagSet("findings", flag.ContinueOnError)

		findingsListFindingsFlags               = flag.NewFlagSet("list- findings", flag.ExitOnError)
		findingsListFindingsTeamFlag            = findingsListFindingsFlags.String("team", "", "")
		findingsListFindingsTagFlag             = findingsListFindingsFlags.String("tag", "", "")
		findingsListFindingsStatusFlag          = findingsListFindingsFlags.String("status", "", "")
		findingsListFindingsMinScoreFlag        = findingsListFindingsFlags.String("min-score", "", "")
		findingsListFindingsMaxScoreFlag        = findingsListFindingsFlags.String("max-score", "", "")
		findingsListFindingsAtDateFlag          = findingsListFindingsFlags.String("at-date", "", "")
		findingsListFindingsMinDateFlag         = findingsListFindingsFlags.String("min-date", "", "")
		findingsListFindingsMaxDateFlag         = findingsListFindingsFlags.String("max-date", "", "")
		findingsListFindingsSortByFlag          = findingsListFindingsFlags.String("sort-by", "", "")
		findingsListFindingsPageFlag            = findingsListFindingsFlags.String("page", "", "")
		findingsListFindingsSizeFlag            = findingsListFindingsFlags.String("size", "", "")
		findingsListFindingsIdentifierFlag      = findingsListFindingsFlags.String("identifier", "", "")
		findingsListFindingsIdentifiermatchFlag = findingsListFindingsFlags.String("identifiermatch", "", "")
		findingsListFindingsIdentifiersFlag     = findingsListFindingsFlags.String("identifiers", "", "")
		findingsListFindingsLabelsFlag          = findingsListFindingsFlags.String("labels", "", "")

		findingsGetFindingFlags  = flag.NewFlagSet("get- finding", flag.ExitOnError)
		findingsGetFindingIDFlag = findingsGetFindingFlags.String("id", "REQUIRED", "Finding ID")

		findingsListEventsByFindingFlags    = flag.NewFlagSet("list- events- by- finding", flag.ExitOnError)
		findingsListEventsByFindingIDFlag   = findingsListEventsByFindingFlags.String("id", "REQUIRED", "Finding ID")
		findingsListEventsByFindingPageFlag = findingsListEventsByFindingFlags.String("page", "", "")
		findingsListEventsByFindingSizeFlag = findingsListEventsByFindingFlags.String("size", "", "")

		findingsGetFindingMTTRFlags  = flag.NewFlagSet("get- finding- mttr", flag.ExitOnError)
		findingsGetFindingMTTRIDFlag = findingsGetFindingMTTRFlags.String("id", "REQUIRED", "Finding ID")

		findingsPatchFindingFlags             = flag.NewFlagSet("patch- finding", flag.ExitOnError)
		findingsPatchFindingBodyFlag          = findingsPatchFindingFlags.String("body", "REQUIRED", "")
		findingsPatchFindingIDFlag            = findingsPatchFindingFlags.String("id", "REQUIRED", "Finding ID")
		findingsPatchFindingAuthorizationFlag = findingsPatchFindingFlags.String("authorization", "", "")

		issuesFlags = flag.NewFlagSet("issues", flag.ContinueOnError)

		issuesListIssuesFlags    = flag.NewFlagSet("list- issues", flag.ExitOnError)
		issuesListIssuesPageFlag = issuesListIssuesFlags.String("page", "", "")
		issuesListIssuesSizeFlag = issuesListIssuesFlags.String("size", "", "")

		issuesIssuesSummaryFlags           = flag.NewFlagSet("issues- summary", flag.ExitOnError)
		issuesIssuesSummaryTeamFlag        = issuesIssuesSummaryFlags.String("team", "", "")
		issuesIssuesSummaryTagFlag         = issuesIssuesSummaryFlags.String("tag", "", "")
		issuesIssuesSummaryStatusFlag      = issuesIssuesSummaryFlags.String("status", "", "")
		issuesIssuesSummarySortByFlag      = issuesIssuesSummaryFlags.String("sort-by", "", "")
		issuesIssuesSummaryPageFlag        = issuesIssuesSummaryFlags.String("page", "", "")
		issuesIssuesSummarySizeFlag        = issuesIssuesSummaryFlags.String("size", "", "")
		issuesIssuesSummaryIdentifiersFlag = issuesIssuesSummaryFlags.String("identifiers", "", "")
		issuesIssuesSummaryLabelsFlag      = issuesIssuesSummaryFlags.String("labels", "", "")

		issuesGetIssueFlags  = flag.NewFlagSet("get- issue", flag.ExitOnError)
		issuesGetIssueIDFlag = issuesGetIssueFlags.String("id", "REQUIRED", "Issue ID")

		issuesListFindingsByIssueFlags           = flag.NewFlagSet("list- findings- by- issue", flag.ExitOnError)
		issuesListFindingsByIssueIDFlag          = issuesListFindingsByIssueFlags.String("id", "REQUIRED", "Issue ID")
		issuesListFindingsByIssueStatusFlag      = issuesListFindingsByIssueFlags.String("status", "", "")
		issuesListFindingsByIssueSortByFlag      = issuesListFindingsByIssueFlags.String("sort-by", "", "")
		issuesListFindingsByIssuePageFlag        = issuesListFindingsByIssueFlags.String("page", "", "")
		issuesListFindingsByIssueSizeFlag        = issuesListFindingsByIssueFlags.String("size", "", "")
		issuesListFindingsByIssueIdentifiersFlag = issuesListFindingsByIssueFlags.String("identifiers", "", "")
		issuesListFindingsByIssueLabelsFlag      = issuesListFindingsByIssueFlags.String("labels", "", "")

		issuesGetFindingByIssueTargetAndAffectedResourceFlags        = flag.NewFlagSet("get- finding- by- issue-,- target- and- affected- resource", flag.ExitOnError)
		issuesGetFindingByIssueTargetAndAffectedResourceIssueIDFlag  = issuesGetFindingByIssueTargetAndAffectedResourceFlags.String("issue-id", "REQUIRED", "Issue ID")
		issuesGetFindingByIssueTargetAndAffectedResourceTargetIDFlag = issuesGetFindingByIssueTargetAndAffectedResourceFlags.String("target-id", "REQUIRED", "Target ID")
		issuesGetFindingByIssueTargetAndAffectedResourceResourceFlag = issuesGetFindingByIssueTargetAndAffectedResourceFlags.String("resource", "REQUIRED", "Resource identifier")

		issuesGetIssueMTTRFlags  = flag.NewFlagSet("get- issue- mttr", flag.ExitOnError)
		issuesGetIssueMTTRIDFlag = issuesGetIssueMTTRFlags.String("id", "REQUIRED", "Issue ID")

		sourcesFlags = flag.NewFlagSet("sources", flag.ContinueOnError)

		sourcesListSourcesFlags    = flag.NewFlagSet("list- sources", flag.ExitOnError)
		sourcesListSourcesPageFlag = sourcesListSourcesFlags.String("page", "", "")
		sourcesListSourcesSizeFlag = sourcesListSourcesFlags.String("size", "", "")

		sourcesGetSourceFlags  = flag.NewFlagSet("get- source", flag.ExitOnError)
		sourcesGetSourceIDFlag = sourcesGetSourceFlags.String("id", "REQUIRED", "Source ID")

		sourcesListFindingsBySourceFlags      = flag.NewFlagSet("list- findings- by- source", flag.ExitOnError)
		sourcesListFindingsBySourceIDFlag     = sourcesListFindingsBySourceFlags.String("id", "REQUIRED", "Source ID")
		sourcesListFindingsBySourceStatusFlag = sourcesListFindingsBySourceFlags.String("status", "", "")
		sourcesListFindingsBySourceSortByFlag = sourcesListFindingsBySourceFlags.String("sort-by", "", "")
		sourcesListFindingsBySourcePageFlag   = sourcesListFindingsBySourceFlags.String("page", "", "")
		sourcesListFindingsBySourceSizeFlag   = sourcesListFindingsBySourceFlags.String("size", "", "")

		sourcesGetSourceMTTRFlags  = flag.NewFlagSet("get- source- mttr", flag.ExitOnError)
		sourcesGetSourceMTTRIDFlag = sourcesGetSourceMTTRFlags.String("id", "REQUIRED", "Source ID")

		targetsFlags = flag.NewFlagSet("targets", flag.ContinueOnError)

		targetsListTargetsFlags               = flag.NewFlagSet("list- targets", flag.ExitOnError)
		targetsListTargetsTeamFlag            = targetsListTargetsFlags.String("team", "", "")
		targetsListTargetsTagFlag             = targetsListTargetsFlags.String("tag", "", "")
		targetsListTargetsIdentifierFlag      = targetsListTargetsFlags.String("identifier", "", "")
		targetsListTargetsPageFlag            = targetsListTargetsFlags.String("page", "", "")
		targetsListTargetsSizeFlag            = targetsListTargetsFlags.String("size", "", "")
		targetsListTargetsIdentifiermatchFlag = targetsListTargetsFlags.String("identifiermatch", "", "")
		targetsListTargetsIdentifiersFlag     = targetsListTargetsFlags.String("identifiers", "", "")

		targetsTargetsSummaryFlags           = flag.NewFlagSet("targets- summary", flag.ExitOnError)
		targetsTargetsSummaryTeamFlag        = targetsTargetsSummaryFlags.String("team", "", "")
		targetsTargetsSummaryTagFlag         = targetsTargetsSummaryFlags.String("tag", "", "")
		targetsTargetsSummaryStatusFlag      = targetsTargetsSummaryFlags.String("status", "", "")
		targetsTargetsSummarySortByFlag      = targetsTargetsSummaryFlags.String("sort-by", "", "")
		targetsTargetsSummaryPageFlag        = targetsTargetsSummaryFlags.String("page", "", "")
		targetsTargetsSummarySizeFlag        = targetsTargetsSummaryFlags.String("size", "", "")
		targetsTargetsSummaryIdentifiersFlag = targetsTargetsSummaryFlags.String("identifiers", "", "")
		targetsTargetsSummaryLabelsFlag      = targetsTargetsSummaryFlags.String("labels", "", "")

		targetsGetTargetFlags  = flag.NewFlagSet("get- target", flag.ExitOnError)
		targetsGetTargetIDFlag = targetsGetTargetFlags.String("id", "REQUIRED", "Target ID")

		targetsCreateTargetFlags    = flag.NewFlagSet("create- target", flag.ExitOnError)
		targetsCreateTargetBodyFlag = targetsCreateTargetFlags.String("body", "REQUIRED", "")

		targetsListFindingsByTargetFlags      = flag.NewFlagSet("list- findings- by- target", flag.ExitOnError)
		targetsListFindingsByTargetIDFlag     = targetsListFindingsByTargetFlags.String("id", "REQUIRED", "Target ID")
		targetsListFindingsByTargetStatusFlag = targetsListFindingsByTargetFlags.String("status", "", "")
		targetsListFindingsByTargetSortByFlag = targetsListFindingsByTargetFlags.String("sort-by", "", "")
		targetsListFindingsByTargetPageFlag   = targetsListFindingsByTargetFlags.String("page", "", "")
		targetsListFindingsByTargetSizeFlag   = targetsListFindingsByTargetFlags.String("size", "", "")
		targetsListFindingsByTargetLabelsFlag = targetsListFindingsByTargetFlags.String("labels", "", "")

		targetsGetFindingByTargetIssueAndAffectedResourceFlags        = flag.NewFlagSet("get- finding- by- target-,- issue- and- affected- resource", flag.ExitOnError)
		targetsGetFindingByTargetIssueAndAffectedResourceTargetIDFlag = targetsGetFindingByTargetIssueAndAffectedResourceFlags.String("target-id", "REQUIRED", "Target ID")
		targetsGetFindingByTargetIssueAndAffectedResourceIssueIDFlag  = targetsGetFindingByTargetIssueAndAffectedResourceFlags.String("issue-id", "REQUIRED", "Issue ID")
		targetsGetFindingByTargetIssueAndAffectedResourceResourceFlag = targetsGetFindingByTargetIssueAndAffectedResourceFlags.String("resource", "REQUIRED", "Resource identifier")

		targetsGetTargetMTTRFlags  = flag.NewFlagSet("get- target- mttr", flag.ExitOnError)
		targetsGetTargetMTTRIDFlag = targetsGetTargetMTTRFlags.String("id", "REQUIRED", "Target ID")

		targetsDeleteTargetTeamFlags        = flag.NewFlagSet("delete- target- team", flag.ExitOnError)
		targetsDeleteTargetTeamTargetIDFlag = targetsDeleteTargetTeamFlags.String("target-id", "REQUIRED", "Target ID")
		targetsDeleteTargetTeamTeamFlag     = targetsDeleteTargetTeamFlags.String("team", "REQUIRED", "Team ID")
		targetsDeleteTargetTeamAuthFlag     = targetsDeleteTargetTeamFlags.String("auth", "REQUIRED", "")

		targetsDeleteTeamFlags    = flag.NewFlagSet("delete- team", flag.ExitOnError)
		targetsDeleteTeamTeamFlag = targetsDeleteTeamFlags.String("team", "REQUIRED", "Team ID")
		targetsDeleteTeamAuthFlag = targetsDeleteTeamFlags.String("auth", "REQUIRED", "")

		targetsDeleteTargetTagFlags        = flag.NewFlagSet("delete- target- tag", flag.ExitOnError)
		targetsDeleteTargetTagTargetIDFlag = targetsDeleteTargetTagFlags.String("target-id", "REQUIRED", "Target ID")
		targetsDeleteTargetTagTagFlag      = targetsDeleteTargetTagFlags.String("tag", "REQUIRED", "Tag")
		targetsDeleteTargetTagAuthFlag     = targetsDeleteTargetTagFlags.String("auth", "REQUIRED", "")

		targetsDeleteTagFlags    = flag.NewFlagSet("delete- tag", flag.ExitOnError)
		targetsDeleteTagTagFlag  = targetsDeleteTagFlags.String("tag", "REQUIRED", "Tag")
		targetsDeleteTagAuthFlag = targetsDeleteTagFlags.String("auth", "REQUIRED", "")
	)
	eventsFlags.Usage = eventsUsage
	eventsListFindingEventsFlags.Usage = eventsListFindingEventsUsage

	labelsFlags.Usage = labelsUsage
	labelsListLabelsFlags.Usage = labelsListLabelsUsage

	statsFlags.Usage = statsUsage
	statsGetSizeStatsFlags.Usage = statsGetSizeStatsUsage
	statsGetOpenIssuesStatsFlags.Usage = statsGetOpenIssuesStatsUsage
	statsGetFixedIssuesStatsFlags.Usage = statsGetFixedIssuesStatsUsage
	statsGetStatsAssetsPerSeverityFlags.Usage = statsGetStatsAssetsPerSeverityUsage
	statsGetIssuesStatsFlags.Usage = statsGetIssuesStatsUsage
	statsGetStatsMTTRFlags.Usage = statsGetStatsMTTRUsage
	statsGetStatsExposureFlags.Usage = statsGetStatsExposureUsage
	statsGetStatsCurrentExposureFlags.Usage = statsGetStatsCurrentExposureUsage

	findingsFlags.Usage = findingsUsage
	findingsListFindingsFlags.Usage = findingsListFindingsUsage
	findingsGetFindingFlags.Usage = findingsGetFindingUsage
	findingsListEventsByFindingFlags.Usage = findingsListEventsByFindingUsage
	findingsGetFindingMTTRFlags.Usage = findingsGetFindingMTTRUsage
	findingsPatchFindingFlags.Usage = findingsPatchFindingUsage

	issuesFlags.Usage = issuesUsage
	issuesListIssuesFlags.Usage = issuesListIssuesUsage
	issuesIssuesSummaryFlags.Usage = issuesIssuesSummaryUsage
	issuesGetIssueFlags.Usage = issuesGetIssueUsage
	issuesListFindingsByIssueFlags.Usage = issuesListFindingsByIssueUsage
	issuesGetFindingByIssueTargetAndAffectedResourceFlags.Usage = issuesGetFindingByIssueTargetAndAffectedResourceUsage
	issuesGetIssueMTTRFlags.Usage = issuesGetIssueMTTRUsage

	sourcesFlags.Usage = sourcesUsage
	sourcesListSourcesFlags.Usage = sourcesListSourcesUsage
	sourcesGetSourceFlags.Usage = sourcesGetSourceUsage
	sourcesListFindingsBySourceFlags.Usage = sourcesListFindingsBySourceUsage
	sourcesGetSourceMTTRFlags.Usage = sourcesGetSourceMTTRUsage

	targetsFlags.Usage = targetsUsage
	targetsListTargetsFlags.Usage = targetsListTargetsUsage
	targetsTargetsSummaryFlags.Usage = targetsTargetsSummaryUsage
	targetsGetTargetFlags.Usage = targetsGetTargetUsage
	targetsCreateTargetFlags.Usage = targetsCreateTargetUsage
	targetsListFindingsByTargetFlags.Usage = targetsListFindingsByTargetUsage
	targetsGetFindingByTargetIssueAndAffectedResourceFlags.Usage = targetsGetFindingByTargetIssueAndAffectedResourceUsage
	targetsGetTargetMTTRFlags.Usage = targetsGetTargetMTTRUsage
	targetsDeleteTargetTeamFlags.Usage = targetsDeleteTargetTeamUsage
	targetsDeleteTeamFlags.Usage = targetsDeleteTeamUsage
	targetsDeleteTargetTagFlags.Usage = targetsDeleteTargetTagUsage
	targetsDeleteTagFlags.Usage = targetsDeleteTagUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "events":
			svcf = eventsFlags
		case "labels":
			svcf = labelsFlags
		case "stats":
			svcf = statsFlags
		case "findings":
			svcf = findingsFlags
		case "issues":
			svcf = issuesFlags
		case "sources":
			svcf = sourcesFlags
		case "targets":
			svcf = targetsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "events":
			switch epn {
			case "list- finding- events":
				epf = eventsListFindingEventsFlags

			}

		case "labels":
			switch epn {
			case "list- labels":
				epf = labelsListLabelsFlags

			}

		case "stats":
			switch epn {
			case "get- size- stats":
				epf = statsGetSizeStatsFlags

			case "get- open- issues- stats":
				epf = statsGetOpenIssuesStatsFlags

			case "get- fixed- issues- stats":
				epf = statsGetFixedIssuesStatsFlags

			case "get- stats- assets- per- severity":
				epf = statsGetStatsAssetsPerSeverityFlags

			case "get- issues- stats":
				epf = statsGetIssuesStatsFlags

			case "get- stats- mttr":
				epf = statsGetStatsMTTRFlags

			case "get- stats- exposure":
				epf = statsGetStatsExposureFlags

			case "get- stats- current- exposure":
				epf = statsGetStatsCurrentExposureFlags

			}

		case "findings":
			switch epn {
			case "list- findings":
				epf = findingsListFindingsFlags

			case "get- finding":
				epf = findingsGetFindingFlags

			case "list- events- by- finding":
				epf = findingsListEventsByFindingFlags

			case "get- finding- mttr":
				epf = findingsGetFindingMTTRFlags

			case "patch- finding":
				epf = findingsPatchFindingFlags

			}

		case "issues":
			switch epn {
			case "list- issues":
				epf = issuesListIssuesFlags

			case "issues- summary":
				epf = issuesIssuesSummaryFlags

			case "get- issue":
				epf = issuesGetIssueFlags

			case "list- findings- by- issue":
				epf = issuesListFindingsByIssueFlags

			case "get- finding- by- issue-,- target- and- affected- resource":
				epf = issuesGetFindingByIssueTargetAndAffectedResourceFlags

			case "get- issue- mttr":
				epf = issuesGetIssueMTTRFlags

			}

		case "sources":
			switch epn {
			case "list- sources":
				epf = sourcesListSourcesFlags

			case "get- source":
				epf = sourcesGetSourceFlags

			case "list- findings- by- source":
				epf = sourcesListFindingsBySourceFlags

			case "get- source- mttr":
				epf = sourcesGetSourceMTTRFlags

			}

		case "targets":
			switch epn {
			case "list- targets":
				epf = targetsListTargetsFlags

			case "targets- summary":
				epf = targetsTargetsSummaryFlags

			case "get- target":
				epf = targetsGetTargetFlags

			case "create- target":
				epf = targetsCreateTargetFlags

			case "list- findings- by- target":
				epf = targetsListFindingsByTargetFlags

			case "get- finding- by- target-,- issue- and- affected- resource":
				epf = targetsGetFindingByTargetIssueAndAffectedResourceFlags

			case "get- target- mttr":
				epf = targetsGetTargetMTTRFlags

			case "delete- target- team":
				epf = targetsDeleteTargetTeamFlags

			case "delete- team":
				epf = targetsDeleteTeamFlags

			case "delete- target- tag":
				epf = targetsDeleteTargetTagFlags

			case "delete- tag":
				epf = targetsDeleteTagFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "events":
			c := eventsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list- finding- events":
				endpoint = c.ListFindingEvents()
				data, err = eventsc.BuildListFindingEventsPayload(*eventsListFindingEventsMinScoreFlag, *eventsListFindingEventsMaxScoreFlag, *eventsListFindingEventsMinDateFlag, *eventsListFindingEventsMaxDateFlag, *eventsListFindingEventsPageFlag, *eventsListFindingEventsSizeFlag)
			}
		case "labels":
			c := labelsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list- labels":
				endpoint = c.ListLabels()
				data, err = labelsc.BuildListLabelsPayload(*labelsListLabelsTeamFlag, *labelsListLabelsTagFlag, *labelsListLabelsStatusFlag, *labelsListLabelsAtDateFlag, *labelsListLabelsMinDateFlag, *labelsListLabelsMaxDateFlag, *labelsListLabelsIdentifiersFlag)
			}
		case "stats":
			c := statsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get- size- stats":
				endpoint = c.GetSizeStats()
				data = nil
			case "get- open- issues- stats":
				endpoint = c.GetOpenIssuesStats()
				data, err = statsc.BuildGetOpenIssuesStatsPayload(*statsGetOpenIssuesStatsTeamFlag, *statsGetOpenIssuesStatsTeamsFlag, *statsGetOpenIssuesStatsTagFlag, *statsGetOpenIssuesStatsTagsFlag, *statsGetOpenIssuesStatsMinDateFlag, *statsGetOpenIssuesStatsMaxDateFlag, *statsGetOpenIssuesStatsAtDateFlag, *statsGetOpenIssuesStatsIdentifiersFlag, *statsGetOpenIssuesStatsLabelsFlag)
			case "get- fixed- issues- stats":
				endpoint = c.GetFixedIssuesStats()
				data, err = statsc.BuildGetFixedIssuesStatsPayload(*statsGetFixedIssuesStatsTeamFlag, *statsGetFixedIssuesStatsTeamsFlag, *statsGetFixedIssuesStatsTagFlag, *statsGetFixedIssuesStatsTagsFlag, *statsGetFixedIssuesStatsMinDateFlag, *statsGetFixedIssuesStatsMaxDateFlag, *statsGetFixedIssuesStatsAtDateFlag, *statsGetFixedIssuesStatsIdentifiersFlag, *statsGetFixedIssuesStatsLabelsFlag)
			case "get- stats- assets- per- severity":
				endpoint = c.GetStatsAssetsPerSeverity()
				data, err = statsc.BuildGetStatsAssetsPerSeverityPayload(*statsGetStatsAssetsPerSeverityTeamFlag, *statsGetStatsAssetsPerSeverityTeamsFlag, *statsGetStatsAssetsPerSeverityTagFlag, *statsGetStatsAssetsPerSeverityTagsFlag, *statsGetStatsAssetsPerSeverityIdentifiersFlag, *statsGetStatsAssetsPerSeverityLabelsFlag)
			case "get- issues- stats":
				endpoint = c.GetIssuesStats()
				data, err = statsc.BuildGetIssuesStatsPayload(*statsGetIssuesStatsMinDateFlag, *statsGetIssuesStatsMaxDateFlag, *statsGetIssuesStatsMinScoreFlag, *statsGetIssuesStatsMaxScoreFlag)
			case "get- stats- mttr":
				endpoint = c.GetStatsMTTR()
				data, err = statsc.BuildGetStatsMTTRPayload(*statsGetStatsMTTRTeamFlag, *statsGetStatsMTTRTeamsFlag, *statsGetStatsMTTRTagFlag, *statsGetStatsMTTRTagsFlag, *statsGetStatsMTTRMinDateFlag, *statsGetStatsMTTRMaxDateFlag, *statsGetStatsMTTRLabelsFlag)
			case "get- stats- exposure":
				endpoint = c.GetStatsExposure()
				data, err = statsc.BuildGetStatsExposurePayload(*statsGetStatsExposureTeamFlag, *statsGetStatsExposureTeamsFlag, *statsGetStatsExposureTagFlag, *statsGetStatsExposureTagsFlag, *statsGetStatsExposureAtDateFlag, *statsGetStatsExposureMinScoreFlag, *statsGetStatsExposureMaxScoreFlag)
			case "get- stats- current- exposure":
				endpoint = c.GetStatsCurrentExposure()
				data, err = statsc.BuildGetStatsCurrentExposurePayload(*statsGetStatsCurrentExposureTeamFlag, *statsGetStatsCurrentExposureTeamsFlag, *statsGetStatsCurrentExposureTagFlag, *statsGetStatsCurrentExposureTagsFlag, *statsGetStatsCurrentExposureMinScoreFlag, *statsGetStatsCurrentExposureMaxScoreFlag, *statsGetStatsCurrentExposureLabelsFlag)
			}
		case "findings":
			c := findingsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list- findings":
				endpoint = c.ListFindings()
				data, err = findingsc.BuildListFindingsPayload(*findingsListFindingsTeamFlag, *findingsListFindingsTagFlag, *findingsListFindingsStatusFlag, *findingsListFindingsMinScoreFlag, *findingsListFindingsMaxScoreFlag, *findingsListFindingsAtDateFlag, *findingsListFindingsMinDateFlag, *findingsListFindingsMaxDateFlag, *findingsListFindingsSortByFlag, *findingsListFindingsPageFlag, *findingsListFindingsSizeFlag, *findingsListFindingsIdentifierFlag, *findingsListFindingsIdentifiermatchFlag, *findingsListFindingsIdentifiersFlag, *findingsListFindingsLabelsFlag)
			case "get- finding":
				endpoint = c.GetFinding()
				data, err = findingsc.BuildGetFindingPayload(*findingsGetFindingIDFlag)
			case "list- events- by- finding":
				endpoint = c.ListEventsByFinding()
				data, err = findingsc.BuildListEventsByFindingPayload(*findingsListEventsByFindingIDFlag, *findingsListEventsByFindingPageFlag, *findingsListEventsByFindingSizeFlag)
			case "get- finding- mttr":
				endpoint = c.GetFindingMTTR()
				data, err = findingsc.BuildGetFindingMTTRPayload(*findingsGetFindingMTTRIDFlag)
			case "patch- finding":
				endpoint = c.PatchFinding()
				data, err = findingsc.BuildPatchFindingPayload(*findingsPatchFindingBodyFlag, *findingsPatchFindingIDFlag, *findingsPatchFindingAuthorizationFlag)
			}
		case "issues":
			c := issuesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list- issues":
				endpoint = c.ListIssues()
				data, err = issuesc.BuildListIssuesPayload(*issuesListIssuesPageFlag, *issuesListIssuesSizeFlag)
			case "issues- summary":
				endpoint = c.IssuesSummary()
				data, err = issuesc.BuildIssuesSummaryPayload(*issuesIssuesSummaryTeamFlag, *issuesIssuesSummaryTagFlag, *issuesIssuesSummaryStatusFlag, *issuesIssuesSummarySortByFlag, *issuesIssuesSummaryPageFlag, *issuesIssuesSummarySizeFlag, *issuesIssuesSummaryIdentifiersFlag, *issuesIssuesSummaryLabelsFlag)
			case "get- issue":
				endpoint = c.GetIssue()
				data, err = issuesc.BuildGetIssuePayload(*issuesGetIssueIDFlag)
			case "list- findings- by- issue":
				endpoint = c.ListFindingsByIssue()
				data, err = issuesc.BuildListFindingsByIssuePayload(*issuesListFindingsByIssueIDFlag, *issuesListFindingsByIssueStatusFlag, *issuesListFindingsByIssueSortByFlag, *issuesListFindingsByIssuePageFlag, *issuesListFindingsByIssueSizeFlag, *issuesListFindingsByIssueIdentifiersFlag, *issuesListFindingsByIssueLabelsFlag)
			case "get- finding- by- issue-,- target- and- affected- resource":
				endpoint = c.GetFindingByIssueTargetAndAffectedResource()
				data, err = issuesc.BuildGetFindingByIssueTargetAndAffectedResourcePayload(*issuesGetFindingByIssueTargetAndAffectedResourceIssueIDFlag, *issuesGetFindingByIssueTargetAndAffectedResourceTargetIDFlag, *issuesGetFindingByIssueTargetAndAffectedResourceResourceFlag)
			case "get- issue- mttr":
				endpoint = c.GetIssueMTTR()
				data, err = issuesc.BuildGetIssueMTTRPayload(*issuesGetIssueMTTRIDFlag)
			}
		case "sources":
			c := sourcesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list- sources":
				endpoint = c.ListSources()
				data, err = sourcesc.BuildListSourcesPayload(*sourcesListSourcesPageFlag, *sourcesListSourcesSizeFlag)
			case "get- source":
				endpoint = c.GetSource()
				data, err = sourcesc.BuildGetSourcePayload(*sourcesGetSourceIDFlag)
			case "list- findings- by- source":
				endpoint = c.ListFindingsBySource()
				data, err = sourcesc.BuildListFindingsBySourcePayload(*sourcesListFindingsBySourceIDFlag, *sourcesListFindingsBySourceStatusFlag, *sourcesListFindingsBySourceSortByFlag, *sourcesListFindingsBySourcePageFlag, *sourcesListFindingsBySourceSizeFlag)
			case "get- source- mttr":
				endpoint = c.GetSourceMTTR()
				data, err = sourcesc.BuildGetSourceMTTRPayload(*sourcesGetSourceMTTRIDFlag)
			}
		case "targets":
			c := targetsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list- targets":
				endpoint = c.ListTargets()
				data, err = targetsc.BuildListTargetsPayload(*targetsListTargetsTeamFlag, *targetsListTargetsTagFlag, *targetsListTargetsIdentifierFlag, *targetsListTargetsPageFlag, *targetsListTargetsSizeFlag, *targetsListTargetsIdentifiermatchFlag, *targetsListTargetsIdentifiersFlag)
			case "targets- summary":
				endpoint = c.TargetsSummary()
				data, err = targetsc.BuildTargetsSummaryPayload(*targetsTargetsSummaryTeamFlag, *targetsTargetsSummaryTagFlag, *targetsTargetsSummaryStatusFlag, *targetsTargetsSummarySortByFlag, *targetsTargetsSummaryPageFlag, *targetsTargetsSummarySizeFlag, *targetsTargetsSummaryIdentifiersFlag, *targetsTargetsSummaryLabelsFlag)
			case "get- target":
				endpoint = c.GetTarget()
				data, err = targetsc.BuildGetTargetPayload(*targetsGetTargetIDFlag)
			case "create- target":
				endpoint = c.CreateTarget()
				data, err = targetsc.BuildCreateTargetPayload(*targetsCreateTargetBodyFlag)
			case "list- findings- by- target":
				endpoint = c.ListFindingsByTarget()
				data, err = targetsc.BuildListFindingsByTargetPayload(*targetsListFindingsByTargetIDFlag, *targetsListFindingsByTargetStatusFlag, *targetsListFindingsByTargetSortByFlag, *targetsListFindingsByTargetPageFlag, *targetsListFindingsByTargetSizeFlag, *targetsListFindingsByTargetLabelsFlag)
			case "get- finding- by- target-,- issue- and- affected- resource":
				endpoint = c.GetFindingByTargetIssueAndAffectedResource()
				data, err = targetsc.BuildGetFindingByTargetIssueAndAffectedResourcePayload(*targetsGetFindingByTargetIssueAndAffectedResourceTargetIDFlag, *targetsGetFindingByTargetIssueAndAffectedResourceIssueIDFlag, *targetsGetFindingByTargetIssueAndAffectedResourceResourceFlag)
			case "get- target- mttr":
				endpoint = c.GetTargetMTTR()
				data, err = targetsc.BuildGetTargetMTTRPayload(*targetsGetTargetMTTRIDFlag)
			case "delete- target- team":
				endpoint = c.DeleteTargetTeam()
				data, err = targetsc.BuildDeleteTargetTeamPayload(*targetsDeleteTargetTeamTargetIDFlag, *targetsDeleteTargetTeamTeamFlag, *targetsDeleteTargetTeamAuthFlag)
			case "delete- team":
				endpoint = c.DeleteTeam()
				data, err = targetsc.BuildDeleteTeamPayload(*targetsDeleteTeamTeamFlag, *targetsDeleteTeamAuthFlag)
			case "delete- target- tag":
				endpoint = c.DeleteTargetTag()
				data, err = targetsc.BuildDeleteTargetTagPayload(*targetsDeleteTargetTagTargetIDFlag, *targetsDeleteTargetTagTagFlag, *targetsDeleteTargetTagAuthFlag)
			case "delete- tag":
				endpoint = c.DeleteTag()
				data, err = targetsc.BuildDeleteTagPayload(*targetsDeleteTagTagFlag, *targetsDeleteTagAuthFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// eventsUsage displays the usage of the events command and its subcommands.
func eventsUsage() {
	fmt.Fprintf(os.Stderr, `Finding events endpoint.
Usage:
    %[1]s [globalflags] events COMMAND [flags]

COMMAND:
    list- finding- events: ListFindingEvents implements List finding events.

Additional help:
    %[1]s events COMMAND --help
`, os.Args[0])
}
func eventsListFindingEventsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] events list- finding- events -min-score INT -max-score INT -min-date STRING -max-date STRING -page INT -size INT

ListFindingEvents implements List finding events.
    -min-score INT: 
    -max-score INT: 
    -min-date STRING: 
    -max-date STRING: 
    -page INT: 
    -size INT: 

Example:
    %[1]s events list- finding- events --min-score 5417766179193376107 --max-score 5663207668600435835 --min-date "Tempore necessitatibus et eum inventore qui dolores." --max-date "Iusto harum." --page 9027869851862118397 --size 9141472216866784964
`, os.Args[0])
}

// labelsUsage displays the usage of the labels command and its subcommands.
func labelsUsage() {
	fmt.Fprintf(os.Stderr, `Labels endpoint.
Usage:
    %[1]s [globalflags] labels COMMAND [flags]

COMMAND:
    list- labels: ListLabels implements List labels.

Additional help:
    %[1]s labels COMMAND --help
`, os.Args[0])
}
func labelsListLabelsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] labels list- labels -team STRING -tag STRING -status STRING -at-date STRING -min-date STRING -max-date STRING -identifiers STRING

ListLabels implements List labels.
    -team STRING: 
    -tag STRING: 
    -status STRING: 
    -at-date STRING: 
    -min-date STRING: 
    -max-date STRING: 
    -identifiers STRING: 

Example:
    %[1]s labels list- labels --team "Et voluptatem." --tag "Quisquam vitae totam vel sit cumque." --status "Dolorem omnis unde natus." --at-date "Facilis vitae eum explicabo." --min-date "Sapiente explicabo tenetur et." --max-date "Perspiciatis qui ex ut sunt nemo." --identifiers "Commodi praesentium sint voluptatem sed."
`, os.Args[0])
}

// statsUsage displays the usage of the stats command and its subcommands.
func statsUsage() {
	fmt.Fprintf(os.Stderr, `Stats endpoint.
Usage:
    %[1]s [globalflags] stats COMMAND [flags]

COMMAND:
    get- size- stats: GetSizeStats implements Get size stats.
    get- open- issues- stats: This method gets statistics for open findings by using different filters.
	When querying for a specific time range, it returns every finding that has been found in that time, regardless if that finding has also been fixed in that span of time.
    get- fixed- issues- stats: This method gets statistics for fixed findings by using different filters.
	When querying for a specific time range, it returns every finding that has been fixed in that time and it's fixed at the end of the time range specified, so a finding that is fixed and then reopened in that range of time will not be counted.
    get- stats- assets- per- severity: GetStatsAssetsPerSeverity implements Get stats assets per severity.
    get- issues- stats: GetIssuesStats implements Get issues stats.
    get- stats- mttr: GetStatsMTTR implements Get stats MTTR.
    get- stats- exposure: GetStatsExposure implements Get stats exposure.
    get- stats- current- exposure: GetStatsCurrentExposure implements Get stats current exposure.

Additional help:
    %[1]s stats COMMAND --help
`, os.Args[0])
}
func statsGetSizeStatsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] stats get- size- stats

GetSizeStats implements Get size stats.

Example:
    %[1]s stats get- size- stats
`, os.Args[0])
}

func statsGetOpenIssuesStatsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] stats get- open- issues- stats -team STRING -teams STRING -tag STRING -tags STRING -min-date STRING -max-date STRING -at-date STRING -identifiers STRING -labels STRING

This method gets statistics for open findings by using different filters.
	When querying for a specific time range, it returns every finding that has been found in that time, regardless if that finding has also been fixed in that span of time.
    -team STRING: 
    -teams STRING: 
    -tag STRING: 
    -tags STRING: 
    -min-date STRING: 
    -max-date STRING: 
    -at-date STRING: 
    -identifiers STRING: 
    -labels STRING: 

Example:
    %[1]s stats get- open- issues- stats --team "Mollitia repellendus aperiam voluptatibus qui vel." --teams "Dolores sunt perspiciatis doloribus eum voluptatem distinctio." --tag "Exercitationem rerum deleniti non." --tags "Minima atque rerum quia repudiandae." --min-date "Quas error." --max-date "Laborum accusamus." --at-date "Et minus sit ad quos magnam vel." --identifiers "Est numquam dolor et excepturi aliquid ducimus." --labels "Quisquam asperiores quae."
`, os.Args[0])
}

func statsGetFixedIssuesStatsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] stats get- fixed- issues- stats -team STRING -teams STRING -tag STRING -tags STRING -min-date STRING -max-date STRING -at-date STRING -identifiers STRING -labels STRING

This method gets statistics for fixed findings by using different filters.
	When querying for a specific time range, it returns every finding that has been fixed in that time and it's fixed at the end of the time range specified, so a finding that is fixed and then reopened in that range of time will not be counted.
    -team STRING: 
    -teams STRING: 
    -tag STRING: 
    -tags STRING: 
    -min-date STRING: 
    -max-date STRING: 
    -at-date STRING: 
    -identifiers STRING: 
    -labels STRING: 

Example:
    %[1]s stats get- fixed- issues- stats --team "Dolor voluptas dicta eveniet." --teams "Placeat autem quaerat illum." --tag "Beatae libero repellendus illum optio." --tags "Nobis repellendus ipsa dolores." --min-date "Labore in omnis ipsam quae." --max-date "Autem ad aliquid." --at-date "Reprehenderit est veritatis rerum dignissimos enim sapiente." --identifiers "Fuga necessitatibus voluptates consequatur." --labels "Quaerat eaque ea unde non est qui."
`, os.Args[0])
}

func statsGetStatsAssetsPerSeverityUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] stats get- stats- assets- per- severity -team STRING -teams STRING -tag STRING -tags STRING -identifiers STRING -labels STRING

GetStatsAssetsPerSeverity implements Get stats assets per severity.
    -team STRING: 
    -teams STRING: 
    -tag STRING: 
    -tags STRING: 
    -identifiers STRING: 
    -labels STRING: 

Example:
    %[1]s stats get- stats- assets- per- severity --team "Sed similique adipisci velit." --teams "Nostrum sit occaecati sit cumque occaecati labore." --tag "Repellendus quisquam deserunt et odit omnis eos." --tags "Sapiente dolor nihil hic labore sed eos." --identifiers "Amet totam." --labels "Quia incidunt eveniet in."
`, os.Args[0])
}

func statsGetIssuesStatsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] stats get- issues- stats -min-date STRING -max-date STRING -min-score INT -max-score INT

GetIssuesStats implements Get issues stats.
    -min-date STRING: 
    -max-date STRING: 
    -min-score INT: 
    -max-score INT: 

Example:
    %[1]s stats get- issues- stats --min-date "Voluptatem excepturi beatae neque sint." --max-date "Deserunt occaecati et in aliquam." --min-score 8556502756386612387 --max-score 1900241042259223262
`, os.Args[0])
}

func statsGetStatsMTTRUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] stats get- stats- mttr -team STRING -teams STRING -tag STRING -tags STRING -min-date STRING -max-date STRING -labels STRING

GetStatsMTTR implements Get stats MTTR.
    -team STRING: 
    -teams STRING: 
    -tag STRING: 
    -tags STRING: 
    -min-date STRING: 
    -max-date STRING: 
    -labels STRING: 

Example:
    %[1]s stats get- stats- mttr --team "Quaerat sequi sed ea aut commodi." --teams "Est voluptatem est incidunt dicta vel." --tag "Totam ut ut unde autem beatae." --tags "In natus incidunt porro adipisci." --min-date "Doloribus sapiente accusantium eum consequatur odio voluptas." --max-date "Eligendi cupiditate error qui ipsa." --labels "Enim vel."
`, os.Args[0])
}

func statsGetStatsExposureUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] stats get- stats- exposure -team STRING -teams STRING -tag STRING -tags STRING -at-date STRING -min-score INT -max-score INT

GetStatsExposure implements Get stats exposure.
    -team STRING: 
    -teams STRING: 
    -tag STRING: 
    -tags STRING: 
    -at-date STRING: 
    -min-score INT: 
    -max-score INT: 

Example:
    %[1]s stats get- stats- exposure --team "Sunt iste." --teams "Aut qui sequi." --tag "Est omnis quisquam cupiditate veniam nihil omnis." --tags "Facere est quibusdam sunt et." --at-date "Maiores consequatur distinctio." --min-score 9213057384506213989 --max-score 8549737383041950286
`, os.Args[0])
}

func statsGetStatsCurrentExposureUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] stats get- stats- current- exposure -team STRING -teams STRING -tag STRING -tags STRING -min-score INT -max-score INT -labels STRING

GetStatsCurrentExposure implements Get stats current exposure.
    -team STRING: 
    -teams STRING: 
    -tag STRING: 
    -tags STRING: 
    -min-score INT: 
    -max-score INT: 
    -labels STRING: 

Example:
    %[1]s stats get- stats- current- exposure --team "Quia quisquam sit iste voluptatem consectetur." --teams "Eos repudiandae." --tag "Quod dolore est impedit nihil hic ex." --tags "Eos non rem aut iusto aut id." --min-score 5104656333384907066 --max-score 901977647721461698 --labels "Magni molestiae porro veritatis incidunt quidem eos."
`, os.Args[0])
}

// findingsUsage displays the usage of the findings command and its subcommands.
func findingsUsage() {
	fmt.Fprintf(os.Stderr, `Findings endpoint.
Usage:
    %[1]s [globalflags] findings COMMAND [flags]

COMMAND:
    list- findings: This method allows to list findings by using different filters.
	When querying for open findings in a specific time range, it returns every finding that has been found in that time, regardless if that finding has also been fixed in that span of time.
	When querying for fixed findings in a specific time range, it returns every finding that has been fixed in that time and it's fixed at the end of that time range, so a finding that is fixed and then reopened in that range of time will not be returned.
    get- finding: GetFinding implements Get finding.
    list- events- by- finding: ListEventsByFinding implements List events by finding.
    get- finding- mttr: GetFindingMTTR implements Get finding MTTR.
    patch- finding: PatchFinding implements Patch finding.

Additional help:
    %[1]s findings COMMAND --help
`, os.Args[0])
}
func findingsListFindingsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] findings list- findings -team STRING -tag STRING -status STRING -min-score INT -max-score INT -at-date STRING -min-date STRING -max-date STRING -sort-by STRING -page INT -size INT -identifier STRING -identifiermatch BOOL -identifiers STRING -labels STRING

This method allows to list findings by using different filters.
	When querying for open findings in a specific time range, it returns every finding that has been found in that time, regardless if that finding has also been fixed in that span of time.
	When querying for fixed findings in a specific time range, it returns every finding that has been fixed in that time and it's fixed at the end of that time range, so a finding that is fixed and then reopened in that range of time will not be returned.
    -team STRING: 
    -tag STRING: 
    -status STRING: 
    -min-score INT: 
    -max-score INT: 
    -at-date STRING: 
    -min-date STRING: 
    -max-date STRING: 
    -sort-by STRING: 
    -page INT: 
    -size INT: 
    -identifier STRING: 
    -identifiermatch BOOL: 
    -identifiers STRING: 
    -labels STRING: 

Example:
    %[1]s findings list- findings --team "Qui qui alias." --tag "Reprehenderit ea fugit dolore." --status "Cupiditate magnam." --min-score 9176748733626154358 --max-score 5694357860577872464 --at-date "Non culpa non nam possimus harum." --min-date "Eos ipsam odit in quidem dignissimos." --max-date "Amet voluptatem unde sit voluptas ea." --sort-by "Reiciendis alias et blanditiis enim." --page 603513144413787829 --size 5070900335168518831 --identifier "Explicabo tempora alias distinctio." --identifiermatch false --identifiers "Qui molestias aut aliquid eum voluptatem dicta." --labels "Suscipit laborum."
`, os.Args[0])
}

func findingsGetFindingUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] findings get- finding -id STRING

GetFinding implements Get finding.
    -id STRING: Finding ID

Example:
    %[1]s findings get- finding --id "Aut et."
`, os.Args[0])
}

func findingsListEventsByFindingUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] findings list- events- by- finding -id STRING -page INT -size INT

ListEventsByFinding implements List events by finding.
    -id STRING: Finding ID
    -page INT: 
    -size INT: 

Example:
    %[1]s findings list- events- by- finding --id "Facilis saepe." --page 3260669670521700226 --size 7771285467448147684
`, os.Args[0])
}

func findingsGetFindingMTTRUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] findings get- finding- mttr -id STRING

GetFindingMTTR implements Get finding MTTR.
    -id STRING: Finding ID

Example:
    %[1]s findings get- finding- mttr --id "Fuga dolorum ullam quos qui vitae dolorem."
`, os.Args[0])
}

func findingsPatchFindingUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] findings patch- finding -body JSON -id STRING -authorization STRING

PatchFinding implements Patch finding.
    -body JSON: 
    -id STRING: Finding ID
    -authorization STRING: 

Example:
    %[1]s findings patch- finding --body '{
      "status": "OPEN"
   }' --id "Esse aut animi et iusto." --authorization "Repellendus beatae officiis culpa magnam."
`, os.Args[0])
}

// issuesUsage displays the usage of the issues command and its subcommands.
func issuesUsage() {
	fmt.Fprintf(os.Stderr, `Issues endpoint.
Usage:
    %[1]s [globalflags] issues COMMAND [flags]

COMMAND:
    list- issues: ListIssues implements List issues.
    issues- summary: IssuesSummary implements Issues summary.
    get- issue: GetIssue implements Get issue.
    list- findings- by- issue: ListFindingsByIssue implements List findings by issue.
    get- finding- by- issue-,- target- and- affected- resource: GetFindingByIssueTargetAndAffectedResource implements Get finding by issue, target and affected resource.
    get- issue- mttr: GetIssueMTTR implements Get issue MTTR.

Additional help:
    %[1]s issues COMMAND --help
`, os.Args[0])
}
func issuesListIssuesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] issues list- issues -page INT -size INT

ListIssues implements List issues.
    -page INT: 
    -size INT: 

Example:
    %[1]s issues list- issues --page 5799931546838610515 --size 1192589839946177443
`, os.Args[0])
}

func issuesIssuesSummaryUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] issues issues- summary -team STRING -tag STRING -status STRING -sort-by STRING -page INT -size INT -identifiers STRING -labels STRING

IssuesSummary implements Issues summary.
    -team STRING: 
    -tag STRING: 
    -status STRING: 
    -sort-by STRING: 
    -page INT: 
    -size INT: 
    -identifiers STRING: 
    -labels STRING: 

Example:
    %[1]s issues issues- summary --team "Est hic voluptatem et ducimus odio deserunt." --tag "Impedit vel ut aliquid sed omnis facere." --status "Ratione vitae vel laboriosam dicta illum eos." --sort-by "Rem aspernatur voluptate alias asperiores et." --page 2243380696076476246 --size 6523659457382124033 --identifiers "Culpa tempora officia ea." --labels "Ea asperiores autem beatae ut et accusamus."
`, os.Args[0])
}

func issuesGetIssueUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] issues get- issue -id STRING

GetIssue implements Get issue.
    -id STRING: Issue ID

Example:
    %[1]s issues get- issue --id "Facere qui."
`, os.Args[0])
}

func issuesListFindingsByIssueUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] issues list- findings- by- issue -id STRING -status STRING -sort-by STRING -page INT -size INT -identifiers STRING -labels STRING

ListFindingsByIssue implements List findings by issue.
    -id STRING: Issue ID
    -status STRING: 
    -sort-by STRING: 
    -page INT: 
    -size INT: 
    -identifiers STRING: 
    -labels STRING: 

Example:
    %[1]s issues list- findings- by- issue --id "Dolorum ipsum molestiae et." --status "Aliquam asperiores quae iure assumenda quae." --sort-by "Tempore quam nemo consequatur." --page 1640014602349626277 --size 3854395147995169678 --identifiers "Et officia error maiores porro." --labels "Voluptas illum ipsum qui amet."
`, os.Args[0])
}

func issuesGetFindingByIssueTargetAndAffectedResourceUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] issues get- finding- by- issue-,- target- and- affected- resource -issue-id STRING -target-id STRING -resource STRING

GetFindingByIssueTargetAndAffectedResource implements Get finding by issue, target and affected resource.
    -issue-id STRING: Issue ID
    -target-id STRING: Target ID
    -resource STRING: Resource identifier

Example:
    %[1]s issues get- finding- by- issue-,- target- and- affected- resource --issue-id "Eius voluptatem explicabo sed nulla exercitationem." --target-id "Nobis totam reiciendis unde." --resource "Ut quisquam."
`, os.Args[0])
}

func issuesGetIssueMTTRUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] issues get- issue- mttr -id STRING

GetIssueMTTR implements Get issue MTTR.
    -id STRING: Issue ID

Example:
    %[1]s issues get- issue- mttr --id "Nihil ipsum iure."
`, os.Args[0])
}

// sourcesUsage displays the usage of the sources command and its subcommands.
func sourcesUsage() {
	fmt.Fprintf(os.Stderr, `Sources endpoint.
Usage:
    %[1]s [globalflags] sources COMMAND [flags]

COMMAND:
    list- sources: ListSources implements List sources.
    get- source: GetSource implements Get source.
    list- findings- by- source: ListFindingsBySource implements List findings by source.
    get- source- mttr: GetSourceMTTR implements Get source MTTR.

Additional help:
    %[1]s sources COMMAND --help
`, os.Args[0])
}
func sourcesListSourcesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] sources list- sources -page INT -size INT

ListSources implements List sources.
    -page INT: 
    -size INT: 

Example:
    %[1]s sources list- sources --page 4133579101694366922 --size 1012952901237327604
`, os.Args[0])
}

func sourcesGetSourceUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] sources get- source -id STRING

GetSource implements Get source.
    -id STRING: Source ID

Example:
    %[1]s sources get- source --id "Sint quia quam voluptate libero voluptatem nisi."
`, os.Args[0])
}

func sourcesListFindingsBySourceUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] sources list- findings- by- source -id STRING -status STRING -sort-by STRING -page INT -size INT

ListFindingsBySource implements List findings by source.
    -id STRING: Source ID
    -status STRING: 
    -sort-by STRING: 
    -page INT: 
    -size INT: 

Example:
    %[1]s sources list- findings- by- source --id "Possimus quia." --status "Nostrum consectetur dolorem." --sort-by "Non odit." --page 1634632014004372056 --size 601474940765931887
`, os.Args[0])
}

func sourcesGetSourceMTTRUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] sources get- source- mttr -id STRING

GetSourceMTTR implements Get source MTTR.
    -id STRING: Source ID

Example:
    %[1]s sources get- source- mttr --id "Doloremque rerum aut soluta."
`, os.Args[0])
}

// targetsUsage displays the usage of the targets command and its subcommands.
func targetsUsage() {
	fmt.Fprintf(os.Stderr, `Targets endpoint.
Usage:
    %[1]s [globalflags] targets COMMAND [flags]

COMMAND:
    list- targets: ListTargets implements List targets.
    targets- summary: TargetsSummary implements Targets summary.
    get- target: GetTarget implements Get target.
    create- target: CreateTarget implements Create target.
    list- findings- by- target: ListFindingsByTarget implements List findings by target.
    get- finding- by- target-,- issue- and- affected- resource: GetFindingByTargetIssueAndAffectedResource implements Get finding by target, issue and affected resource.
    get- target- mttr: GetTargetMTTR implements Get target MTTR.
    delete- target- team: DeleteTargetTeam implements Delete target team.
    delete- team: DeleteTeam implements Delete team.
    delete- target- tag: DeleteTargetTag implements Delete target tag.
    delete- tag: DeleteTag implements Delete tag.

Additional help:
    %[1]s targets COMMAND --help
`, os.Args[0])
}
func targetsListTargetsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] targets list- targets -team STRING -tag STRING -identifier STRING -page INT -size INT -identifiermatch BOOL -identifiers STRING

ListTargets implements List targets.
    -team STRING: 
    -tag STRING: 
    -identifier STRING: 
    -page INT: 
    -size INT: 
    -identifiermatch BOOL: 
    -identifiers STRING: 

Example:
    %[1]s targets list- targets --team "Qui aliquam quos." --tag "Dolorum sed facilis dolorum deleniti quasi." --identifier "Qui eius omnis deleniti id." --page 3887418404154997576 --size 2255925334066693679 --identifiermatch false --identifiers "Cupiditate sapiente dolorem id sit aliquam."
`, os.Args[0])
}

func targetsTargetsSummaryUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] targets targets- summary -team STRING -tag STRING -status STRING -sort-by STRING -page INT -size INT -identifiers STRING -labels STRING

TargetsSummary implements Targets summary.
    -team STRING: 
    -tag STRING: 
    -status STRING: 
    -sort-by STRING: 
    -page INT: 
    -size INT: 
    -identifiers STRING: 
    -labels STRING: 

Example:
    %[1]s targets targets- summary --team "Dolore sint facere aut nam." --tag "Est laborum qui inventore et voluptas voluptate." --status "Qui in velit et." --sort-by "Ad aspernatur quia sunt iusto tempore." --page 1047274489614358954 --size 2637444714652809884 --identifiers "Rerum facilis cupiditate." --labels "Quia ut ut quia facere tempora."
`, os.Args[0])
}

func targetsGetTargetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] targets get- target -id STRING

GetTarget implements Get target.
    -id STRING: Target ID

Example:
    %[1]s targets get- target --id "Et quas esse quo dolore aliquid sint."
`, os.Args[0])
}

func targetsCreateTargetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] targets create- target -body JSON

CreateTarget implements Create target.
    -body JSON: 

Example:
    %[1]s targets create- target --body '{
      "identifier": "www.example.com",
      "tags": [
         "security"
      ],
      "teams": [
         "e84cfeeb-7a2b-442b-b1cf-15af8b4a52d3"
      ]
   }'
`, os.Args[0])
}

func targetsListFindingsByTargetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] targets list- findings- by- target -id STRING -status STRING -sort-by STRING -page INT -size INT -labels STRING

ListFindingsByTarget implements List findings by target.
    -id STRING: Target ID
    -status STRING: 
    -sort-by STRING: 
    -page INT: 
    -size INT: 
    -labels STRING: 

Example:
    %[1]s targets list- findings- by- target --id "Sint aliquam officia autem omnis." --status "Illum sed odio modi." --sort-by "Culpa officia veniam perferendis nemo." --page 7814566860888117616 --size 15680589624701912 --labels "Officia eum adipisci porro laborum."
`, os.Args[0])
}

func targetsGetFindingByTargetIssueAndAffectedResourceUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] targets get- finding- by- target-,- issue- and- affected- resource -target-id STRING -issue-id STRING -resource STRING

GetFindingByTargetIssueAndAffectedResource implements Get finding by target, issue and affected resource.
    -target-id STRING: Target ID
    -issue-id STRING: Issue ID
    -resource STRING: Resource identifier

Example:
    %[1]s targets get- finding- by- target-,- issue- and- affected- resource --target-id "Nemo et dolores blanditiis nisi." --issue-id "Sint ut asperiores fuga saepe quia possimus." --resource "Qui assumenda facere necessitatibus nemo non ipsam."
`, os.Args[0])
}

func targetsGetTargetMTTRUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] targets get- target- mttr -id STRING

GetTargetMTTR implements Get target MTTR.
    -id STRING: Target ID

Example:
    %[1]s targets get- target- mttr --id "Facilis non porro sed sed."
`, os.Args[0])
}

func targetsDeleteTargetTeamUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] targets delete- target- team -target-id STRING -team STRING -auth STRING

DeleteTargetTeam implements Delete target team.
    -target-id STRING: Target ID
    -team STRING: Team ID
    -auth STRING: 

Example:
    %[1]s targets delete- target- team --target-id "Dicta quos." --team "Voluptas minus illum enim." --auth "TEAM team=myteam"
`, os.Args[0])
}

func targetsDeleteTeamUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] targets delete- team -team STRING -auth STRING

DeleteTeam implements Delete team.
    -team STRING: Team ID
    -auth STRING: 

Example:
    %[1]s targets delete- team --team "Aliquam magni iusto aliquid facere incidunt dicta." --auth "TEAM team=myteam"
`, os.Args[0])
}

func targetsDeleteTargetTagUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] targets delete- target- tag -target-id STRING -tag STRING -auth STRING

DeleteTargetTag implements Delete target tag.
    -target-id STRING: Target ID
    -tag STRING: Tag
    -auth STRING: 

Example:
    %[1]s targets delete- target- tag --target-id "Illo quibusdam cumque dolor." --tag "Porro velit omnis iste amet natus sit." --auth "TEAM team=myteam"
`, os.Args[0])
}

func targetsDeleteTagUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] targets delete- tag -tag STRING -auth STRING

DeleteTag implements Delete tag.
    -tag STRING: Tag
    -auth STRING: 

Example:
    %[1]s targets delete- tag --tag "Deleniti vel." --auth "TEAM team=myteam"
`, os.Args[0])
}
