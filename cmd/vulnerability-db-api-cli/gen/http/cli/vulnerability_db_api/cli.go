// Code generated by goa v3.5.2, DO NOT EDIT.
//
// vulnerability-db-api HTTP client CLI support package
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package cli

import (
	"flag"
	"fmt"
	"net/http"
	"os"

	eventsc "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/http/events/client"
	findingsc "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/http/findings/client"
	issuesc "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/http/issues/client"
	labelsc "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/http/labels/client"
	sourcesc "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/http/sources/client"
	statsc "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/http/stats/client"
	targetsc "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/http/targets/client"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// UsageCommands returns the set of commands and sub-commands using the format
//
//    command (subcommand1|subcommand2|...)
//
func UsageCommands() string {
	return `events list- finding- events
labels list- labels
stats (get- size- stats|get- open- issues- stats|get- fixed- issues- stats|get- stats- assets- per- severity|get- issues- stats|get- stats- mttr|get- stats- exposure|get- stats- current- exposure)
findings (list- findings|get- finding|list- events- by- finding|get- finding- mttr|patch- finding)
issues (list- issues|issues- summary|get- issue|list- findings- by- issue|get- finding- by- issue-,- target- and- affected- resource|get- issue- mttr)
sources (list- sources|get- source|list- findings- by- source|get- source- mttr)
targets (list- targets|targets- summary|get- target|create- target|list- findings- by- target|get- finding- by- target-,- issue- and- affected- resource|get- target- mttr|delete- target- tag|delete- tag)
`
}

// UsageExamples produces an example of a valid invocation of the CLI tool.
func UsageExamples() string {
	return os.Args[0] + ` events list- finding- events --min-score 5879637287524651712 --max-score 2615216803934210996 --min-date "Sapiente dicta voluptatum adipisci." --max-date "Animi illum minus nostrum numquam qui blanditiis." --page 1116792817448347821 --size 1682394529179201435` + "\n" +
		os.Args[0] + ` labels list- labels --tag "Doloribus harum modi." --status "Animi dignissimos laborum quod doloribus." --at-date "Et consequatur totam et." --min-date "Cumque deleniti quo laborum." --max-date "Ut soluta officia fugiat ab delectus." --identifiers "Odit quis cum consequatur illo saepe."` + "\n" +
		os.Args[0] + ` stats get- size- stats` + "\n" +
		os.Args[0] + ` findings list- findings --tag "Non modi dolorum explicabo non temporibus alias." --status "Praesentium mollitia ex fugiat quibusdam voluptatem excepturi." --min-score 8413656132824002010 --max-score 4388460377214520314 --at-date "Omnis deserunt." --min-date "Et in." --max-date "Est possimus dolorem ex neque." --sort-by "Sequi sed ea." --page 3642797880115460207 --size 8837006597308256152 --identifier "Est voluptatem est incidunt dicta vel." --identifiermatch true --identifiers "Ut ut unde autem beatae iste in." --labels "Incidunt porro adipisci."` + "\n" +
		os.Args[0] + ` issues list- issues --page 8549737383041950286 --size 1505538389617963040` + "\n" +
		""
}

// ParseEndpoint returns the endpoint and payload as specified on the command
// line.
func ParseEndpoint(
	scheme, host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restore bool,
) (goa.Endpoint, interface{}, error) {
	var (
		eventsFlags = flag.NewFlagSet("events", flag.ContinueOnError)

		eventsListFindingEventsFlags        = flag.NewFlagSet("list- finding- events", flag.ExitOnError)
		eventsListFindingEventsMinScoreFlag = eventsListFindingEventsFlags.String("min-score", "", "")
		eventsListFindingEventsMaxScoreFlag = eventsListFindingEventsFlags.String("max-score", "", "")
		eventsListFindingEventsMinDateFlag  = eventsListFindingEventsFlags.String("min-date", "", "")
		eventsListFindingEventsMaxDateFlag  = eventsListFindingEventsFlags.String("max-date", "", "")
		eventsListFindingEventsPageFlag     = eventsListFindingEventsFlags.String("page", "", "")
		eventsListFindingEventsSizeFlag     = eventsListFindingEventsFlags.String("size", "", "")

		labelsFlags = flag.NewFlagSet("labels", flag.ContinueOnError)

		labelsListLabelsFlags           = flag.NewFlagSet("list- labels", flag.ExitOnError)
		labelsListLabelsTagFlag         = labelsListLabelsFlags.String("tag", "", "")
		labelsListLabelsStatusFlag      = labelsListLabelsFlags.String("status", "", "")
		labelsListLabelsAtDateFlag      = labelsListLabelsFlags.String("at-date", "", "")
		labelsListLabelsMinDateFlag     = labelsListLabelsFlags.String("min-date", "", "")
		labelsListLabelsMaxDateFlag     = labelsListLabelsFlags.String("max-date", "", "")
		labelsListLabelsIdentifiersFlag = labelsListLabelsFlags.String("identifiers", "", "")

		statsFlags = flag.NewFlagSet("stats", flag.ContinueOnError)

		statsGetSizeStatsFlags = flag.NewFlagSet("get- size- stats", flag.ExitOnError)

		statsGetOpenIssuesStatsFlags           = flag.NewFlagSet("get- open- issues- stats", flag.ExitOnError)
		statsGetOpenIssuesStatsTagFlag         = statsGetOpenIssuesStatsFlags.String("tag", "", "")
		statsGetOpenIssuesStatsTagsFlag        = statsGetOpenIssuesStatsFlags.String("tags", "", "")
		statsGetOpenIssuesStatsMinDateFlag     = statsGetOpenIssuesStatsFlags.String("min-date", "", "")
		statsGetOpenIssuesStatsMaxDateFlag     = statsGetOpenIssuesStatsFlags.String("max-date", "", "")
		statsGetOpenIssuesStatsAtDateFlag      = statsGetOpenIssuesStatsFlags.String("at-date", "", "")
		statsGetOpenIssuesStatsIdentifiersFlag = statsGetOpenIssuesStatsFlags.String("identifiers", "", "")
		statsGetOpenIssuesStatsLabelsFlag      = statsGetOpenIssuesStatsFlags.String("labels", "", "")

		statsGetFixedIssuesStatsFlags           = flag.NewFlagSet("get- fixed- issues- stats", flag.ExitOnError)
		statsGetFixedIssuesStatsTagFlag         = statsGetFixedIssuesStatsFlags.String("tag", "", "")
		statsGetFixedIssuesStatsTagsFlag        = statsGetFixedIssuesStatsFlags.String("tags", "", "")
		statsGetFixedIssuesStatsMinDateFlag     = statsGetFixedIssuesStatsFlags.String("min-date", "", "")
		statsGetFixedIssuesStatsMaxDateFlag     = statsGetFixedIssuesStatsFlags.String("max-date", "", "")
		statsGetFixedIssuesStatsAtDateFlag      = statsGetFixedIssuesStatsFlags.String("at-date", "", "")
		statsGetFixedIssuesStatsIdentifiersFlag = statsGetFixedIssuesStatsFlags.String("identifiers", "", "")
		statsGetFixedIssuesStatsLabelsFlag      = statsGetFixedIssuesStatsFlags.String("labels", "", "")

		statsGetStatsAssetsPerSeverityFlags           = flag.NewFlagSet("get- stats- assets- per- severity", flag.ExitOnError)
		statsGetStatsAssetsPerSeverityTagFlag         = statsGetStatsAssetsPerSeverityFlags.String("tag", "", "")
		statsGetStatsAssetsPerSeverityTagsFlag        = statsGetStatsAssetsPerSeverityFlags.String("tags", "", "")
		statsGetStatsAssetsPerSeverityIdentifiersFlag = statsGetStatsAssetsPerSeverityFlags.String("identifiers", "", "")
		statsGetStatsAssetsPerSeverityLabelsFlag      = statsGetStatsAssetsPerSeverityFlags.String("labels", "", "")

		statsGetIssuesStatsFlags        = flag.NewFlagSet("get- issues- stats", flag.ExitOnError)
		statsGetIssuesStatsMinDateFlag  = statsGetIssuesStatsFlags.String("min-date", "", "")
		statsGetIssuesStatsMaxDateFlag  = statsGetIssuesStatsFlags.String("max-date", "", "")
		statsGetIssuesStatsMinScoreFlag = statsGetIssuesStatsFlags.String("min-score", "", "")
		statsGetIssuesStatsMaxScoreFlag = statsGetIssuesStatsFlags.String("max-score", "", "")

		statsGetStatsMTTRFlags       = flag.NewFlagSet("get- stats- mttr", flag.ExitOnError)
		statsGetStatsMTTRTagFlag     = statsGetStatsMTTRFlags.String("tag", "", "")
		statsGetStatsMTTRTagsFlag    = statsGetStatsMTTRFlags.String("tags", "", "")
		statsGetStatsMTTRMinDateFlag = statsGetStatsMTTRFlags.String("min-date", "", "")
		statsGetStatsMTTRMaxDateFlag = statsGetStatsMTTRFlags.String("max-date", "", "")
		statsGetStatsMTTRLabelsFlag  = statsGetStatsMTTRFlags.String("labels", "", "")

		statsGetStatsExposureFlags        = flag.NewFlagSet("get- stats- exposure", flag.ExitOnError)
		statsGetStatsExposureTagFlag      = statsGetStatsExposureFlags.String("tag", "", "")
		statsGetStatsExposureTagsFlag     = statsGetStatsExposureFlags.String("tags", "", "")
		statsGetStatsExposureAtDateFlag   = statsGetStatsExposureFlags.String("at-date", "", "")
		statsGetStatsExposureMinScoreFlag = statsGetStatsExposureFlags.String("min-score", "", "")
		statsGetStatsExposureMaxScoreFlag = statsGetStatsExposureFlags.String("max-score", "", "")

		statsGetStatsCurrentExposureFlags        = flag.NewFlagSet("get- stats- current- exposure", flag.ExitOnError)
		statsGetStatsCurrentExposureTagFlag      = statsGetStatsCurrentExposureFlags.String("tag", "", "")
		statsGetStatsCurrentExposureTagsFlag     = statsGetStatsCurrentExposureFlags.String("tags", "", "")
		statsGetStatsCurrentExposureMinScoreFlag = statsGetStatsCurrentExposureFlags.String("min-score", "", "")
		statsGetStatsCurrentExposureMaxScoreFlag = statsGetStatsCurrentExposureFlags.String("max-score", "", "")
		statsGetStatsCurrentExposureLabelsFlag   = statsGetStatsCurrentExposureFlags.String("labels", "", "")

		findingsFlags = flag.NewFlagSet("findings", flag.ContinueOnError)

		findingsListFindingsFlags               = flag.NewFlagSet("list- findings", flag.ExitOnError)
		findingsListFindingsTagFlag             = findingsListFindingsFlags.String("tag", "", "")
		findingsListFindingsStatusFlag          = findingsListFindingsFlags.String("status", "", "")
		findingsListFindingsMinScoreFlag        = findingsListFindingsFlags.String("min-score", "", "")
		findingsListFindingsMaxScoreFlag        = findingsListFindingsFlags.String("max-score", "", "")
		findingsListFindingsAtDateFlag          = findingsListFindingsFlags.String("at-date", "", "")
		findingsListFindingsMinDateFlag         = findingsListFindingsFlags.String("min-date", "", "")
		findingsListFindingsMaxDateFlag         = findingsListFindingsFlags.String("max-date", "", "")
		findingsListFindingsSortByFlag          = findingsListFindingsFlags.String("sort-by", "", "")
		findingsListFindingsPageFlag            = findingsListFindingsFlags.String("page", "", "")
		findingsListFindingsSizeFlag            = findingsListFindingsFlags.String("size", "", "")
		findingsListFindingsIdentifierFlag      = findingsListFindingsFlags.String("identifier", "", "")
		findingsListFindingsIdentifiermatchFlag = findingsListFindingsFlags.String("identifiermatch", "", "")
		findingsListFindingsIdentifiersFlag     = findingsListFindingsFlags.String("identifiers", "", "")
		findingsListFindingsLabelsFlag          = findingsListFindingsFlags.String("labels", "", "")

		findingsGetFindingFlags  = flag.NewFlagSet("get- finding", flag.ExitOnError)
		findingsGetFindingIDFlag = findingsGetFindingFlags.String("id", "REQUIRED", "Finding ID")

		findingsListEventsByFindingFlags    = flag.NewFlagSet("list- events- by- finding", flag.ExitOnError)
		findingsListEventsByFindingIDFlag   = findingsListEventsByFindingFlags.String("id", "REQUIRED", "Finding ID")
		findingsListEventsByFindingPageFlag = findingsListEventsByFindingFlags.String("page", "", "")
		findingsListEventsByFindingSizeFlag = findingsListEventsByFindingFlags.String("size", "", "")

		findingsGetFindingMTTRFlags  = flag.NewFlagSet("get- finding- mttr", flag.ExitOnError)
		findingsGetFindingMTTRIDFlag = findingsGetFindingMTTRFlags.String("id", "REQUIRED", "Finding ID")

		findingsPatchFindingFlags             = flag.NewFlagSet("patch- finding", flag.ExitOnError)
		findingsPatchFindingBodyFlag          = findingsPatchFindingFlags.String("body", "REQUIRED", "")
		findingsPatchFindingIDFlag            = findingsPatchFindingFlags.String("id", "REQUIRED", "Finding ID")
		findingsPatchFindingAuthorizationFlag = findingsPatchFindingFlags.String("authorization", "", "")

		issuesFlags = flag.NewFlagSet("issues", flag.ContinueOnError)

		issuesListIssuesFlags    = flag.NewFlagSet("list- issues", flag.ExitOnError)
		issuesListIssuesPageFlag = issuesListIssuesFlags.String("page", "", "")
		issuesListIssuesSizeFlag = issuesListIssuesFlags.String("size", "", "")

		issuesIssuesSummaryFlags           = flag.NewFlagSet("issues- summary", flag.ExitOnError)
		issuesIssuesSummaryTagFlag         = issuesIssuesSummaryFlags.String("tag", "", "")
		issuesIssuesSummaryStatusFlag      = issuesIssuesSummaryFlags.String("status", "", "")
		issuesIssuesSummarySortByFlag      = issuesIssuesSummaryFlags.String("sort-by", "", "")
		issuesIssuesSummaryPageFlag        = issuesIssuesSummaryFlags.String("page", "", "")
		issuesIssuesSummarySizeFlag        = issuesIssuesSummaryFlags.String("size", "", "")
		issuesIssuesSummaryIdentifiersFlag = issuesIssuesSummaryFlags.String("identifiers", "", "")
		issuesIssuesSummaryLabelsFlag      = issuesIssuesSummaryFlags.String("labels", "", "")

		issuesGetIssueFlags  = flag.NewFlagSet("get- issue", flag.ExitOnError)
		issuesGetIssueIDFlag = issuesGetIssueFlags.String("id", "REQUIRED", "Issue ID")

		issuesListFindingsByIssueFlags           = flag.NewFlagSet("list- findings- by- issue", flag.ExitOnError)
		issuesListFindingsByIssueIDFlag          = issuesListFindingsByIssueFlags.String("id", "REQUIRED", "Issue ID")
		issuesListFindingsByIssueStatusFlag      = issuesListFindingsByIssueFlags.String("status", "", "")
		issuesListFindingsByIssueSortByFlag      = issuesListFindingsByIssueFlags.String("sort-by", "", "")
		issuesListFindingsByIssuePageFlag        = issuesListFindingsByIssueFlags.String("page", "", "")
		issuesListFindingsByIssueSizeFlag        = issuesListFindingsByIssueFlags.String("size", "", "")
		issuesListFindingsByIssueIdentifiersFlag = issuesListFindingsByIssueFlags.String("identifiers", "", "")
		issuesListFindingsByIssueLabelsFlag      = issuesListFindingsByIssueFlags.String("labels", "", "")

		issuesGetFindingByIssueTargetAndAffectedResourceFlags        = flag.NewFlagSet("get- finding- by- issue-,- target- and- affected- resource", flag.ExitOnError)
		issuesGetFindingByIssueTargetAndAffectedResourceIssueIDFlag  = issuesGetFindingByIssueTargetAndAffectedResourceFlags.String("issue-id", "REQUIRED", "Issue ID")
		issuesGetFindingByIssueTargetAndAffectedResourceTargetIDFlag = issuesGetFindingByIssueTargetAndAffectedResourceFlags.String("target-id", "REQUIRED", "Target ID")
		issuesGetFindingByIssueTargetAndAffectedResourceResourceFlag = issuesGetFindingByIssueTargetAndAffectedResourceFlags.String("resource", "REQUIRED", "Resource identifier")

		issuesGetIssueMTTRFlags  = flag.NewFlagSet("get- issue- mttr", flag.ExitOnError)
		issuesGetIssueMTTRIDFlag = issuesGetIssueMTTRFlags.String("id", "REQUIRED", "Issue ID")

		sourcesFlags = flag.NewFlagSet("sources", flag.ContinueOnError)

		sourcesListSourcesFlags    = flag.NewFlagSet("list- sources", flag.ExitOnError)
		sourcesListSourcesPageFlag = sourcesListSourcesFlags.String("page", "", "")
		sourcesListSourcesSizeFlag = sourcesListSourcesFlags.String("size", "", "")

		sourcesGetSourceFlags  = flag.NewFlagSet("get- source", flag.ExitOnError)
		sourcesGetSourceIDFlag = sourcesGetSourceFlags.String("id", "REQUIRED", "Source ID")

		sourcesListFindingsBySourceFlags      = flag.NewFlagSet("list- findings- by- source", flag.ExitOnError)
		sourcesListFindingsBySourceIDFlag     = sourcesListFindingsBySourceFlags.String("id", "REQUIRED", "Source ID")
		sourcesListFindingsBySourceStatusFlag = sourcesListFindingsBySourceFlags.String("status", "", "")
		sourcesListFindingsBySourceSortByFlag = sourcesListFindingsBySourceFlags.String("sort-by", "", "")
		sourcesListFindingsBySourcePageFlag   = sourcesListFindingsBySourceFlags.String("page", "", "")
		sourcesListFindingsBySourceSizeFlag   = sourcesListFindingsBySourceFlags.String("size", "", "")

		sourcesGetSourceMTTRFlags  = flag.NewFlagSet("get- source- mttr", flag.ExitOnError)
		sourcesGetSourceMTTRIDFlag = sourcesGetSourceMTTRFlags.String("id", "REQUIRED", "Source ID")

		targetsFlags = flag.NewFlagSet("targets", flag.ContinueOnError)

		targetsListTargetsFlags               = flag.NewFlagSet("list- targets", flag.ExitOnError)
		targetsListTargetsTagFlag             = targetsListTargetsFlags.String("tag", "", "")
		targetsListTargetsIdentifierFlag      = targetsListTargetsFlags.String("identifier", "", "")
		targetsListTargetsPageFlag            = targetsListTargetsFlags.String("page", "", "")
		targetsListTargetsSizeFlag            = targetsListTargetsFlags.String("size", "", "")
		targetsListTargetsIdentifiermatchFlag = targetsListTargetsFlags.String("identifiermatch", "", "")
		targetsListTargetsIdentifiersFlag     = targetsListTargetsFlags.String("identifiers", "", "")

		targetsTargetsSummaryFlags           = flag.NewFlagSet("targets- summary", flag.ExitOnError)
		targetsTargetsSummaryTagFlag         = targetsTargetsSummaryFlags.String("tag", "", "")
		targetsTargetsSummaryStatusFlag      = targetsTargetsSummaryFlags.String("status", "", "")
		targetsTargetsSummarySortByFlag      = targetsTargetsSummaryFlags.String("sort-by", "", "")
		targetsTargetsSummaryPageFlag        = targetsTargetsSummaryFlags.String("page", "", "")
		targetsTargetsSummarySizeFlag        = targetsTargetsSummaryFlags.String("size", "", "")
		targetsTargetsSummaryIdentifiersFlag = targetsTargetsSummaryFlags.String("identifiers", "", "")
		targetsTargetsSummaryLabelsFlag      = targetsTargetsSummaryFlags.String("labels", "", "")

		targetsGetTargetFlags  = flag.NewFlagSet("get- target", flag.ExitOnError)
		targetsGetTargetIDFlag = targetsGetTargetFlags.String("id", "REQUIRED", "Target ID")

		targetsCreateTargetFlags    = flag.NewFlagSet("create- target", flag.ExitOnError)
		targetsCreateTargetBodyFlag = targetsCreateTargetFlags.String("body", "REQUIRED", "")

		targetsListFindingsByTargetFlags      = flag.NewFlagSet("list- findings- by- target", flag.ExitOnError)
		targetsListFindingsByTargetIDFlag     = targetsListFindingsByTargetFlags.String("id", "REQUIRED", "Target ID")
		targetsListFindingsByTargetStatusFlag = targetsListFindingsByTargetFlags.String("status", "", "")
		targetsListFindingsByTargetSortByFlag = targetsListFindingsByTargetFlags.String("sort-by", "", "")
		targetsListFindingsByTargetPageFlag   = targetsListFindingsByTargetFlags.String("page", "", "")
		targetsListFindingsByTargetSizeFlag   = targetsListFindingsByTargetFlags.String("size", "", "")
		targetsListFindingsByTargetLabelsFlag = targetsListFindingsByTargetFlags.String("labels", "", "")

		targetsGetFindingByTargetIssueAndAffectedResourceFlags        = flag.NewFlagSet("get- finding- by- target-,- issue- and- affected- resource", flag.ExitOnError)
		targetsGetFindingByTargetIssueAndAffectedResourceTargetIDFlag = targetsGetFindingByTargetIssueAndAffectedResourceFlags.String("target-id", "REQUIRED", "Target ID")
		targetsGetFindingByTargetIssueAndAffectedResourceIssueIDFlag  = targetsGetFindingByTargetIssueAndAffectedResourceFlags.String("issue-id", "REQUIRED", "Issue ID")
		targetsGetFindingByTargetIssueAndAffectedResourceResourceFlag = targetsGetFindingByTargetIssueAndAffectedResourceFlags.String("resource", "REQUIRED", "Resource identifier")

		targetsGetTargetMTTRFlags  = flag.NewFlagSet("get- target- mttr", flag.ExitOnError)
		targetsGetTargetMTTRIDFlag = targetsGetTargetMTTRFlags.String("id", "REQUIRED", "Target ID")

		targetsDeleteTargetTagFlags        = flag.NewFlagSet("delete- target- tag", flag.ExitOnError)
		targetsDeleteTargetTagTargetIDFlag = targetsDeleteTargetTagFlags.String("target-id", "REQUIRED", "Target ID")
		targetsDeleteTargetTagTagFlag      = targetsDeleteTargetTagFlags.String("tag", "REQUIRED", "Tag")
		targetsDeleteTargetTagAuthFlag     = targetsDeleteTargetTagFlags.String("auth", "REQUIRED", "")

		targetsDeleteTagFlags    = flag.NewFlagSet("delete- tag", flag.ExitOnError)
		targetsDeleteTagTagFlag  = targetsDeleteTagFlags.String("tag", "REQUIRED", "Tag")
		targetsDeleteTagAuthFlag = targetsDeleteTagFlags.String("auth", "REQUIRED", "")
	)
	eventsFlags.Usage = eventsUsage
	eventsListFindingEventsFlags.Usage = eventsListFindingEventsUsage

	labelsFlags.Usage = labelsUsage
	labelsListLabelsFlags.Usage = labelsListLabelsUsage

	statsFlags.Usage = statsUsage
	statsGetSizeStatsFlags.Usage = statsGetSizeStatsUsage
	statsGetOpenIssuesStatsFlags.Usage = statsGetOpenIssuesStatsUsage
	statsGetFixedIssuesStatsFlags.Usage = statsGetFixedIssuesStatsUsage
	statsGetStatsAssetsPerSeverityFlags.Usage = statsGetStatsAssetsPerSeverityUsage
	statsGetIssuesStatsFlags.Usage = statsGetIssuesStatsUsage
	statsGetStatsMTTRFlags.Usage = statsGetStatsMTTRUsage
	statsGetStatsExposureFlags.Usage = statsGetStatsExposureUsage
	statsGetStatsCurrentExposureFlags.Usage = statsGetStatsCurrentExposureUsage

	findingsFlags.Usage = findingsUsage
	findingsListFindingsFlags.Usage = findingsListFindingsUsage
	findingsGetFindingFlags.Usage = findingsGetFindingUsage
	findingsListEventsByFindingFlags.Usage = findingsListEventsByFindingUsage
	findingsGetFindingMTTRFlags.Usage = findingsGetFindingMTTRUsage
	findingsPatchFindingFlags.Usage = findingsPatchFindingUsage

	issuesFlags.Usage = issuesUsage
	issuesListIssuesFlags.Usage = issuesListIssuesUsage
	issuesIssuesSummaryFlags.Usage = issuesIssuesSummaryUsage
	issuesGetIssueFlags.Usage = issuesGetIssueUsage
	issuesListFindingsByIssueFlags.Usage = issuesListFindingsByIssueUsage
	issuesGetFindingByIssueTargetAndAffectedResourceFlags.Usage = issuesGetFindingByIssueTargetAndAffectedResourceUsage
	issuesGetIssueMTTRFlags.Usage = issuesGetIssueMTTRUsage

	sourcesFlags.Usage = sourcesUsage
	sourcesListSourcesFlags.Usage = sourcesListSourcesUsage
	sourcesGetSourceFlags.Usage = sourcesGetSourceUsage
	sourcesListFindingsBySourceFlags.Usage = sourcesListFindingsBySourceUsage
	sourcesGetSourceMTTRFlags.Usage = sourcesGetSourceMTTRUsage

	targetsFlags.Usage = targetsUsage
	targetsListTargetsFlags.Usage = targetsListTargetsUsage
	targetsTargetsSummaryFlags.Usage = targetsTargetsSummaryUsage
	targetsGetTargetFlags.Usage = targetsGetTargetUsage
	targetsCreateTargetFlags.Usage = targetsCreateTargetUsage
	targetsListFindingsByTargetFlags.Usage = targetsListFindingsByTargetUsage
	targetsGetFindingByTargetIssueAndAffectedResourceFlags.Usage = targetsGetFindingByTargetIssueAndAffectedResourceUsage
	targetsGetTargetMTTRFlags.Usage = targetsGetTargetMTTRUsage
	targetsDeleteTargetTagFlags.Usage = targetsDeleteTargetTagUsage
	targetsDeleteTagFlags.Usage = targetsDeleteTagUsage

	if err := flag.CommandLine.Parse(os.Args[1:]); err != nil {
		return nil, nil, err
	}

	if flag.NArg() < 2 { // two non flag args are required: SERVICE and ENDPOINT (aka COMMAND)
		return nil, nil, fmt.Errorf("not enough arguments")
	}

	var (
		svcn string
		svcf *flag.FlagSet
	)
	{
		svcn = flag.Arg(0)
		switch svcn {
		case "events":
			svcf = eventsFlags
		case "labels":
			svcf = labelsFlags
		case "stats":
			svcf = statsFlags
		case "findings":
			svcf = findingsFlags
		case "issues":
			svcf = issuesFlags
		case "sources":
			svcf = sourcesFlags
		case "targets":
			svcf = targetsFlags
		default:
			return nil, nil, fmt.Errorf("unknown service %q", svcn)
		}
	}
	if err := svcf.Parse(flag.Args()[1:]); err != nil {
		return nil, nil, err
	}

	var (
		epn string
		epf *flag.FlagSet
	)
	{
		epn = svcf.Arg(0)
		switch svcn {
		case "events":
			switch epn {
			case "list- finding- events":
				epf = eventsListFindingEventsFlags

			}

		case "labels":
			switch epn {
			case "list- labels":
				epf = labelsListLabelsFlags

			}

		case "stats":
			switch epn {
			case "get- size- stats":
				epf = statsGetSizeStatsFlags

			case "get- open- issues- stats":
				epf = statsGetOpenIssuesStatsFlags

			case "get- fixed- issues- stats":
				epf = statsGetFixedIssuesStatsFlags

			case "get- stats- assets- per- severity":
				epf = statsGetStatsAssetsPerSeverityFlags

			case "get- issues- stats":
				epf = statsGetIssuesStatsFlags

			case "get- stats- mttr":
				epf = statsGetStatsMTTRFlags

			case "get- stats- exposure":
				epf = statsGetStatsExposureFlags

			case "get- stats- current- exposure":
				epf = statsGetStatsCurrentExposureFlags

			}

		case "findings":
			switch epn {
			case "list- findings":
				epf = findingsListFindingsFlags

			case "get- finding":
				epf = findingsGetFindingFlags

			case "list- events- by- finding":
				epf = findingsListEventsByFindingFlags

			case "get- finding- mttr":
				epf = findingsGetFindingMTTRFlags

			case "patch- finding":
				epf = findingsPatchFindingFlags

			}

		case "issues":
			switch epn {
			case "list- issues":
				epf = issuesListIssuesFlags

			case "issues- summary":
				epf = issuesIssuesSummaryFlags

			case "get- issue":
				epf = issuesGetIssueFlags

			case "list- findings- by- issue":
				epf = issuesListFindingsByIssueFlags

			case "get- finding- by- issue-,- target- and- affected- resource":
				epf = issuesGetFindingByIssueTargetAndAffectedResourceFlags

			case "get- issue- mttr":
				epf = issuesGetIssueMTTRFlags

			}

		case "sources":
			switch epn {
			case "list- sources":
				epf = sourcesListSourcesFlags

			case "get- source":
				epf = sourcesGetSourceFlags

			case "list- findings- by- source":
				epf = sourcesListFindingsBySourceFlags

			case "get- source- mttr":
				epf = sourcesGetSourceMTTRFlags

			}

		case "targets":
			switch epn {
			case "list- targets":
				epf = targetsListTargetsFlags

			case "targets- summary":
				epf = targetsTargetsSummaryFlags

			case "get- target":
				epf = targetsGetTargetFlags

			case "create- target":
				epf = targetsCreateTargetFlags

			case "list- findings- by- target":
				epf = targetsListFindingsByTargetFlags

			case "get- finding- by- target-,- issue- and- affected- resource":
				epf = targetsGetFindingByTargetIssueAndAffectedResourceFlags

			case "get- target- mttr":
				epf = targetsGetTargetMTTRFlags

			case "delete- target- tag":
				epf = targetsDeleteTargetTagFlags

			case "delete- tag":
				epf = targetsDeleteTagFlags

			}

		}
	}
	if epf == nil {
		return nil, nil, fmt.Errorf("unknown %q endpoint %q", svcn, epn)
	}

	// Parse endpoint flags if any
	if svcf.NArg() > 1 {
		if err := epf.Parse(svcf.Args()[1:]); err != nil {
			return nil, nil, err
		}
	}

	var (
		data     interface{}
		endpoint goa.Endpoint
		err      error
	)
	{
		switch svcn {
		case "events":
			c := eventsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list- finding- events":
				endpoint = c.ListFindingEvents()
				data, err = eventsc.BuildListFindingEventsPayload(*eventsListFindingEventsMinScoreFlag, *eventsListFindingEventsMaxScoreFlag, *eventsListFindingEventsMinDateFlag, *eventsListFindingEventsMaxDateFlag, *eventsListFindingEventsPageFlag, *eventsListFindingEventsSizeFlag)
			}
		case "labels":
			c := labelsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list- labels":
				endpoint = c.ListLabels()
				data, err = labelsc.BuildListLabelsPayload(*labelsListLabelsTagFlag, *labelsListLabelsStatusFlag, *labelsListLabelsAtDateFlag, *labelsListLabelsMinDateFlag, *labelsListLabelsMaxDateFlag, *labelsListLabelsIdentifiersFlag)
			}
		case "stats":
			c := statsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "get- size- stats":
				endpoint = c.GetSizeStats()
				data = nil
			case "get- open- issues- stats":
				endpoint = c.GetOpenIssuesStats()
				data, err = statsc.BuildGetOpenIssuesStatsPayload(*statsGetOpenIssuesStatsTagFlag, *statsGetOpenIssuesStatsTagsFlag, *statsGetOpenIssuesStatsMinDateFlag, *statsGetOpenIssuesStatsMaxDateFlag, *statsGetOpenIssuesStatsAtDateFlag, *statsGetOpenIssuesStatsIdentifiersFlag, *statsGetOpenIssuesStatsLabelsFlag)
			case "get- fixed- issues- stats":
				endpoint = c.GetFixedIssuesStats()
				data, err = statsc.BuildGetFixedIssuesStatsPayload(*statsGetFixedIssuesStatsTagFlag, *statsGetFixedIssuesStatsTagsFlag, *statsGetFixedIssuesStatsMinDateFlag, *statsGetFixedIssuesStatsMaxDateFlag, *statsGetFixedIssuesStatsAtDateFlag, *statsGetFixedIssuesStatsIdentifiersFlag, *statsGetFixedIssuesStatsLabelsFlag)
			case "get- stats- assets- per- severity":
				endpoint = c.GetStatsAssetsPerSeverity()
				data, err = statsc.BuildGetStatsAssetsPerSeverityPayload(*statsGetStatsAssetsPerSeverityTagFlag, *statsGetStatsAssetsPerSeverityTagsFlag, *statsGetStatsAssetsPerSeverityIdentifiersFlag, *statsGetStatsAssetsPerSeverityLabelsFlag)
			case "get- issues- stats":
				endpoint = c.GetIssuesStats()
				data, err = statsc.BuildGetIssuesStatsPayload(*statsGetIssuesStatsMinDateFlag, *statsGetIssuesStatsMaxDateFlag, *statsGetIssuesStatsMinScoreFlag, *statsGetIssuesStatsMaxScoreFlag)
			case "get- stats- mttr":
				endpoint = c.GetStatsMTTR()
				data, err = statsc.BuildGetStatsMTTRPayload(*statsGetStatsMTTRTagFlag, *statsGetStatsMTTRTagsFlag, *statsGetStatsMTTRMinDateFlag, *statsGetStatsMTTRMaxDateFlag, *statsGetStatsMTTRLabelsFlag)
			case "get- stats- exposure":
				endpoint = c.GetStatsExposure()
				data, err = statsc.BuildGetStatsExposurePayload(*statsGetStatsExposureTagFlag, *statsGetStatsExposureTagsFlag, *statsGetStatsExposureAtDateFlag, *statsGetStatsExposureMinScoreFlag, *statsGetStatsExposureMaxScoreFlag)
			case "get- stats- current- exposure":
				endpoint = c.GetStatsCurrentExposure()
				data, err = statsc.BuildGetStatsCurrentExposurePayload(*statsGetStatsCurrentExposureTagFlag, *statsGetStatsCurrentExposureTagsFlag, *statsGetStatsCurrentExposureMinScoreFlag, *statsGetStatsCurrentExposureMaxScoreFlag, *statsGetStatsCurrentExposureLabelsFlag)
			}
		case "findings":
			c := findingsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list- findings":
				endpoint = c.ListFindings()
				data, err = findingsc.BuildListFindingsPayload(*findingsListFindingsTagFlag, *findingsListFindingsStatusFlag, *findingsListFindingsMinScoreFlag, *findingsListFindingsMaxScoreFlag, *findingsListFindingsAtDateFlag, *findingsListFindingsMinDateFlag, *findingsListFindingsMaxDateFlag, *findingsListFindingsSortByFlag, *findingsListFindingsPageFlag, *findingsListFindingsSizeFlag, *findingsListFindingsIdentifierFlag, *findingsListFindingsIdentifiermatchFlag, *findingsListFindingsIdentifiersFlag, *findingsListFindingsLabelsFlag)
			case "get- finding":
				endpoint = c.GetFinding()
				data, err = findingsc.BuildGetFindingPayload(*findingsGetFindingIDFlag)
			case "list- events- by- finding":
				endpoint = c.ListEventsByFinding()
				data, err = findingsc.BuildListEventsByFindingPayload(*findingsListEventsByFindingIDFlag, *findingsListEventsByFindingPageFlag, *findingsListEventsByFindingSizeFlag)
			case "get- finding- mttr":
				endpoint = c.GetFindingMTTR()
				data, err = findingsc.BuildGetFindingMTTRPayload(*findingsGetFindingMTTRIDFlag)
			case "patch- finding":
				endpoint = c.PatchFinding()
				data, err = findingsc.BuildPatchFindingPayload(*findingsPatchFindingBodyFlag, *findingsPatchFindingIDFlag, *findingsPatchFindingAuthorizationFlag)
			}
		case "issues":
			c := issuesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list- issues":
				endpoint = c.ListIssues()
				data, err = issuesc.BuildListIssuesPayload(*issuesListIssuesPageFlag, *issuesListIssuesSizeFlag)
			case "issues- summary":
				endpoint = c.IssuesSummary()
				data, err = issuesc.BuildIssuesSummaryPayload(*issuesIssuesSummaryTagFlag, *issuesIssuesSummaryStatusFlag, *issuesIssuesSummarySortByFlag, *issuesIssuesSummaryPageFlag, *issuesIssuesSummarySizeFlag, *issuesIssuesSummaryIdentifiersFlag, *issuesIssuesSummaryLabelsFlag)
			case "get- issue":
				endpoint = c.GetIssue()
				data, err = issuesc.BuildGetIssuePayload(*issuesGetIssueIDFlag)
			case "list- findings- by- issue":
				endpoint = c.ListFindingsByIssue()
				data, err = issuesc.BuildListFindingsByIssuePayload(*issuesListFindingsByIssueIDFlag, *issuesListFindingsByIssueStatusFlag, *issuesListFindingsByIssueSortByFlag, *issuesListFindingsByIssuePageFlag, *issuesListFindingsByIssueSizeFlag, *issuesListFindingsByIssueIdentifiersFlag, *issuesListFindingsByIssueLabelsFlag)
			case "get- finding- by- issue-,- target- and- affected- resource":
				endpoint = c.GetFindingByIssueTargetAndAffectedResource()
				data, err = issuesc.BuildGetFindingByIssueTargetAndAffectedResourcePayload(*issuesGetFindingByIssueTargetAndAffectedResourceIssueIDFlag, *issuesGetFindingByIssueTargetAndAffectedResourceTargetIDFlag, *issuesGetFindingByIssueTargetAndAffectedResourceResourceFlag)
			case "get- issue- mttr":
				endpoint = c.GetIssueMTTR()
				data, err = issuesc.BuildGetIssueMTTRPayload(*issuesGetIssueMTTRIDFlag)
			}
		case "sources":
			c := sourcesc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list- sources":
				endpoint = c.ListSources()
				data, err = sourcesc.BuildListSourcesPayload(*sourcesListSourcesPageFlag, *sourcesListSourcesSizeFlag)
			case "get- source":
				endpoint = c.GetSource()
				data, err = sourcesc.BuildGetSourcePayload(*sourcesGetSourceIDFlag)
			case "list- findings- by- source":
				endpoint = c.ListFindingsBySource()
				data, err = sourcesc.BuildListFindingsBySourcePayload(*sourcesListFindingsBySourceIDFlag, *sourcesListFindingsBySourceStatusFlag, *sourcesListFindingsBySourceSortByFlag, *sourcesListFindingsBySourcePageFlag, *sourcesListFindingsBySourceSizeFlag)
			case "get- source- mttr":
				endpoint = c.GetSourceMTTR()
				data, err = sourcesc.BuildGetSourceMTTRPayload(*sourcesGetSourceMTTRIDFlag)
			}
		case "targets":
			c := targetsc.NewClient(scheme, host, doer, enc, dec, restore)
			switch epn {
			case "list- targets":
				endpoint = c.ListTargets()
				data, err = targetsc.BuildListTargetsPayload(*targetsListTargetsTagFlag, *targetsListTargetsIdentifierFlag, *targetsListTargetsPageFlag, *targetsListTargetsSizeFlag, *targetsListTargetsIdentifiermatchFlag, *targetsListTargetsIdentifiersFlag)
			case "targets- summary":
				endpoint = c.TargetsSummary()
				data, err = targetsc.BuildTargetsSummaryPayload(*targetsTargetsSummaryTagFlag, *targetsTargetsSummaryStatusFlag, *targetsTargetsSummarySortByFlag, *targetsTargetsSummaryPageFlag, *targetsTargetsSummarySizeFlag, *targetsTargetsSummaryIdentifiersFlag, *targetsTargetsSummaryLabelsFlag)
			case "get- target":
				endpoint = c.GetTarget()
				data, err = targetsc.BuildGetTargetPayload(*targetsGetTargetIDFlag)
			case "create- target":
				endpoint = c.CreateTarget()
				data, err = targetsc.BuildCreateTargetPayload(*targetsCreateTargetBodyFlag)
			case "list- findings- by- target":
				endpoint = c.ListFindingsByTarget()
				data, err = targetsc.BuildListFindingsByTargetPayload(*targetsListFindingsByTargetIDFlag, *targetsListFindingsByTargetStatusFlag, *targetsListFindingsByTargetSortByFlag, *targetsListFindingsByTargetPageFlag, *targetsListFindingsByTargetSizeFlag, *targetsListFindingsByTargetLabelsFlag)
			case "get- finding- by- target-,- issue- and- affected- resource":
				endpoint = c.GetFindingByTargetIssueAndAffectedResource()
				data, err = targetsc.BuildGetFindingByTargetIssueAndAffectedResourcePayload(*targetsGetFindingByTargetIssueAndAffectedResourceTargetIDFlag, *targetsGetFindingByTargetIssueAndAffectedResourceIssueIDFlag, *targetsGetFindingByTargetIssueAndAffectedResourceResourceFlag)
			case "get- target- mttr":
				endpoint = c.GetTargetMTTR()
				data, err = targetsc.BuildGetTargetMTTRPayload(*targetsGetTargetMTTRIDFlag)
			case "delete- target- tag":
				endpoint = c.DeleteTargetTag()
				data, err = targetsc.BuildDeleteTargetTagPayload(*targetsDeleteTargetTagTargetIDFlag, *targetsDeleteTargetTagTagFlag, *targetsDeleteTargetTagAuthFlag)
			case "delete- tag":
				endpoint = c.DeleteTag()
				data, err = targetsc.BuildDeleteTagPayload(*targetsDeleteTagTagFlag, *targetsDeleteTagAuthFlag)
			}
		}
	}
	if err != nil {
		return nil, nil, err
	}

	return endpoint, data, nil
}

// eventsUsage displays the usage of the events command and its subcommands.
func eventsUsage() {
	fmt.Fprintf(os.Stderr, `Finding events endpoint.
Usage:
    %[1]s [globalflags] events COMMAND [flags]

COMMAND:
    list- finding- events: ListFindingEvents implements List finding events.

Additional help:
    %[1]s events COMMAND --help
`, os.Args[0])
}
func eventsListFindingEventsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] events list- finding- events -min-score INT -max-score INT -min-date STRING -max-date STRING -page INT -size INT

ListFindingEvents implements List finding events.
    -min-score INT: 
    -max-score INT: 
    -min-date STRING: 
    -max-date STRING: 
    -page INT: 
    -size INT: 

Example:
    %[1]s events list- finding- events --min-score 5879637287524651712 --max-score 2615216803934210996 --min-date "Sapiente dicta voluptatum adipisci." --max-date "Animi illum minus nostrum numquam qui blanditiis." --page 1116792817448347821 --size 1682394529179201435
`, os.Args[0])
}

// labelsUsage displays the usage of the labels command and its subcommands.
func labelsUsage() {
	fmt.Fprintf(os.Stderr, `Labels endpoint.
Usage:
    %[1]s [globalflags] labels COMMAND [flags]

COMMAND:
    list- labels: ListLabels implements List labels.

Additional help:
    %[1]s labels COMMAND --help
`, os.Args[0])
}
func labelsListLabelsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] labels list- labels -tag STRING -status STRING -at-date STRING -min-date STRING -max-date STRING -identifiers STRING

ListLabels implements List labels.
    -tag STRING: 
    -status STRING: 
    -at-date STRING: 
    -min-date STRING: 
    -max-date STRING: 
    -identifiers STRING: 

Example:
    %[1]s labels list- labels --tag "Doloribus harum modi." --status "Animi dignissimos laborum quod doloribus." --at-date "Et consequatur totam et." --min-date "Cumque deleniti quo laborum." --max-date "Ut soluta officia fugiat ab delectus." --identifiers "Odit quis cum consequatur illo saepe."
`, os.Args[0])
}

// statsUsage displays the usage of the stats command and its subcommands.
func statsUsage() {
	fmt.Fprintf(os.Stderr, `Stats endpoint.
Usage:
    %[1]s [globalflags] stats COMMAND [flags]

COMMAND:
    get- size- stats: GetSizeStats implements Get size stats.
    get- open- issues- stats: This method gets statistics for open findings by using different filters.
	When querying for a specific time range, it returns every finding that has been found in that time, regardless if that finding has also been fixed in that span of time.
    get- fixed- issues- stats: This method gets statistics for fixed findings by using different filters.
	When querying for a specific time range, it returns every finding that has been fixed in that time and it's fixed at the end of the time range specified, so a finding that is fixed and then reopened in that range of time will not be counted.
    get- stats- assets- per- severity: GetStatsAssetsPerSeverity implements Get stats assets per severity.
    get- issues- stats: GetIssuesStats implements Get issues stats.
    get- stats- mttr: GetStatsMTTR implements Get stats MTTR.
    get- stats- exposure: GetStatsExposure implements Get stats exposure.
    get- stats- current- exposure: GetStatsCurrentExposure implements Get stats current exposure.

Additional help:
    %[1]s stats COMMAND --help
`, os.Args[0])
}
func statsGetSizeStatsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] stats get- size- stats

GetSizeStats implements Get size stats.

Example:
    %[1]s stats get- size- stats
`, os.Args[0])
}

func statsGetOpenIssuesStatsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] stats get- open- issues- stats -tag STRING -tags STRING -min-date STRING -max-date STRING -at-date STRING -identifiers STRING -labels STRING

This method gets statistics for open findings by using different filters.
	When querying for a specific time range, it returns every finding that has been found in that time, regardless if that finding has also been fixed in that span of time.
    -tag STRING: 
    -tags STRING: 
    -min-date STRING: 
    -max-date STRING: 
    -at-date STRING: 
    -identifiers STRING: 
    -labels STRING: 

Example:
    %[1]s stats get- open- issues- stats --tag "Iste ipsam." --tags "Animi consectetur soluta sit error possimus." --min-date "Omnis quia laborum." --max-date "Quia provident atque ullam." --at-date "Molestiae facere delectus qui." --identifiers "Necessitatibus et eum inventore qui dolores alias." --labels "Harum dolores."
`, os.Args[0])
}

func statsGetFixedIssuesStatsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] stats get- fixed- issues- stats -tag STRING -tags STRING -min-date STRING -max-date STRING -at-date STRING -identifiers STRING -labels STRING

This method gets statistics for fixed findings by using different filters.
	When querying for a specific time range, it returns every finding that has been fixed in that time and it's fixed at the end of the time range specified, so a finding that is fixed and then reopened in that range of time will not be counted.
    -tag STRING: 
    -tags STRING: 
    -min-date STRING: 
    -max-date STRING: 
    -at-date STRING: 
    -identifiers STRING: 
    -labels STRING: 

Example:
    %[1]s stats get- fixed- issues- stats --tag "Cumque sint dolorem." --tags "Unde natus aut facilis vitae eum explicabo." --min-date "Sapiente explicabo tenetur et." --max-date "Perspiciatis qui ex ut sunt nemo." --at-date "Commodi praesentium sint voluptatem sed." --identifiers "Veniam impedit quod qui." --labels "Nobis accusantium."
`, os.Args[0])
}

func statsGetStatsAssetsPerSeverityUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] stats get- stats- assets- per- severity -tag STRING -tags STRING -identifiers STRING -labels STRING

GetStatsAssetsPerSeverity implements Get stats assets per severity.
    -tag STRING: 
    -tags STRING: 
    -identifiers STRING: 
    -labels STRING: 

Example:
    %[1]s stats get- stats- assets- per- severity --tag "Voluptatibus qui vel numquam dolores sunt perspiciatis." --tags "Eum voluptatem distinctio et exercitationem." --identifiers "Deleniti non quia." --labels "Atque rerum quia repudiandae quia."
`, os.Args[0])
}

func statsGetIssuesStatsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] stats get- issues- stats -min-date STRING -max-date STRING -min-score INT -max-score INT

GetIssuesStats implements Get issues stats.
    -min-date STRING: 
    -max-date STRING: 
    -min-score INT: 
    -max-score INT: 

Example:
    %[1]s stats get- issues- stats --min-date "Eum est numquam dolor et excepturi." --max-date "Ducimus modi quisquam asperiores quae." --min-score 2271783299054362224 --max-score 3222468449118906095
`, os.Args[0])
}

func statsGetStatsMTTRUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] stats get- stats- mttr -tag STRING -tags STRING -min-date STRING -max-date STRING -labels STRING

GetStatsMTTR implements Get stats MTTR.
    -tag STRING: 
    -tags STRING: 
    -min-date STRING: 
    -max-date STRING: 
    -labels STRING: 

Example:
    %[1]s stats get- stats- mttr --tag "Atque culpa." --tags "Quisquam eius quos dolor." --min-date "Dicta eveniet qui placeat autem quaerat illum." --max-date "Beatae libero repellendus illum optio." --labels "Nobis repellendus ipsa dolores."
`, os.Args[0])
}

func statsGetStatsExposureUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] stats get- stats- exposure -tag STRING -tags STRING -at-date STRING -min-score INT -max-score INT

GetStatsExposure implements Get stats exposure.
    -tag STRING: 
    -tags STRING: 
    -at-date STRING: 
    -min-score INT: 
    -max-score INT: 

Example:
    %[1]s stats get- stats- exposure --tag "Autem ad aliquid." --tags "Reprehenderit est veritatis rerum dignissimos enim sapiente." --at-date "Fuga necessitatibus voluptates consequatur." --min-score 4271989761012072889 --max-score 9104537172367700511
`, os.Args[0])
}

func statsGetStatsCurrentExposureUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] stats get- stats- current- exposure -tag STRING -tags STRING -min-score INT -max-score INT -labels STRING

GetStatsCurrentExposure implements Get stats current exposure.
    -tag STRING: 
    -tags STRING: 
    -min-score INT: 
    -max-score INT: 
    -labels STRING: 

Example:
    %[1]s stats get- stats- current- exposure --tag "Similique adipisci velit assumenda nostrum sit occaecati." --tags "Cumque occaecati labore quisquam repellendus." --min-score 1336193338506534578 --max-score 7136913592386187803 --labels "Odit omnis eos suscipit sapiente dolor."
`, os.Args[0])
}

// findingsUsage displays the usage of the findings command and its subcommands.
func findingsUsage() {
	fmt.Fprintf(os.Stderr, `Findings endpoint.
Usage:
    %[1]s [globalflags] findings COMMAND [flags]

COMMAND:
    list- findings: This method allows to list findings by using different filters.
	When querying for open findings in a specific time range, it returns every finding that has been found in that time, regardless if that finding has also been fixed in that span of time.
	When querying for fixed findings in a specific time range, it returns every finding that has been fixed in that time and it's fixed at the end of that time range, so a finding that is fixed and then reopened in that range of time will not be returned.
    get- finding: GetFinding implements Get finding.
    list- events- by- finding: ListEventsByFinding implements List events by finding.
    get- finding- mttr: GetFindingMTTR implements Get finding MTTR.
    patch- finding: PatchFinding implements Patch finding.

Additional help:
    %[1]s findings COMMAND --help
`, os.Args[0])
}
func findingsListFindingsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] findings list- findings -tag STRING -status STRING -min-score INT -max-score INT -at-date STRING -min-date STRING -max-date STRING -sort-by STRING -page INT -size INT -identifier STRING -identifiermatch BOOL -identifiers STRING -labels STRING

This method allows to list findings by using different filters.
	When querying for open findings in a specific time range, it returns every finding that has been found in that time, regardless if that finding has also been fixed in that span of time.
	When querying for fixed findings in a specific time range, it returns every finding that has been fixed in that time and it's fixed at the end of that time range, so a finding that is fixed and then reopened in that range of time will not be returned.
    -tag STRING: 
    -status STRING: 
    -min-score INT: 
    -max-score INT: 
    -at-date STRING: 
    -min-date STRING: 
    -max-date STRING: 
    -sort-by STRING: 
    -page INT: 
    -size INT: 
    -identifier STRING: 
    -identifiermatch BOOL: 
    -identifiers STRING: 
    -labels STRING: 

Example:
    %[1]s findings list- findings --tag "Non modi dolorum explicabo non temporibus alias." --status "Praesentium mollitia ex fugiat quibusdam voluptatem excepturi." --min-score 8413656132824002010 --max-score 4388460377214520314 --at-date "Omnis deserunt." --min-date "Et in." --max-date "Est possimus dolorem ex neque." --sort-by "Sequi sed ea." --page 3642797880115460207 --size 8837006597308256152 --identifier "Est voluptatem est incidunt dicta vel." --identifiermatch true --identifiers "Ut ut unde autem beatae iste in." --labels "Incidunt porro adipisci."
`, os.Args[0])
}

func findingsGetFindingUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] findings get- finding -id STRING

GetFinding implements Get finding.
    -id STRING: Finding ID

Example:
    %[1]s findings get- finding --id "Delectus eligendi cupiditate."
`, os.Args[0])
}

func findingsListEventsByFindingUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] findings list- events- by- finding -id STRING -page INT -size INT

ListEventsByFinding implements List events by finding.
    -id STRING: Finding ID
    -page INT: 
    -size INT: 

Example:
    %[1]s findings list- events- by- finding --id "Vel laboriosam velit esse est voluptas." --page 2080802368445336524 --size 5093125516513828359
`, os.Args[0])
}

func findingsGetFindingMTTRUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] findings get- finding- mttr -id STRING

GetFindingMTTR implements Get finding MTTR.
    -id STRING: Finding ID

Example:
    %[1]s findings get- finding- mttr --id "Omnis quisquam."
`, os.Args[0])
}

func findingsPatchFindingUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] findings patch- finding -body JSON -id STRING -authorization STRING

PatchFinding implements Patch finding.
    -body JSON: 
    -id STRING: Finding ID
    -authorization STRING: 

Example:
    %[1]s findings patch- finding --body '{
      "status": "OPEN"
   }' --id "Sunt et." --authorization "Maiores consequatur distinctio."
`, os.Args[0])
}

// issuesUsage displays the usage of the issues command and its subcommands.
func issuesUsage() {
	fmt.Fprintf(os.Stderr, `Issues endpoint.
Usage:
    %[1]s [globalflags] issues COMMAND [flags]

COMMAND:
    list- issues: ListIssues implements List issues.
    issues- summary: IssuesSummary implements Issues summary.
    get- issue: GetIssue implements Get issue.
    list- findings- by- issue: ListFindingsByIssue implements List findings by issue.
    get- finding- by- issue-,- target- and- affected- resource: GetFindingByIssueTargetAndAffectedResource implements Get finding by issue, target and affected resource.
    get- issue- mttr: GetIssueMTTR implements Get issue MTTR.

Additional help:
    %[1]s issues COMMAND --help
`, os.Args[0])
}
func issuesListIssuesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] issues list- issues -page INT -size INT

ListIssues implements List issues.
    -page INT: 
    -size INT: 

Example:
    %[1]s issues list- issues --page 8549737383041950286 --size 1505538389617963040
`, os.Args[0])
}

func issuesIssuesSummaryUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] issues issues- summary -tag STRING -status STRING -sort-by STRING -page INT -size INT -identifiers STRING -labels STRING

IssuesSummary implements Issues summary.
    -tag STRING: 
    -status STRING: 
    -sort-by STRING: 
    -page INT: 
    -size INT: 
    -identifiers STRING: 
    -labels STRING: 

Example:
    %[1]s issues issues- summary --tag "Dolore culpa beatae impedit." --status "Assumenda eligendi saepe ratione facilis quia quisquam." --sort-by "Iste voluptatem consectetur repellendus eos repudiandae." --page 94797365903173979 --size 4640497539437505138 --identifiers "Est impedit nihil hic ex ullam." --labels "Non rem aut iusto aut id."
`, os.Args[0])
}

func issuesGetIssueUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] issues get- issue -id STRING

GetIssue implements Get issue.
    -id STRING: Issue ID

Example:
    %[1]s issues get- issue --id "Incidunt quidem."
`, os.Args[0])
}

func issuesListFindingsByIssueUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] issues list- findings- by- issue -id STRING -status STRING -sort-by STRING -page INT -size INT -identifiers STRING -labels STRING

ListFindingsByIssue implements List findings by issue.
    -id STRING: Issue ID
    -status STRING: 
    -sort-by STRING: 
    -page INT: 
    -size INT: 
    -identifiers STRING: 
    -labels STRING: 

Example:
    %[1]s issues list- findings- by- issue --id "Voluptas aut neque repellendus quia quo qui." --status "Alias sequi reprehenderit ea." --sort-by "Dolore commodi cupiditate." --page 8647638454912728696 --size 9176748733626154358 --identifiers "Est non culpa non nam." --labels "Harum est eos ipsam odit in quidem."
`, os.Args[0])
}

func issuesGetFindingByIssueTargetAndAffectedResourceUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] issues get- finding- by- issue-,- target- and- affected- resource -issue-id STRING -target-id STRING -resource STRING

GetFindingByIssueTargetAndAffectedResource implements Get finding by issue, target and affected resource.
    -issue-id STRING: Issue ID
    -target-id STRING: Target ID
    -resource STRING: Resource identifier

Example:
    %[1]s issues get- finding- by- issue-,- target- and- affected- resource --issue-id "Eum explicabo tempora alias." --target-id "Rerum dignissimos qui molestias." --resource "Aliquid eum voluptatem dicta reiciendis suscipit."
`, os.Args[0])
}

func issuesGetIssueMTTRUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] issues get- issue- mttr -id STRING

GetIssueMTTR implements Get issue MTTR.
    -id STRING: Issue ID

Example:
    %[1]s issues get- issue- mttr --id "Fugit animi iusto aut et quaerat magni."
`, os.Args[0])
}

// sourcesUsage displays the usage of the sources command and its subcommands.
func sourcesUsage() {
	fmt.Fprintf(os.Stderr, `Sources endpoint.
Usage:
    %[1]s [globalflags] sources COMMAND [flags]

COMMAND:
    list- sources: ListSources implements List sources.
    get- source: GetSource implements Get source.
    list- findings- by- source: ListFindingsBySource implements List findings by source.
    get- source- mttr: GetSourceMTTR implements Get source MTTR.

Additional help:
    %[1]s sources COMMAND --help
`, os.Args[0])
}
func sourcesListSourcesUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] sources list- sources -page INT -size INT

ListSources implements List sources.
    -page INT: 
    -size INT: 

Example:
    %[1]s sources list- sources --page 229764847541746889 --size 9164878792472846153
`, os.Args[0])
}

func sourcesGetSourceUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] sources get- source -id STRING

GetSource implements Get source.
    -id STRING: Source ID

Example:
    %[1]s sources get- source --id "Sit blanditiis fuga."
`, os.Args[0])
}

func sourcesListFindingsBySourceUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] sources list- findings- by- source -id STRING -status STRING -sort-by STRING -page INT -size INT

ListFindingsBySource implements List findings by source.
    -id STRING: Source ID
    -status STRING: 
    -sort-by STRING: 
    -page INT: 
    -size INT: 

Example:
    %[1]s sources list- findings- by- source --id "Et iusto consequatur repellendus." --status "Officiis culpa magnam ea eum molestiae." --sort-by "Enim est hic voluptatem et ducimus." --page 4900904317402842714 --size 4465625706826463716
`, os.Args[0])
}

func sourcesGetSourceMTTRUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] sources get- source- mttr -id STRING

GetSourceMTTR implements Get source MTTR.
    -id STRING: Source ID

Example:
    %[1]s sources get- source- mttr --id "Ratione vitae vel laboriosam dicta illum eos."
`, os.Args[0])
}

// targetsUsage displays the usage of the targets command and its subcommands.
func targetsUsage() {
	fmt.Fprintf(os.Stderr, `Targets endpoint.
Usage:
    %[1]s [globalflags] targets COMMAND [flags]

COMMAND:
    list- targets: ListTargets implements List targets.
    targets- summary: TargetsSummary implements Targets summary.
    get- target: GetTarget implements Get target.
    create- target: CreateTarget implements Create target.
    list- findings- by- target: ListFindingsByTarget implements List findings by target.
    get- finding- by- target-,- issue- and- affected- resource: GetFindingByTargetIssueAndAffectedResource implements Get finding by target, issue and affected resource.
    get- target- mttr: GetTargetMTTR implements Get target MTTR.
    delete- target- tag: DeleteTargetTag implements Delete target tag.
    delete- tag: DeleteTag implements Delete tag.

Additional help:
    %[1]s targets COMMAND --help
`, os.Args[0])
}
func targetsListTargetsUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] targets list- targets -tag STRING -identifier STRING -page INT -size INT -identifiermatch BOOL -identifiers STRING

ListTargets implements List targets.
    -tag STRING: 
    -identifier STRING: 
    -page INT: 
    -size INT: 
    -identifiermatch BOOL: 
    -identifiers STRING: 

Example:
    %[1]s targets list- targets --tag "Voluptate alias asperiores et saepe." --identifier "Eum culpa." --page 1850038499266700412 --size 1357511553298071869 --identifiermatch false --identifiers "Ea asperiores autem beatae ut et accusamus."
`, os.Args[0])
}

func targetsTargetsSummaryUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] targets targets- summary -tag STRING -status STRING -sort-by STRING -page INT -size INT -identifiers STRING -labels STRING

TargetsSummary implements Targets summary.
    -tag STRING: 
    -status STRING: 
    -sort-by STRING: 
    -page INT: 
    -size INT: 
    -identifiers STRING: 
    -labels STRING: 

Example:
    %[1]s targets targets- summary --tag "Voluptatum ipsa veniam cumque." --status "Facere qui." --sort-by "Repudiandae fugiat sunt et quae sed expedita." --page 480223525831222780 --size 5478101018688090245 --identifiers "Molestiae et laudantium aliquam asperiores." --labels "Iure assumenda quae optio tempore quam nemo."
`, os.Args[0])
}

func targetsGetTargetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] targets get- target -id STRING

GetTarget implements Get target.
    -id STRING: Target ID

Example:
    %[1]s targets get- target --id "Porro doloribus voluptas illum."
`, os.Args[0])
}

func targetsCreateTargetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] targets create- target -body JSON

CreateTarget implements Create target.
    -body JSON: 

Example:
    %[1]s targets create- target --body '{
      "identifier": "www.example.com",
      "tags": [
         "sdrn:adevinta:team:security"
      ]
   }'
`, os.Args[0])
}

func targetsListFindingsByTargetUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] targets list- findings- by- target -id STRING -status STRING -sort-by STRING -page INT -size INT -labels STRING

ListFindingsByTarget implements List findings by target.
    -id STRING: Target ID
    -status STRING: 
    -sort-by STRING: 
    -page INT: 
    -size INT: 
    -labels STRING: 

Example:
    %[1]s targets list- findings- by- target --id "Autem quam autem illo sequi laboriosam." --status "Aspernatur aut natus aut." --sort-by "Officiis quia." --page 5821040800357227728 --size 1433995857491535364 --labels "Explicabo sed nulla exercitationem illum nobis."
`, os.Args[0])
}

func targetsGetFindingByTargetIssueAndAffectedResourceUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] targets get- finding- by- target-,- issue- and- affected- resource -target-id STRING -issue-id STRING -resource STRING

GetFindingByTargetIssueAndAffectedResource implements Get finding by target, issue and affected resource.
    -target-id STRING: Target ID
    -issue-id STRING: Issue ID
    -resource STRING: Resource identifier

Example:
    %[1]s targets get- finding- by- target-,- issue- and- affected- resource --target-id "Sequi animi." --issue-id "Laborum blanditiis est unde sequi." --resource "Minima voluptates asperiores odit ex in."
`, os.Args[0])
}

func targetsGetTargetMTTRUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] targets get- target- mttr -id STRING

GetTargetMTTR implements Get target MTTR.
    -id STRING: Target ID

Example:
    %[1]s targets get- target- mttr --id "Libero voluptatem nisi possimus."
`, os.Args[0])
}

func targetsDeleteTargetTagUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] targets delete- target- tag -target-id STRING -tag STRING -auth STRING

DeleteTargetTag implements Delete target tag.
    -target-id STRING: Target ID
    -tag STRING: Tag
    -auth STRING: 

Example:
    %[1]s targets delete- target- tag --target-id "Asperiores nostrum." --tag "Dolorem similique non odit et vero est." --auth "TAG tag=mytag"
`, os.Args[0])
}

func targetsDeleteTagUsage() {
	fmt.Fprintf(os.Stderr, `%[1]s [flags] targets delete- tag -tag STRING -auth STRING

DeleteTag implements Delete tag.
    -tag STRING: Tag
    -auth STRING: 

Example:
    %[1]s targets delete- tag --tag "Rerum aut soluta." --auth "TAG tag=mytag"
`, os.Args[0])
}
