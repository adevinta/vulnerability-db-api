/*
Copyright 2021 Adevinta
*/

// Code generated by goa v3.0.6, DO NOT EDIT.
//
// events HTTP client encoders and decoders
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package client

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"

	events "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/events"
	eventsviews "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/events/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildListFindingEventsRequest instantiates a HTTP request object with method
// and path set to call the "events" service "List finding events" endpoint
func (c *Client) BuildListFindingEventsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListFindingEventsEventsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("events", "List finding events", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListFindingEventsRequest returns an encoder for requests sent to the
// events List finding events server.
func EncodeListFindingEventsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*events.ListFindingEventsPayload)
		if !ok {
			return goahttp.ErrInvalidType("events", "List finding events", "*events.ListFindingEventsPayload", v)
		}
		values := req.URL.Query()
		if p.MinScore != nil {
			values.Add("minScore", fmt.Sprintf("%v", *p.MinScore))
		}
		if p.MaxScore != nil {
			values.Add("maxScore", fmt.Sprintf("%v", *p.MaxScore))
		}
		if p.MinDate != nil {
			values.Add("minDate", *p.MinDate)
		}
		if p.MaxDate != nil {
			values.Add("maxDate", *p.MaxDate)
		}
		if p.Page != nil {
			values.Add("page", fmt.Sprintf("%v", *p.Page))
		}
		if p.Size != nil {
			values.Add("size", fmt.Sprintf("%v", *p.Size))
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListFindingEventsResponse returns a decoder for responses returned by
// the events List finding events endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeListFindingEventsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListFindingEventsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("events", "List finding events", err)
			}
			p := NewListFindingEventsEventCollectionOK(body)
			view := "default"
			vres := eventsviews.EventCollection{p, view}
			if err = eventsviews.ValidateEventCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("events", "List finding events", err)
			}
			res := events.NewEventCollection(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("events", "List finding events", resp.StatusCode, string(body))
		}
	}
}
