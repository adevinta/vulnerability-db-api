// Code generated by goa v3.0.6, DO NOT EDIT.
//
// events HTTP client CLI support package
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package client

import (
	"fmt"
	"strconv"

	events "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/events"
)

// BuildListFindingEventsPayload builds the payload for the events List finding
// events endpoint from CLI flags.
func BuildListFindingEventsPayload(eventsListFindingEventsMinScore string, eventsListFindingEventsMaxScore string, eventsListFindingEventsMinDate string, eventsListFindingEventsMaxDate string, eventsListFindingEventsPage string, eventsListFindingEventsSize string) (*events.ListFindingEventsPayload, error) {
	var err error
	var minScore *int
	{
		if eventsListFindingEventsMinScore != "" {
			var v int64
			v, err = strconv.ParseInt(eventsListFindingEventsMinScore, 10, 64)
			val := int(v)
			minScore = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for minScore, must be INT")
			}
		}
	}
	var maxScore *int
	{
		if eventsListFindingEventsMaxScore != "" {
			var v int64
			v, err = strconv.ParseInt(eventsListFindingEventsMaxScore, 10, 64)
			val := int(v)
			maxScore = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for maxScore, must be INT")
			}
		}
	}
	var minDate *string
	{
		if eventsListFindingEventsMinDate != "" {
			minDate = &eventsListFindingEventsMinDate
		}
	}
	var maxDate *string
	{
		if eventsListFindingEventsMaxDate != "" {
			maxDate = &eventsListFindingEventsMaxDate
		}
	}
	var page *int
	{
		if eventsListFindingEventsPage != "" {
			var v int64
			v, err = strconv.ParseInt(eventsListFindingEventsPage, 10, 64)
			val := int(v)
			page = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for page, must be INT")
			}
		}
	}
	var size *int
	{
		if eventsListFindingEventsSize != "" {
			var v int64
			v, err = strconv.ParseInt(eventsListFindingEventsSize, 10, 64)
			val := int(v)
			size = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for size, must be INT")
			}
		}
	}
	payload := &events.ListFindingEventsPayload{
		MinScore: minScore,
		MaxScore: maxScore,
		MinDate:  minDate,
		MaxDate:  maxDate,
		Page:     page,
		Size:     size,
	}
	return payload, nil
}
