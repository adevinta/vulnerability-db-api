/*
Copyright 2021 Adevinta
*/

// Code generated by goa v3.0.6, DO NOT EDIT.
//
// events HTTP server encoders and decoders
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package server

import (
	"context"
	"net/http"
	"strconv"

	eventsviews "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/events/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeListFindingEventsResponse returns an encoder for responses returned by
// the events List finding events endpoint.
func EncodeListFindingEventsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(eventsviews.EventCollection)
		enc := encoder(ctx, w)
		body := NewEventResponseCollection(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListFindingEventsRequest returns a decoder for requests sent to the
// events List finding events endpoint.
func DecodeListFindingEventsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			minScore *int
			maxScore *int
			minDate  *string
			maxDate  *string
			page     *int
			size     *int
			err      error
		)
		{
			minScoreRaw := r.URL.Query().Get("minScore")
			if minScoreRaw != "" {
				v, err2 := strconv.ParseInt(minScoreRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("minScore", minScoreRaw, "integer"))
				}
				pv := int(v)
				minScore = &pv
			}
		}
		{
			maxScoreRaw := r.URL.Query().Get("maxScore")
			if maxScoreRaw != "" {
				v, err2 := strconv.ParseInt(maxScoreRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("maxScore", maxScoreRaw, "integer"))
				}
				pv := int(v)
				maxScore = &pv
			}
		}
		minDateRaw := r.URL.Query().Get("minDate")
		if minDateRaw != "" {
			minDate = &minDateRaw
		}
		maxDateRaw := r.URL.Query().Get("maxDate")
		if maxDateRaw != "" {
			maxDate = &maxDateRaw
		}
		{
			pageRaw := r.URL.Query().Get("page")
			if pageRaw != "" {
				v, err2 := strconv.ParseInt(pageRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("page", pageRaw, "integer"))
				}
				pv := int(v)
				page = &pv
			}
		}
		{
			sizeRaw := r.URL.Query().Get("size")
			if sizeRaw != "" {
				v, err2 := strconv.ParseInt(sizeRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("size", sizeRaw, "integer"))
				}
				pv := int(v)
				size = &pv
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewListFindingEventsPayload(minScore, maxScore, minDate, maxDate, page, size)

		return payload, nil
	}
}
