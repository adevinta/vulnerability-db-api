// Code generated by goa v3.0.6, DO NOT EDIT.
//
// events HTTP server types
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package server

import (
	events "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/events"
	eventsviews "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/events/views"
)

// EventResponseCollection is the type of the "events" service "List finding
// events" endpoint HTTP response body.
type EventResponseCollection []*EventResponse

// EventResponse is used to define fields on response body types.
type EventResponse struct {
	// Finding event ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Finding ID
	FindingID *string `form:"finding_id,omitempty" json:"finding_id,omitempty" xml:"finding_id,omitempty"`
	// Source ID
	SourceID *string `form:"source_id,omitempty" json:"source_id,omitempty" xml:"source_id,omitempty"`
	// Finding severity score
	Score *float32 `form:"score,omitempty" json:"score,omitempty" xml:"score,omitempty"`
	// Event time
	Time *string `form:"time,omitempty" json:"time,omitempty" xml:"time,omitempty"`
}

// NewEventResponseCollection builds the HTTP response body from the result of
// the "List finding events" endpoint of the "events" service.
func NewEventResponseCollection(res eventsviews.EventCollectionView) EventResponseCollection {
	body := make([]*EventResponse, len(res))
	for i, val := range res {
		body[i] = &EventResponse{
			ID:        val.ID,
			FindingID: val.FindingID,
			SourceID:  val.SourceID,
			Score:     val.Score,
			Time:      val.Time,
		}
	}
	return body
}

// NewListFindingEventsPayload builds a events service List finding events
// endpoint payload.
func NewListFindingEventsPayload(minScore *int, maxScore *int, minDate *string, maxDate *string, page *int, size *int) *events.ListFindingEventsPayload {
	return &events.ListFindingEventsPayload{
		MinScore: minScore,
		MaxScore: maxScore,
		MinDate:  minDate,
		MaxDate:  maxDate,
		Page:     page,
		Size:     size,
	}
}
