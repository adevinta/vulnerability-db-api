// Code generated by goa v3.5.2, DO NOT EDIT.
//
// labels HTTP client encoders and decoders
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package client

import (
	"bytes"
	"context"
	"io/ioutil"
	"net/http"
	"net/url"

	labels "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/labels"
	labelsviews "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/labels/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildListLabelsRequest instantiates a HTTP request object with method and
// path set to call the "labels" service "List labels" endpoint
func (c *Client) BuildListLabelsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListLabelsLabelsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("labels", "List labels", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListLabelsRequest returns an encoder for requests sent to the labels
// List labels server.
func EncodeListLabelsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*labels.ListLabelsPayload)
		if !ok {
			return goahttp.ErrInvalidType("labels", "List labels", "*labels.ListLabelsPayload", v)
		}
		values := req.URL.Query()
		if p.Team != nil {
			values.Add("team", *p.Team)
		}
		if p.Teams != nil {
			values.Add("teams", *p.Teams)
		}
		if p.Status != nil {
			values.Add("status", *p.Status)
		}
		if p.AtDate != nil {
			values.Add("atDate", *p.AtDate)
		}
		if p.MinDate != nil {
			values.Add("minDate", *p.MinDate)
		}
		if p.MaxDate != nil {
			values.Add("maxDate", *p.MaxDate)
		}
		if p.Identifiers != nil {
			values.Add("identifiers", *p.Identifiers)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListLabelsResponse returns a decoder for responses returned by the
// labels List labels endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeListLabelsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListLabelsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("labels", "List labels", err)
			}
			p := NewListLabelsLabelsOK(&body)
			view := "default"
			vres := &labelsviews.Labels{Projected: p, View: view}
			if err = labelsviews.ValidateLabels(vres); err != nil {
				return nil, goahttp.ErrValidationError("labels", "List labels", err)
			}
			res := labels.NewLabels(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("labels", "List labels", resp.StatusCode, string(body))
		}
	}
}
