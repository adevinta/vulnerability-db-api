// Code generated by goa v3.5.2, DO NOT EDIT.
//
// labels HTTP server encoders and decoders
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package server

import (
	"context"
	"net/http"

	labelsviews "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/labels/views"
	goahttp "goa.design/goa/v3/http"
)

// EncodeListLabelsResponse returns an encoder for responses returned by the
// labels List labels endpoint.
func EncodeListLabelsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*labelsviews.Labels)
		enc := encoder(ctx, w)
		body := NewListLabelsResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListLabelsRequest returns a decoder for requests sent to the labels
// List labels endpoint.
func DecodeListLabelsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			team        *string
			teams       *string
			status      *string
			atDate      *string
			minDate     *string
			maxDate     *string
			identifiers *string
		)
		teamRaw := r.URL.Query().Get("team")
		if teamRaw != "" {
			team = &teamRaw
		}
		teamsRaw := r.URL.Query().Get("teams")
		if teamsRaw != "" {
			teams = &teamsRaw
		}
		statusRaw := r.URL.Query().Get("status")
		if statusRaw != "" {
			status = &statusRaw
		}
		atDateRaw := r.URL.Query().Get("atDate")
		if atDateRaw != "" {
			atDate = &atDateRaw
		}
		minDateRaw := r.URL.Query().Get("minDate")
		if minDateRaw != "" {
			minDate = &minDateRaw
		}
		maxDateRaw := r.URL.Query().Get("maxDate")
		if maxDateRaw != "" {
			maxDate = &maxDateRaw
		}
		identifiersRaw := r.URL.Query().Get("identifiers")
		if identifiersRaw != "" {
			identifiers = &identifiersRaw
		}
		payload := NewListLabelsPayload(team, teams, status, atDate, minDate, maxDate, identifiers)

		return payload, nil
	}
}
