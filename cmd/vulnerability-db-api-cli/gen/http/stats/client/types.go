/*
Copyright 2021 Adevinta
*/

// Code generated by goa v3.0.6, DO NOT EDIT.
//
// stats HTTP client types
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package client

import (
	statsviews "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/stats/views"
)

// GetSizeStatsResponseBody is the type of the "stats" service "Get size stats"
// endpoint HTTP response body.
type GetSizeStatsResponseBody struct {
	// Number of sources
	Sources *int `form:"sources,omitempty" json:"sources,omitempty" xml:"sources,omitempty"`
	// Number of targets
	Targets *int `form:"targets,omitempty" json:"targets,omitempty" xml:"targets,omitempty"`
	// Number of issues
	Issues *int `form:"issues,omitempty" json:"issues,omitempty" xml:"issues,omitempty"`
	// Number of findings
	Findings *int `form:"findings,omitempty" json:"findings,omitempty" xml:"findings,omitempty"`
	// Number of finding events
	FindingEvents *int `form:"finding_events,omitempty" json:"finding_events,omitempty" xml:"finding_events,omitempty"`
}

// GetOpenIssuesStatsResponseBody is the type of the "stats" service "Get open
// issues stats" endpoint HTTP response body.
type GetOpenIssuesStatsResponseBody struct {
	// Number of critial issues
	Critical *int `form:"critical,omitempty" json:"critical,omitempty" xml:"critical,omitempty"`
	// Number of high issues
	High *int `form:"high,omitempty" json:"high,omitempty" xml:"high,omitempty"`
	// Number of medium issues
	Medium *int `form:"medium,omitempty" json:"medium,omitempty" xml:"medium,omitempty"`
	// Number of low issues
	Low *int `form:"low,omitempty" json:"low,omitempty" xml:"low,omitempty"`
	// Number of informational issues
	Informational *int `form:"informational,omitempty" json:"informational,omitempty" xml:"informational,omitempty"`
}

// GetFixedIssuesStatsResponseBody is the type of the "stats" service "Get
// fixed issues stats" endpoint HTTP response body.
type GetFixedIssuesStatsResponseBody struct {
	// Number of critial issues
	Critical *int `form:"critical,omitempty" json:"critical,omitempty" xml:"critical,omitempty"`
	// Number of high issues
	High *int `form:"high,omitempty" json:"high,omitempty" xml:"high,omitempty"`
	// Number of medium issues
	Medium *int `form:"medium,omitempty" json:"medium,omitempty" xml:"medium,omitempty"`
	// Number of low issues
	Low *int `form:"low,omitempty" json:"low,omitempty" xml:"low,omitempty"`
	// Number of informational issues
	Informational *int `form:"informational,omitempty" json:"informational,omitempty" xml:"informational,omitempty"`
}

// GetIssuesStatsResponseBody is the type of the "stats" service "Get issues
// stats" endpoint HTTP response body.
type GetIssuesStatsResponseBody []*IssueStatsResponse

// GetStatsMTTRResponseBody is the type of the "stats" service "Get stats MTTR"
// endpoint HTTP response body.
type GetStatsMTTRResponseBody struct {
	// Number of critial issues
	Critical *int `form:"critical,omitempty" json:"critical,omitempty" xml:"critical,omitempty"`
	// Number of high issues
	High *int `form:"high,omitempty" json:"high,omitempty" xml:"high,omitempty"`
	// Number of medium issues
	Medium *int `form:"medium,omitempty" json:"medium,omitempty" xml:"medium,omitempty"`
	// Number of low issues
	Low *int `form:"low,omitempty" json:"low,omitempty" xml:"low,omitempty"`
	// Number of informational issues
	Informational *int `form:"informational,omitempty" json:"informational,omitempty" xml:"informational,omitempty"`
}

// IssueStatsResponse is used to define fields on response body types.
type IssueStatsResponse struct {
	// Issue ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Issue summary
	Summary *string `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	// Common Weakness Enumeration ID
	CweID *int `form:"cwe_id,omitempty" json:"cwe_id,omitempty" xml:"cwe_id,omitempty"`
	// Issue description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Recommendations to fix the issue
	Recommendations []string `form:"recommendations,omitempty" json:"recommendations,omitempty" xml:"recommendations,omitempty"`
	// Documentation reference for the issue
	ReferenceLinks []string `form:"reference_links,omitempty" json:"reference_links,omitempty" xml:"reference_links,omitempty"`
	// Number of OPEN findings for this issue
	Open *int `form:"open,omitempty" json:"open,omitempty" xml:"open,omitempty"`
	// Number of FIXED findings for this issue
	Fixed *int `form:"fixed,omitempty" json:"fixed,omitempty" xml:"fixed,omitempty"`
}

// NewGetSizeStatsSizeOK builds a "stats" service "Get size stats" endpoint
// result from a HTTP "OK" response.
func NewGetSizeStatsSizeOK(body *GetSizeStatsResponseBody) *statsviews.SizeView {
	v := &statsviews.SizeView{
		Sources:       body.Sources,
		Targets:       body.Targets,
		Issues:        body.Issues,
		Findings:      body.Findings,
		FindingEvents: body.FindingEvents,
	}
	return v
}

// NewGetOpenIssuesStatsSeverityOK builds a "stats" service "Get open issues
// stats" endpoint result from a HTTP "OK" response.
func NewGetOpenIssuesStatsSeverityOK(body *GetOpenIssuesStatsResponseBody) *statsviews.SeverityView {
	v := &statsviews.SeverityView{
		Critical:      body.Critical,
		High:          body.High,
		Medium:        body.Medium,
		Low:           body.Low,
		Informational: body.Informational,
	}
	return v
}

// NewGetFixedIssuesStatsSeverityOK builds a "stats" service "Get fixed issues
// stats" endpoint result from a HTTP "OK" response.
func NewGetFixedIssuesStatsSeverityOK(body *GetFixedIssuesStatsResponseBody) *statsviews.SeverityView {
	v := &statsviews.SeverityView{
		Critical:      body.Critical,
		High:          body.High,
		Medium:        body.Medium,
		Low:           body.Low,
		Informational: body.Informational,
	}
	return v
}

// NewGetIssuesStatsIssueStatsCollectionOK builds a "stats" service "Get issues
// stats" endpoint result from a HTTP "OK" response.
func NewGetIssuesStatsIssueStatsCollectionOK(body GetIssuesStatsResponseBody) statsviews.IssueStatsCollectionView {
	v := make([]*statsviews.IssueStatsView, len(body))
	for i, val := range body {
		v[i] = &statsviews.IssueStatsView{
			ID:          val.ID,
			Summary:     val.Summary,
			CweID:       val.CweID,
			Description: val.Description,
			Open:        val.Open,
			Fixed:       val.Fixed,
		}
		if val.Recommendations != nil {
			v[i].Recommendations = make([]string, len(val.Recommendations))
			for j, val := range val.Recommendations {
				v[i].Recommendations[j] = val
			}
		}
		if val.ReferenceLinks != nil {
			v[i].ReferenceLinks = make([]string, len(val.ReferenceLinks))
			for j, val := range val.ReferenceLinks {
				v[i].ReferenceLinks[j] = val
			}
		}
	}
	return v
}

// NewGetStatsMTTRSeverityOK builds a "stats" service "Get stats MTTR" endpoint
// result from a HTTP "OK" response.
func NewGetStatsMTTRSeverityOK(body *GetStatsMTTRResponseBody) *statsviews.SeverityView {
	v := &statsviews.SeverityView{
		Critical:      body.Critical,
		High:          body.High,
		Medium:        body.Medium,
		Low:           body.Low,
		Informational: body.Informational,
	}
	return v
}
