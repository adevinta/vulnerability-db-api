// Code generated by goa v3.5.2, DO NOT EDIT.
//
// stats HTTP client types
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package client

import (
	statsviews "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/stats/views"
)

// GetSizeStatsResponseBody is the type of the "stats" service "Get size stats"
// endpoint HTTP response body.
type GetSizeStatsResponseBody struct {
	// Number of sources
	Sources *int `form:"sources,omitempty" json:"sources,omitempty" xml:"sources,omitempty"`
	// Number of targets
	Targets *int `form:"targets,omitempty" json:"targets,omitempty" xml:"targets,omitempty"`
	// Number of issues
	Issues *int `form:"issues,omitempty" json:"issues,omitempty" xml:"issues,omitempty"`
	// Number of findings
	Findings *int `form:"findings,omitempty" json:"findings,omitempty" xml:"findings,omitempty"`
	// Number of finding events
	FindingEvents *int `form:"finding_events,omitempty" json:"finding_events,omitempty" xml:"finding_events,omitempty"`
}

// GetOpenIssuesStatsResponseBody is the type of the "stats" service "Get open
// issues stats" endpoint HTTP response body.
type GetOpenIssuesStatsResponseBody struct {
	// Number of critial issues
	Critical *int `form:"critical,omitempty" json:"critical,omitempty" xml:"critical,omitempty"`
	// Number of high issues
	High *int `form:"high,omitempty" json:"high,omitempty" xml:"high,omitempty"`
	// Number of medium issues
	Medium *int `form:"medium,omitempty" json:"medium,omitempty" xml:"medium,omitempty"`
	// Number of low issues
	Low *int `form:"low,omitempty" json:"low,omitempty" xml:"low,omitempty"`
	// Number of informational issues
	Informational *int `form:"informational,omitempty" json:"informational,omitempty" xml:"informational,omitempty"`
}

// GetFixedIssuesStatsResponseBody is the type of the "stats" service "Get
// fixed issues stats" endpoint HTTP response body.
type GetFixedIssuesStatsResponseBody struct {
	// Number of critial issues
	Critical *int `form:"critical,omitempty" json:"critical,omitempty" xml:"critical,omitempty"`
	// Number of high issues
	High *int `form:"high,omitempty" json:"high,omitempty" xml:"high,omitempty"`
	// Number of medium issues
	Medium *int `form:"medium,omitempty" json:"medium,omitempty" xml:"medium,omitempty"`
	// Number of low issues
	Low *int `form:"low,omitempty" json:"low,omitempty" xml:"low,omitempty"`
	// Number of informational issues
	Informational *int `form:"informational,omitempty" json:"informational,omitempty" xml:"informational,omitempty"`
}

// GetStatsAssetsPerSeverityResponseBody is the type of the "stats" service
// "Get stats assets per severity" endpoint HTTP response body.
type GetStatsAssetsPerSeverityResponseBody struct {
	// Value for critical severity
	Critical *int `form:"critical,omitempty" json:"critical,omitempty" xml:"critical,omitempty"`
	// Value for high severity
	High *int `form:"high,omitempty" json:"high,omitempty" xml:"high,omitempty"`
	// Value for medium severity
	Medium *int `form:"medium,omitempty" json:"medium,omitempty" xml:"medium,omitempty"`
	// Value for low severity
	Low *int `form:"low,omitempty" json:"low,omitempty" xml:"low,omitempty"`
	// Value for informational severity
	Informational *int `form:"informational,omitempty" json:"informational,omitempty" xml:"informational,omitempty"`
	// Total number of issues
	Total *int `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
}

// GetIssuesStatsResponseBody is the type of the "stats" service "Get issues
// stats" endpoint HTTP response body.
type GetIssuesStatsResponseBody []*IssueStatsResponse

// GetStatsMTTRResponseBody is the type of the "stats" service "Get stats MTTR"
// endpoint HTTP response body.
type GetStatsMTTRResponseBody struct {
	// Value for critical severity
	Critical *int `form:"critical,omitempty" json:"critical,omitempty" xml:"critical,omitempty"`
	// Value for high severity
	High *int `form:"high,omitempty" json:"high,omitempty" xml:"high,omitempty"`
	// Value for medium severity
	Medium *int `form:"medium,omitempty" json:"medium,omitempty" xml:"medium,omitempty"`
	// Value for low severity
	Low *int `form:"low,omitempty" json:"low,omitempty" xml:"low,omitempty"`
	// Value for informational severity
	Informational *int `form:"informational,omitempty" json:"informational,omitempty" xml:"informational,omitempty"`
	// Total number of issues
	Total *int `form:"total,omitempty" json:"total,omitempty" xml:"total,omitempty"`
}

// GetStatsExposureResponseBody is the type of the "stats" service "Get stats
// exposure" endpoint HTTP response body.
type GetStatsExposureResponseBody struct {
	// Percentile 10 of exposure
	Percentile10 *float32 `form:"percentile_10,omitempty" json:"percentile_10,omitempty" xml:"percentile_10,omitempty"`
	// Percentile 25 of exposure or first quartile
	Percentile25 *float32 `form:"percentile_25,omitempty" json:"percentile_25,omitempty" xml:"percentile_25,omitempty"`
	// Percentile 50 of exposure or median
	Percentile50 *float32 `form:"percentile_50,omitempty" json:"percentile_50,omitempty" xml:"percentile_50,omitempty"`
	// Percentile 75 of exposure or third quartile
	Percentile75 *float32 `form:"percentile_75,omitempty" json:"percentile_75,omitempty" xml:"percentile_75,omitempty"`
	// Percentile 90 of exposure
	Percentile90 *float32 `form:"percentile_90,omitempty" json:"percentile_90,omitempty" xml:"percentile_90,omitempty"`
	// Mean exposure
	Mean *float32 `form:"mean,omitempty" json:"mean,omitempty" xml:"mean,omitempty"`
}

// GetStatsCurrentExposureResponseBody is the type of the "stats" service "Get
// stats current exposure" endpoint HTTP response body.
type GetStatsCurrentExposureResponseBody struct {
	// Percentile 10 of exposure
	Percentile10 *float32 `form:"percentile_10,omitempty" json:"percentile_10,omitempty" xml:"percentile_10,omitempty"`
	// Percentile 25 of exposure or first quartile
	Percentile25 *float32 `form:"percentile_25,omitempty" json:"percentile_25,omitempty" xml:"percentile_25,omitempty"`
	// Percentile 50 of exposure or median
	Percentile50 *float32 `form:"percentile_50,omitempty" json:"percentile_50,omitempty" xml:"percentile_50,omitempty"`
	// Percentile 75 of exposure or third quartile
	Percentile75 *float32 `form:"percentile_75,omitempty" json:"percentile_75,omitempty" xml:"percentile_75,omitempty"`
	// Percentile 90 of exposure
	Percentile90 *float32 `form:"percentile_90,omitempty" json:"percentile_90,omitempty" xml:"percentile_90,omitempty"`
	// Mean exposure
	Mean *float32 `form:"mean,omitempty" json:"mean,omitempty" xml:"mean,omitempty"`
}

// IssueStatsResponse is used to define fields on response body types.
type IssueStatsResponse struct {
	// Issue ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Issue summary
	Summary *string `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	// Common Weakness Enumeration ID
	CweID *int `form:"cwe_id,omitempty" json:"cwe_id,omitempty" xml:"cwe_id,omitempty"`
	// Issue description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Recommendations to fix the issue
	Recommendations []string `form:"recommendations,omitempty" json:"recommendations,omitempty" xml:"recommendations,omitempty"`
	// Documentation reference for the issue
	ReferenceLinks []string `form:"reference_links,omitempty" json:"reference_links,omitempty" xml:"reference_links,omitempty"`
	// Number of OPEN findings for this issue
	Open *int `form:"open,omitempty" json:"open,omitempty" xml:"open,omitempty"`
	// Number of FIXED findings for this issue
	Fixed *int `form:"fixed,omitempty" json:"fixed,omitempty" xml:"fixed,omitempty"`
}

// NewGetSizeStatsSizeOK builds a "stats" service "Get size stats" endpoint
// result from a HTTP "OK" response.
func NewGetSizeStatsSizeOK(body *GetSizeStatsResponseBody) *statsviews.SizeView {
	v := &statsviews.SizeView{
		Sources:       body.Sources,
		Targets:       body.Targets,
		Issues:        body.Issues,
		Findings:      body.Findings,
		FindingEvents: body.FindingEvents,
	}

	return v
}

// NewGetOpenIssuesStatsSeverityOK builds a "stats" service "Get open issues
// stats" endpoint result from a HTTP "OK" response.
func NewGetOpenIssuesStatsSeverityOK(body *GetOpenIssuesStatsResponseBody) *statsviews.SeverityView {
	v := &statsviews.SeverityView{
		Critical:      body.Critical,
		High:          body.High,
		Medium:        body.Medium,
		Low:           body.Low,
		Informational: body.Informational,
	}

	return v
}

// NewGetFixedIssuesStatsSeverityOK builds a "stats" service "Get fixed issues
// stats" endpoint result from a HTTP "OK" response.
func NewGetFixedIssuesStatsSeverityOK(body *GetFixedIssuesStatsResponseBody) *statsviews.SeverityView {
	v := &statsviews.SeverityView{
		Critical:      body.Critical,
		High:          body.High,
		Medium:        body.Medium,
		Low:           body.Low,
		Informational: body.Informational,
	}

	return v
}

// NewGetStatsAssetsPerSeveritySeverityAndTotalOK builds a "stats" service "Get
// stats assets per severity" endpoint result from a HTTP "OK" response.
func NewGetStatsAssetsPerSeveritySeverityAndTotalOK(body *GetStatsAssetsPerSeverityResponseBody) *statsviews.SeverityAndTotalView {
	v := &statsviews.SeverityAndTotalView{
		Critical:      body.Critical,
		High:          body.High,
		Medium:        body.Medium,
		Low:           body.Low,
		Informational: body.Informational,
		Total:         body.Total,
	}

	return v
}

// NewGetIssuesStatsIssueStatsCollectionOK builds a "stats" service "Get issues
// stats" endpoint result from a HTTP "OK" response.
func NewGetIssuesStatsIssueStatsCollectionOK(body GetIssuesStatsResponseBody) statsviews.IssueStatsCollectionView {
	v := make([]*statsviews.IssueStatsView, len(body))
	for i, val := range body {
		v[i] = unmarshalIssueStatsResponseToStatsviewsIssueStatsView(val)
	}

	return v
}

// NewGetStatsMTTRSeverityAndTotalOK builds a "stats" service "Get stats MTTR"
// endpoint result from a HTTP "OK" response.
func NewGetStatsMTTRSeverityAndTotalOK(body *GetStatsMTTRResponseBody) *statsviews.SeverityAndTotalView {
	v := &statsviews.SeverityAndTotalView{
		Critical:      body.Critical,
		High:          body.High,
		Medium:        body.Medium,
		Low:           body.Low,
		Informational: body.Informational,
		Total:         body.Total,
	}

	return v
}

// NewGetStatsExposureExposureOK builds a "stats" service "Get stats exposure"
// endpoint result from a HTTP "OK" response.
func NewGetStatsExposureExposureOK(body *GetStatsExposureResponseBody) *statsviews.ExposureView {
	v := &statsviews.ExposureView{
		Percentile10: body.Percentile10,
		Percentile25: body.Percentile25,
		Percentile50: body.Percentile50,
		Percentile75: body.Percentile75,
		Percentile90: body.Percentile90,
		Mean:         body.Mean,
	}

	return v
}

// NewGetStatsCurrentExposureCurrentExposureOK builds a "stats" service "Get
// stats current exposure" endpoint result from a HTTP "OK" response.
func NewGetStatsCurrentExposureCurrentExposureOK(body *GetStatsCurrentExposureResponseBody) *statsviews.CurrentExposureView {
	v := &statsviews.CurrentExposureView{
		Percentile10: body.Percentile10,
		Percentile25: body.Percentile25,
		Percentile50: body.Percentile50,
		Percentile75: body.Percentile75,
		Percentile90: body.Percentile90,
		Mean:         body.Mean,
	}

	return v
}
