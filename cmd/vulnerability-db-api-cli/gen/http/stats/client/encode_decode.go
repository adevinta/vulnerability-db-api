// Code generated by goa v3.0.6, DO NOT EDIT.
//
// stats HTTP client encoders and decoders
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package client

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"

	stats "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/stats"
	statsviews "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/stats/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildGetSizeStatsRequest instantiates a HTTP request object with method and
// path set to call the "stats" service "Get size stats" endpoint
func (c *Client) BuildGetSizeStatsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetSizeStatsStatsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("stats", "Get size stats", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetSizeStatsResponse returns a decoder for responses returned by the
// stats Get size stats endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeGetSizeStatsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetSizeStatsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("stats", "Get size stats", err)
			}
			p := NewGetSizeStatsSizeOK(&body)
			view := "default"
			vres := &statsviews.Size{p, view}
			if err = statsviews.ValidateSize(vres); err != nil {
				return nil, goahttp.ErrValidationError("stats", "Get size stats", err)
			}
			res := stats.NewSize(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("stats", "Get size stats", resp.StatusCode, string(body))
		}
	}
}

// BuildGetOpenIssuesStatsRequest instantiates a HTTP request object with
// method and path set to call the "stats" service "Get open issues stats"
// endpoint
func (c *Client) BuildGetOpenIssuesStatsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetOpenIssuesStatsStatsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("stats", "Get open issues stats", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetOpenIssuesStatsRequest returns an encoder for requests sent to the
// stats Get open issues stats server.
func EncodeGetOpenIssuesStatsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*stats.GetOpenIssuesStatsPayload)
		if !ok {
			return goahttp.ErrInvalidType("stats", "Get open issues stats", "*stats.GetOpenIssuesStatsPayload", v)
		}
		values := req.URL.Query()
		if p.Tag != nil {
			values.Add("tag", *p.Tag)
		}
		if p.MinDate != nil {
			values.Add("minDate", *p.MinDate)
		}
		if p.MaxDate != nil {
			values.Add("maxDate", *p.MaxDate)
		}
		if p.AtDate != nil {
			values.Add("atDate", *p.AtDate)
		}
		if p.Identifiers != nil {
			values.Add("identifiers", *p.Identifiers)
		}
		if p.Labels != nil {
			values.Add("labels", *p.Labels)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetOpenIssuesStatsResponse returns a decoder for responses returned by
// the stats Get open issues stats endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeGetOpenIssuesStatsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetOpenIssuesStatsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("stats", "Get open issues stats", err)
			}
			p := NewGetOpenIssuesStatsSeverityOK(&body)
			view := "default"
			vres := &statsviews.Severity{p, view}
			if err = statsviews.ValidateSeverity(vres); err != nil {
				return nil, goahttp.ErrValidationError("stats", "Get open issues stats", err)
			}
			res := stats.NewSeverity(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("stats", "Get open issues stats", resp.StatusCode, string(body))
		}
	}
}

// BuildGetFixedIssuesStatsRequest instantiates a HTTP request object with
// method and path set to call the "stats" service "Get fixed issues stats"
// endpoint
func (c *Client) BuildGetFixedIssuesStatsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetFixedIssuesStatsStatsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("stats", "Get fixed issues stats", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetFixedIssuesStatsRequest returns an encoder for requests sent to the
// stats Get fixed issues stats server.
func EncodeGetFixedIssuesStatsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*stats.GetFixedIssuesStatsPayload)
		if !ok {
			return goahttp.ErrInvalidType("stats", "Get fixed issues stats", "*stats.GetFixedIssuesStatsPayload", v)
		}
		values := req.URL.Query()
		if p.Tag != nil {
			values.Add("tag", *p.Tag)
		}
		if p.MinDate != nil {
			values.Add("minDate", *p.MinDate)
		}
		if p.MaxDate != nil {
			values.Add("maxDate", *p.MaxDate)
		}
		if p.AtDate != nil {
			values.Add("atDate", *p.AtDate)
		}
		if p.Identifiers != nil {
			values.Add("identifiers", *p.Identifiers)
		}
		if p.Labels != nil {
			values.Add("labels", *p.Labels)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetFixedIssuesStatsResponse returns a decoder for responses returned
// by the stats Get fixed issues stats endpoint. restoreBody controls whether
// the response body should be restored after having been read.
func DecodeGetFixedIssuesStatsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetFixedIssuesStatsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("stats", "Get fixed issues stats", err)
			}
			p := NewGetFixedIssuesStatsSeverityOK(&body)
			view := "default"
			vres := &statsviews.Severity{p, view}
			if err = statsviews.ValidateSeverity(vres); err != nil {
				return nil, goahttp.ErrValidationError("stats", "Get fixed issues stats", err)
			}
			res := stats.NewSeverity(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("stats", "Get fixed issues stats", resp.StatusCode, string(body))
		}
	}
}

// BuildGetIssuesStatsRequest instantiates a HTTP request object with method
// and path set to call the "stats" service "Get issues stats" endpoint
func (c *Client) BuildGetIssuesStatsRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetIssuesStatsStatsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("stats", "Get issues stats", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetIssuesStatsRequest returns an encoder for requests sent to the
// stats Get issues stats server.
func EncodeGetIssuesStatsRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*stats.GetIssuesStatsPayload)
		if !ok {
			return goahttp.ErrInvalidType("stats", "Get issues stats", "*stats.GetIssuesStatsPayload", v)
		}
		values := req.URL.Query()
		if p.MinDate != nil {
			values.Add("minDate", *p.MinDate)
		}
		if p.MaxDate != nil {
			values.Add("maxDate", *p.MaxDate)
		}
		if p.MinScore != nil {
			values.Add("minScore", fmt.Sprintf("%v", *p.MinScore))
		}
		if p.MaxScore != nil {
			values.Add("maxScore", fmt.Sprintf("%v", *p.MaxScore))
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetIssuesStatsResponse returns a decoder for responses returned by the
// stats Get issues stats endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeGetIssuesStatsResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetIssuesStatsResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("stats", "Get issues stats", err)
			}
			p := NewGetIssuesStatsIssueStatsCollectionOK(body)
			view := "default"
			vres := statsviews.IssueStatsCollection{p, view}
			if err = statsviews.ValidateIssueStatsCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("stats", "Get issues stats", err)
			}
			res := stats.NewIssueStatsCollection(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("stats", "Get issues stats", resp.StatusCode, string(body))
		}
	}
}

// BuildGetStatsMTTRRequest instantiates a HTTP request object with method and
// path set to call the "stats" service "Get stats MTTR" endpoint
func (c *Client) BuildGetStatsMTTRRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetStatsMTTRStatsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("stats", "Get stats MTTR", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetStatsMTTRRequest returns an encoder for requests sent to the stats
// Get stats MTTR server.
func EncodeGetStatsMTTRRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*stats.GetStatsMTTRPayload)
		if !ok {
			return goahttp.ErrInvalidType("stats", "Get stats MTTR", "*stats.GetStatsMTTRPayload", v)
		}
		values := req.URL.Query()
		if p.Tag != nil {
			values.Add("tag", *p.Tag)
		}
		if p.MinDate != nil {
			values.Add("minDate", *p.MinDate)
		}
		if p.MaxDate != nil {
			values.Add("maxDate", *p.MaxDate)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetStatsMTTRResponse returns a decoder for responses returned by the
// stats Get stats MTTR endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeGetStatsMTTRResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetStatsMTTRResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("stats", "Get stats MTTR", err)
			}
			p := NewGetStatsMTTRSeverityOK(&body)
			view := "default"
			vres := &statsviews.Severity{p, view}
			if err = statsviews.ValidateSeverity(vres); err != nil {
				return nil, goahttp.ErrValidationError("stats", "Get stats MTTR", err)
			}
			res := stats.NewSeverity(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("stats", "Get stats MTTR", resp.StatusCode, string(body))
		}
	}
}

// BuildGetStatsExposureRequest instantiates a HTTP request object with method
// and path set to call the "stats" service "Get stats exposure" endpoint
func (c *Client) BuildGetStatsExposureRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetStatsExposureStatsPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("stats", "Get stats exposure", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeGetStatsExposureRequest returns an encoder for requests sent to the
// stats Get stats exposure server.
func EncodeGetStatsExposureRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*stats.GetStatsExposurePayload)
		if !ok {
			return goahttp.ErrInvalidType("stats", "Get stats exposure", "*stats.GetStatsExposurePayload", v)
		}
		values := req.URL.Query()
		if p.Tag != nil {
			values.Add("tag", *p.Tag)
		}
		if p.AtDate != nil {
			values.Add("atDate", *p.AtDate)
		}
		if p.MinScore != nil {
			values.Add("minScore", fmt.Sprintf("%v", *p.MinScore))
		}
		if p.MaxScore != nil {
			values.Add("maxScore", fmt.Sprintf("%v", *p.MaxScore))
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeGetStatsExposureResponse returns a decoder for responses returned by
// the stats Get stats exposure endpoint. restoreBody controls whether the
// response body should be restored after having been read.
func DecodeGetStatsExposureResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetStatsExposureResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("stats", "Get stats exposure", err)
			}
			p := NewGetStatsExposureExposureOK(&body)
			view := "default"
			vres := &statsviews.Exposure{p, view}
			if err = statsviews.ValidateExposure(vres); err != nil {
				return nil, goahttp.ErrValidationError("stats", "Get stats exposure", err)
			}
			res := stats.NewExposure(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("stats", "Get stats exposure", resp.StatusCode, string(body))
		}
	}
}
