// Code generated by goa v3.0.6, DO NOT EDIT.
//
// stats HTTP client CLI support package
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package client

import (
	"fmt"
	"strconv"

	stats "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/stats"
)

// BuildGetOpenIssuesStatsPayload builds the payload for the stats Get open
// issues stats endpoint from CLI flags.
func BuildGetOpenIssuesStatsPayload(statsGetOpenIssuesStatsTag string, statsGetOpenIssuesStatsMinDate string, statsGetOpenIssuesStatsMaxDate string, statsGetOpenIssuesStatsAtDate string, statsGetOpenIssuesStatsIdentifiers string) (*stats.GetOpenIssuesStatsPayload, error) {
	var tag *string
	{
		if statsGetOpenIssuesStatsTag != "" {
			tag = &statsGetOpenIssuesStatsTag
		}
	}
	var minDate *string
	{
		if statsGetOpenIssuesStatsMinDate != "" {
			minDate = &statsGetOpenIssuesStatsMinDate
		}
	}
	var maxDate *string
	{
		if statsGetOpenIssuesStatsMaxDate != "" {
			maxDate = &statsGetOpenIssuesStatsMaxDate
		}
	}
	var atDate *string
	{
		if statsGetOpenIssuesStatsAtDate != "" {
			atDate = &statsGetOpenIssuesStatsAtDate
		}
	}
	var identifiers *string
	{
		if statsGetOpenIssuesStatsIdentifiers != "" {
			identifiers = &statsGetOpenIssuesStatsIdentifiers
		}
	}
	payload := &stats.GetOpenIssuesStatsPayload{
		Tag:         tag,
		MinDate:     minDate,
		MaxDate:     maxDate,
		AtDate:      atDate,
		Identifiers: identifiers,
	}
	return payload, nil
}

// BuildGetFixedIssuesStatsPayload builds the payload for the stats Get fixed
// issues stats endpoint from CLI flags.
func BuildGetFixedIssuesStatsPayload(statsGetFixedIssuesStatsTag string, statsGetFixedIssuesStatsMinDate string, statsGetFixedIssuesStatsMaxDate string, statsGetFixedIssuesStatsAtDate string) (*stats.GetFixedIssuesStatsPayload, error) {
	var tag *string
	{
		if statsGetFixedIssuesStatsTag != "" {
			tag = &statsGetFixedIssuesStatsTag
		}
	}
	var minDate *string
	{
		if statsGetFixedIssuesStatsMinDate != "" {
			minDate = &statsGetFixedIssuesStatsMinDate
		}
	}
	var maxDate *string
	{
		if statsGetFixedIssuesStatsMaxDate != "" {
			maxDate = &statsGetFixedIssuesStatsMaxDate
		}
	}
	var atDate *string
	{
		if statsGetFixedIssuesStatsAtDate != "" {
			atDate = &statsGetFixedIssuesStatsAtDate
		}
	}
	payload := &stats.GetFixedIssuesStatsPayload{
		Tag:     tag,
		MinDate: minDate,
		MaxDate: maxDate,
		AtDate:  atDate,
	}
	return payload, nil
}

// BuildGetIssuesStatsPayload builds the payload for the stats Get issues stats
// endpoint from CLI flags.
func BuildGetIssuesStatsPayload(statsGetIssuesStatsMinDate string, statsGetIssuesStatsMaxDate string, statsGetIssuesStatsMinScore string, statsGetIssuesStatsMaxScore string) (*stats.GetIssuesStatsPayload, error) {
	var err error
	var minDate *string
	{
		if statsGetIssuesStatsMinDate != "" {
			minDate = &statsGetIssuesStatsMinDate
		}
	}
	var maxDate *string
	{
		if statsGetIssuesStatsMaxDate != "" {
			maxDate = &statsGetIssuesStatsMaxDate
		}
	}
	var minScore *int
	{
		if statsGetIssuesStatsMinScore != "" {
			var v int64
			v, err = strconv.ParseInt(statsGetIssuesStatsMinScore, 10, 64)
			val := int(v)
			minScore = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for minScore, must be INT")
			}
		}
	}
	var maxScore *int
	{
		if statsGetIssuesStatsMaxScore != "" {
			var v int64
			v, err = strconv.ParseInt(statsGetIssuesStatsMaxScore, 10, 64)
			val := int(v)
			maxScore = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for maxScore, must be INT")
			}
		}
	}
	payload := &stats.GetIssuesStatsPayload{
		MinDate:  minDate,
		MaxDate:  maxDate,
		MinScore: minScore,
		MaxScore: maxScore,
	}
	return payload, nil
}

// BuildGetStatsMTTRPayload builds the payload for the stats Get stats MTTR
// endpoint from CLI flags.
func BuildGetStatsMTTRPayload(statsGetStatsMTTRTag string, statsGetStatsMTTRMinDate string, statsGetStatsMTTRMaxDate string) (*stats.GetStatsMTTRPayload, error) {
	var tag *string
	{
		if statsGetStatsMTTRTag != "" {
			tag = &statsGetStatsMTTRTag
		}
	}
	var minDate *string
	{
		if statsGetStatsMTTRMinDate != "" {
			minDate = &statsGetStatsMTTRMinDate
		}
	}
	var maxDate *string
	{
		if statsGetStatsMTTRMaxDate != "" {
			maxDate = &statsGetStatsMTTRMaxDate
		}
	}
	payload := &stats.GetStatsMTTRPayload{
		Tag:     tag,
		MinDate: minDate,
		MaxDate: maxDate,
	}
	return payload, nil
}
