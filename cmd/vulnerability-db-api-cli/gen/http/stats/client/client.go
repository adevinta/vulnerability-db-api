// Code generated by goa v3.5.2, DO NOT EDIT.
//
// stats client HTTP transport
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the stats service endpoint HTTP clients.
type Client struct {
	// GetSizeStats Doer is the HTTP client used to make requests to the Get size
	// stats endpoint.
	GetSizeStatsDoer goahttp.Doer

	// GetOpenIssuesStats Doer is the HTTP client used to make requests to the Get
	// open issues stats endpoint.
	GetOpenIssuesStatsDoer goahttp.Doer

	// GetFixedIssuesStats Doer is the HTTP client used to make requests to the Get
	// fixed issues stats endpoint.
	GetFixedIssuesStatsDoer goahttp.Doer

	// GetIssuesStats Doer is the HTTP client used to make requests to the Get
	// issues stats endpoint.
	GetIssuesStatsDoer goahttp.Doer

	// GetStatsMTTR Doer is the HTTP client used to make requests to the Get stats
	// MTTR endpoint.
	GetStatsMTTRDoer goahttp.Doer

	// GetStatsExposure Doer is the HTTP client used to make requests to the Get
	// stats exposure endpoint.
	GetStatsExposureDoer goahttp.Doer

	// GetStatsCurrentExposure Doer is the HTTP client used to make requests to the
	// Get stats current exposure endpoint.
	GetStatsCurrentExposureDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the stats service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		GetSizeStatsDoer:            doer,
		GetOpenIssuesStatsDoer:      doer,
		GetFixedIssuesStatsDoer:     doer,
		GetIssuesStatsDoer:          doer,
		GetStatsMTTRDoer:            doer,
		GetStatsExposureDoer:        doer,
		GetStatsCurrentExposureDoer: doer,
		RestoreResponseBody:         restoreBody,
		scheme:                      scheme,
		host:                        host,
		decoder:                     dec,
		encoder:                     enc,
	}
}

// GetSizeStats returns an endpoint that makes HTTP requests to the stats
// service Get size stats server.
func (c *Client) GetSizeStats() goa.Endpoint {
	var (
		decodeResponse = DecodeGetSizeStatsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetSizeStatsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetSizeStatsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("stats", "Get size stats", err)
		}
		return decodeResponse(resp)
	}
}

// GetOpenIssuesStats returns an endpoint that makes HTTP requests to the stats
// service Get open issues stats server.
func (c *Client) GetOpenIssuesStats() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetOpenIssuesStatsRequest(c.encoder)
		decodeResponse = DecodeGetOpenIssuesStatsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetOpenIssuesStatsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetOpenIssuesStatsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("stats", "Get open issues stats", err)
		}
		return decodeResponse(resp)
	}
}

// GetFixedIssuesStats returns an endpoint that makes HTTP requests to the
// stats service Get fixed issues stats server.
func (c *Client) GetFixedIssuesStats() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetFixedIssuesStatsRequest(c.encoder)
		decodeResponse = DecodeGetFixedIssuesStatsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetFixedIssuesStatsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetFixedIssuesStatsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("stats", "Get fixed issues stats", err)
		}
		return decodeResponse(resp)
	}
}

// GetIssuesStats returns an endpoint that makes HTTP requests to the stats
// service Get issues stats server.
func (c *Client) GetIssuesStats() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetIssuesStatsRequest(c.encoder)
		decodeResponse = DecodeGetIssuesStatsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetIssuesStatsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetIssuesStatsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("stats", "Get issues stats", err)
		}
		return decodeResponse(resp)
	}
}

// GetStatsMTTR returns an endpoint that makes HTTP requests to the stats
// service Get stats MTTR server.
func (c *Client) GetStatsMTTR() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetStatsMTTRRequest(c.encoder)
		decodeResponse = DecodeGetStatsMTTRResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetStatsMTTRRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetStatsMTTRDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("stats", "Get stats MTTR", err)
		}
		return decodeResponse(resp)
	}
}

// GetStatsExposure returns an endpoint that makes HTTP requests to the stats
// service Get stats exposure server.
func (c *Client) GetStatsExposure() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetStatsExposureRequest(c.encoder)
		decodeResponse = DecodeGetStatsExposureResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetStatsExposureRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetStatsExposureDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("stats", "Get stats exposure", err)
		}
		return decodeResponse(resp)
	}
}

// GetStatsCurrentExposure returns an endpoint that makes HTTP requests to the
// stats service Get stats current exposure server.
func (c *Client) GetStatsCurrentExposure() goa.Endpoint {
	var (
		encodeRequest  = EncodeGetStatsCurrentExposureRequest(c.encoder)
		decodeResponse = DecodeGetStatsCurrentExposureResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetStatsCurrentExposureRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetStatsCurrentExposureDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("stats", "Get stats current exposure", err)
		}
		return decodeResponse(resp)
	}
}
