// Code generated by goa v3.0.6, DO NOT EDIT.
//
// stats HTTP server types
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package server

import (
	stats "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/stats"
	statsviews "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/stats/views"
)

// GetSizeStatsResponseBody is the type of the "stats" service "Get size stats"
// endpoint HTTP response body.
type GetSizeStatsResponseBody struct {
	// Number of sources
	Sources *int `form:"sources,omitempty" json:"sources,omitempty" xml:"sources,omitempty"`
	// Number of targets
	Targets *int `form:"targets,omitempty" json:"targets,omitempty" xml:"targets,omitempty"`
	// Number of issues
	Issues *int `form:"issues,omitempty" json:"issues,omitempty" xml:"issues,omitempty"`
	// Number of findings
	Findings *int `form:"findings,omitempty" json:"findings,omitempty" xml:"findings,omitempty"`
	// Number of finding events
	FindingEvents *int `form:"finding_events,omitempty" json:"finding_events,omitempty" xml:"finding_events,omitempty"`
}

// GetOpenIssuesStatsResponseBody is the type of the "stats" service "Get open
// issues stats" endpoint HTTP response body.
type GetOpenIssuesStatsResponseBody struct {
	// Number of critial issues
	Critical *int `form:"critical,omitempty" json:"critical,omitempty" xml:"critical,omitempty"`
	// Number of high issues
	High *int `form:"high,omitempty" json:"high,omitempty" xml:"high,omitempty"`
	// Number of medium issues
	Medium *int `form:"medium,omitempty" json:"medium,omitempty" xml:"medium,omitempty"`
	// Number of low issues
	Low *int `form:"low,omitempty" json:"low,omitempty" xml:"low,omitempty"`
	// Number of informational issues
	Informational *int `form:"informational,omitempty" json:"informational,omitempty" xml:"informational,omitempty"`
}

// GetFixedIssuesStatsResponseBody is the type of the "stats" service "Get
// fixed issues stats" endpoint HTTP response body.
type GetFixedIssuesStatsResponseBody struct {
	// Number of critial issues
	Critical *int `form:"critical,omitempty" json:"critical,omitempty" xml:"critical,omitempty"`
	// Number of high issues
	High *int `form:"high,omitempty" json:"high,omitempty" xml:"high,omitempty"`
	// Number of medium issues
	Medium *int `form:"medium,omitempty" json:"medium,omitempty" xml:"medium,omitempty"`
	// Number of low issues
	Low *int `form:"low,omitempty" json:"low,omitempty" xml:"low,omitempty"`
	// Number of informational issues
	Informational *int `form:"informational,omitempty" json:"informational,omitempty" xml:"informational,omitempty"`
}

// IssueStatsResponseCollection is the type of the "stats" service "Get issues
// stats" endpoint HTTP response body.
type IssueStatsResponseCollection []*IssueStatsResponse

// GetStatsMTTRResponseBody is the type of the "stats" service "Get stats MTTR"
// endpoint HTTP response body.
type GetStatsMTTRResponseBody struct {
	// Number of critial issues
	Critical *int `form:"critical,omitempty" json:"critical,omitempty" xml:"critical,omitempty"`
	// Number of high issues
	High *int `form:"high,omitempty" json:"high,omitempty" xml:"high,omitempty"`
	// Number of medium issues
	Medium *int `form:"medium,omitempty" json:"medium,omitempty" xml:"medium,omitempty"`
	// Number of low issues
	Low *int `form:"low,omitempty" json:"low,omitempty" xml:"low,omitempty"`
	// Number of informational issues
	Informational *int `form:"informational,omitempty" json:"informational,omitempty" xml:"informational,omitempty"`
}

// IssueStatsResponse is used to define fields on response body types.
type IssueStatsResponse struct {
	// Issue ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Issue summary
	Summary *string `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	// Common Weakness Enumeration ID
	CweID *int `form:"cwe_id,omitempty" json:"cwe_id,omitempty" xml:"cwe_id,omitempty"`
	// Issue description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Recommendations to fix the issue
	Recommendations []string `form:"recommendations,omitempty" json:"recommendations,omitempty" xml:"recommendations,omitempty"`
	// Documentation reference for the issue
	ReferenceLinks []string `form:"reference_links,omitempty" json:"reference_links,omitempty" xml:"reference_links,omitempty"`
	// Number of OPEN findings for this issue
	Open *int `form:"open,omitempty" json:"open,omitempty" xml:"open,omitempty"`
	// Number of FIXED findings for this issue
	Fixed *int `form:"fixed,omitempty" json:"fixed,omitempty" xml:"fixed,omitempty"`
}

// NewGetSizeStatsResponseBody builds the HTTP response body from the result of
// the "Get size stats" endpoint of the "stats" service.
func NewGetSizeStatsResponseBody(res *statsviews.SizeView) *GetSizeStatsResponseBody {
	body := &GetSizeStatsResponseBody{
		Sources:       res.Sources,
		Targets:       res.Targets,
		Issues:        res.Issues,
		Findings:      res.Findings,
		FindingEvents: res.FindingEvents,
	}
	return body
}

// NewGetOpenIssuesStatsResponseBody builds the HTTP response body from the
// result of the "Get open issues stats" endpoint of the "stats" service.
func NewGetOpenIssuesStatsResponseBody(res *statsviews.SeverityView) *GetOpenIssuesStatsResponseBody {
	body := &GetOpenIssuesStatsResponseBody{
		Critical:      res.Critical,
		High:          res.High,
		Medium:        res.Medium,
		Low:           res.Low,
		Informational: res.Informational,
	}
	return body
}

// NewGetFixedIssuesStatsResponseBody builds the HTTP response body from the
// result of the "Get fixed issues stats" endpoint of the "stats" service.
func NewGetFixedIssuesStatsResponseBody(res *statsviews.SeverityView) *GetFixedIssuesStatsResponseBody {
	body := &GetFixedIssuesStatsResponseBody{
		Critical:      res.Critical,
		High:          res.High,
		Medium:        res.Medium,
		Low:           res.Low,
		Informational: res.Informational,
	}
	return body
}

// NewIssueStatsResponseCollection builds the HTTP response body from the
// result of the "Get issues stats" endpoint of the "stats" service.
func NewIssueStatsResponseCollection(res statsviews.IssueStatsCollectionView) IssueStatsResponseCollection {
	body := make([]*IssueStatsResponse, len(res))
	for i, val := range res {
		body[i] = &IssueStatsResponse{
			ID:          val.ID,
			Summary:     val.Summary,
			CweID:       val.CweID,
			Description: val.Description,
			Open:        val.Open,
			Fixed:       val.Fixed,
		}
		if val.Recommendations != nil {
			body[i].Recommendations = make([]string, len(val.Recommendations))
			for j, val := range val.Recommendations {
				body[i].Recommendations[j] = val
			}
		}
		if val.ReferenceLinks != nil {
			body[i].ReferenceLinks = make([]string, len(val.ReferenceLinks))
			for j, val := range val.ReferenceLinks {
				body[i].ReferenceLinks[j] = val
			}
		}
	}
	return body
}

// NewGetStatsMTTRResponseBody builds the HTTP response body from the result of
// the "Get stats MTTR" endpoint of the "stats" service.
func NewGetStatsMTTRResponseBody(res *statsviews.SeverityView) *GetStatsMTTRResponseBody {
	body := &GetStatsMTTRResponseBody{
		Critical:      res.Critical,
		High:          res.High,
		Medium:        res.Medium,
		Low:           res.Low,
		Informational: res.Informational,
	}
	return body
}

// NewGetOpenIssuesStatsPayload builds a stats service Get open issues stats
// endpoint payload.
func NewGetOpenIssuesStatsPayload(tag *string, minDate *string, maxDate *string, atDate *string) *stats.GetOpenIssuesStatsPayload {
	return &stats.GetOpenIssuesStatsPayload{
		Tag:     tag,
		MinDate: minDate,
		MaxDate: maxDate,
		AtDate:  atDate,
	}
}

// NewGetFixedIssuesStatsPayload builds a stats service Get fixed issues stats
// endpoint payload.
func NewGetFixedIssuesStatsPayload(tag *string, minDate *string, maxDate *string, atDate *string) *stats.GetFixedIssuesStatsPayload {
	return &stats.GetFixedIssuesStatsPayload{
		Tag:     tag,
		MinDate: minDate,
		MaxDate: maxDate,
		AtDate:  atDate,
	}
}

// NewGetIssuesStatsPayload builds a stats service Get issues stats endpoint
// payload.
func NewGetIssuesStatsPayload(minDate *string, maxDate *string, minScore *int, maxScore *int) *stats.GetIssuesStatsPayload {
	return &stats.GetIssuesStatsPayload{
		MinDate:  minDate,
		MaxDate:  maxDate,
		MinScore: minScore,
		MaxScore: maxScore,
	}
}

// NewGetStatsMTTRPayload builds a stats service Get stats MTTR endpoint
// payload.
func NewGetStatsMTTRPayload(tag *string, minDate *string, maxDate *string) *stats.GetStatsMTTRPayload {
	return &stats.GetStatsMTTRPayload{
		Tag:     tag,
		MinDate: minDate,
		MaxDate: maxDate,
	}
}
