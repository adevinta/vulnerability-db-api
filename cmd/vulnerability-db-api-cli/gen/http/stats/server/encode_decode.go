// Code generated by goa v3.0.6, DO NOT EDIT.
//
// stats HTTP server encoders and decoders
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package server

import (
	"context"
	"net/http"
	"strconv"

	statsviews "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/stats/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeGetSizeStatsResponse returns an encoder for responses returned by the
// stats Get size stats endpoint.
func EncodeGetSizeStatsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*statsviews.Size)
		enc := encoder(ctx, w)
		body := NewGetSizeStatsResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// EncodeGetOpenIssuesStatsResponse returns an encoder for responses returned
// by the stats Get open issues stats endpoint.
func EncodeGetOpenIssuesStatsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*statsviews.Severity)
		enc := encoder(ctx, w)
		body := NewGetOpenIssuesStatsResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetOpenIssuesStatsRequest returns a decoder for requests sent to the
// stats Get open issues stats endpoint.
func DecodeGetOpenIssuesStatsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			tag         *string
			minDate     *string
			maxDate     *string
			atDate      *string
			identifiers *string
		)
		tagRaw := r.URL.Query().Get("tag")
		if tagRaw != "" {
			tag = &tagRaw
		}
		minDateRaw := r.URL.Query().Get("minDate")
		if minDateRaw != "" {
			minDate = &minDateRaw
		}
		maxDateRaw := r.URL.Query().Get("maxDate")
		if maxDateRaw != "" {
			maxDate = &maxDateRaw
		}
		atDateRaw := r.URL.Query().Get("atDate")
		if atDateRaw != "" {
			atDate = &atDateRaw
		}
		identifiersRaw := r.URL.Query().Get("identifiers")
		if identifiersRaw != "" {
			identifiers = &identifiersRaw
		}
		payload := NewGetOpenIssuesStatsPayload(tag, minDate, maxDate, atDate, identifiers)

		return payload, nil
	}
}

// EncodeGetFixedIssuesStatsResponse returns an encoder for responses returned
// by the stats Get fixed issues stats endpoint.
func EncodeGetFixedIssuesStatsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*statsviews.Severity)
		enc := encoder(ctx, w)
		body := NewGetFixedIssuesStatsResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetFixedIssuesStatsRequest returns a decoder for requests sent to the
// stats Get fixed issues stats endpoint.
func DecodeGetFixedIssuesStatsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			tag     *string
			minDate *string
			maxDate *string
			atDate  *string
		)
		tagRaw := r.URL.Query().Get("tag")
		if tagRaw != "" {
			tag = &tagRaw
		}
		minDateRaw := r.URL.Query().Get("minDate")
		if minDateRaw != "" {
			minDate = &minDateRaw
		}
		maxDateRaw := r.URL.Query().Get("maxDate")
		if maxDateRaw != "" {
			maxDate = &maxDateRaw
		}
		atDateRaw := r.URL.Query().Get("atDate")
		if atDateRaw != "" {
			atDate = &atDateRaw
		}
		payload := NewGetFixedIssuesStatsPayload(tag, minDate, maxDate, atDate)

		return payload, nil
	}
}

// EncodeGetIssuesStatsResponse returns an encoder for responses returned by
// the stats Get issues stats endpoint.
func EncodeGetIssuesStatsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(statsviews.IssueStatsCollection)
		enc := encoder(ctx, w)
		body := NewIssueStatsResponseCollection(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetIssuesStatsRequest returns a decoder for requests sent to the stats
// Get issues stats endpoint.
func DecodeGetIssuesStatsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			minDate  *string
			maxDate  *string
			minScore *int
			maxScore *int
			err      error
		)
		minDateRaw := r.URL.Query().Get("minDate")
		if minDateRaw != "" {
			minDate = &minDateRaw
		}
		maxDateRaw := r.URL.Query().Get("maxDate")
		if maxDateRaw != "" {
			maxDate = &maxDateRaw
		}
		{
			minScoreRaw := r.URL.Query().Get("minScore")
			if minScoreRaw != "" {
				v, err2 := strconv.ParseInt(minScoreRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("minScore", minScoreRaw, "integer"))
				}
				pv := int(v)
				minScore = &pv
			}
		}
		{
			maxScoreRaw := r.URL.Query().Get("maxScore")
			if maxScoreRaw != "" {
				v, err2 := strconv.ParseInt(maxScoreRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("maxScore", maxScoreRaw, "integer"))
				}
				pv := int(v)
				maxScore = &pv
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetIssuesStatsPayload(minDate, maxDate, minScore, maxScore)

		return payload, nil
	}
}

// EncodeGetStatsMTTRResponse returns an encoder for responses returned by the
// stats Get stats MTTR endpoint.
func EncodeGetStatsMTTRResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*statsviews.Severity)
		enc := encoder(ctx, w)
		body := NewGetStatsMTTRResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetStatsMTTRRequest returns a decoder for requests sent to the stats
// Get stats MTTR endpoint.
func DecodeGetStatsMTTRRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			tag     *string
			minDate *string
			maxDate *string
		)
		tagRaw := r.URL.Query().Get("tag")
		if tagRaw != "" {
			tag = &tagRaw
		}
		minDateRaw := r.URL.Query().Get("minDate")
		if minDateRaw != "" {
			minDate = &minDateRaw
		}
		maxDateRaw := r.URL.Query().Get("maxDate")
		if maxDateRaw != "" {
			maxDate = &maxDateRaw
		}
		payload := NewGetStatsMTTRPayload(tag, minDate, maxDate)

		return payload, nil
	}
}

// EncodeGetStatsExposureResponse returns an encoder for responses returned by
// the stats Get stats exposure endpoint.
func EncodeGetStatsExposureResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*statsviews.Exposure)
		enc := encoder(ctx, w)
		body := NewGetStatsExposureResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetStatsExposureRequest returns a decoder for requests sent to the
// stats Get stats exposure endpoint.
func DecodeGetStatsExposureRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			tag      *string
			atDate   *string
			minScore *int
			maxScore *int
			err      error
		)
		tagRaw := r.URL.Query().Get("tag")
		if tagRaw != "" {
			tag = &tagRaw
		}
		atDateRaw := r.URL.Query().Get("atDate")
		if atDateRaw != "" {
			atDate = &atDateRaw
		}
		{
			minScoreRaw := r.URL.Query().Get("minScore")
			if minScoreRaw != "" {
				v, err2 := strconv.ParseInt(minScoreRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("minScore", minScoreRaw, "integer"))
				}
				pv := int(v)
				minScore = &pv
			}
		}
		{
			maxScoreRaw := r.URL.Query().Get("maxScore")
			if maxScoreRaw != "" {
				v, err2 := strconv.ParseInt(maxScoreRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("maxScore", maxScoreRaw, "integer"))
				}
				pv := int(v)
				maxScore = &pv
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewGetStatsExposurePayload(tag, atDate, minScore, maxScore)

		return payload, nil
	}
}
