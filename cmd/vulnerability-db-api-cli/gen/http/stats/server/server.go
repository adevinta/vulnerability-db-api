// Code generated by goa v3.14.0, DO NOT EDIT.
//
// stats HTTP server
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package server

import (
	"context"
	"net/http"

	stats "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/stats"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the stats service endpoint HTTP handlers.
type Server struct {
	Mounts                    []*MountPoint
	GetSizeStats              http.Handler
	GetOpenIssuesStats        http.Handler
	GetFixedIssuesStats       http.Handler
	GetStatsAssetsPerSeverity http.Handler
	GetIssuesStats            http.Handler
	GetStatsMTTR              http.Handler
	GetStatsExposure          http.Handler
	GetStatsCurrentExposure   http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the stats service endpoints using the
// provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *stats.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"GetSizeStats", "GET", "/stats/size"},
			{"GetOpenIssuesStats", "GET", "/stats/open"},
			{"GetFixedIssuesStats", "GET", "/stats/fixed"},
			{"GetStatsAssetsPerSeverity", "GET", "/stats/assets"},
			{"GetIssuesStats", "GET", "/stats/issues"},
			{"GetStatsMTTR", "GET", "/stats/mttr"},
			{"GetStatsExposure", "GET", "/stats/exposure"},
			{"GetStatsCurrentExposure", "GET", "/stats/exposure/current"},
		},
		GetSizeStats:              NewGetSizeStatsHandler(e.GetSizeStats, mux, decoder, encoder, errhandler, formatter),
		GetOpenIssuesStats:        NewGetOpenIssuesStatsHandler(e.GetOpenIssuesStats, mux, decoder, encoder, errhandler, formatter),
		GetFixedIssuesStats:       NewGetFixedIssuesStatsHandler(e.GetFixedIssuesStats, mux, decoder, encoder, errhandler, formatter),
		GetStatsAssetsPerSeverity: NewGetStatsAssetsPerSeverityHandler(e.GetStatsAssetsPerSeverity, mux, decoder, encoder, errhandler, formatter),
		GetIssuesStats:            NewGetIssuesStatsHandler(e.GetIssuesStats, mux, decoder, encoder, errhandler, formatter),
		GetStatsMTTR:              NewGetStatsMTTRHandler(e.GetStatsMTTR, mux, decoder, encoder, errhandler, formatter),
		GetStatsExposure:          NewGetStatsExposureHandler(e.GetStatsExposure, mux, decoder, encoder, errhandler, formatter),
		GetStatsCurrentExposure:   NewGetStatsCurrentExposureHandler(e.GetStatsCurrentExposure, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "stats" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.GetSizeStats = m(s.GetSizeStats)
	s.GetOpenIssuesStats = m(s.GetOpenIssuesStats)
	s.GetFixedIssuesStats = m(s.GetFixedIssuesStats)
	s.GetStatsAssetsPerSeverity = m(s.GetStatsAssetsPerSeverity)
	s.GetIssuesStats = m(s.GetIssuesStats)
	s.GetStatsMTTR = m(s.GetStatsMTTR)
	s.GetStatsExposure = m(s.GetStatsExposure)
	s.GetStatsCurrentExposure = m(s.GetStatsCurrentExposure)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return stats.MethodNames[:] }

// Mount configures the mux to serve the stats endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountGetSizeStatsHandler(mux, h.GetSizeStats)
	MountGetOpenIssuesStatsHandler(mux, h.GetOpenIssuesStats)
	MountGetFixedIssuesStatsHandler(mux, h.GetFixedIssuesStats)
	MountGetStatsAssetsPerSeverityHandler(mux, h.GetStatsAssetsPerSeverity)
	MountGetIssuesStatsHandler(mux, h.GetIssuesStats)
	MountGetStatsMTTRHandler(mux, h.GetStatsMTTR)
	MountGetStatsExposureHandler(mux, h.GetStatsExposure)
	MountGetStatsCurrentExposureHandler(mux, h.GetStatsCurrentExposure)
}

// Mount configures the mux to serve the stats endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountGetSizeStatsHandler configures the mux to serve the "stats" service
// "Get size stats" endpoint.
func MountGetSizeStatsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/stats/size", f)
}

// NewGetSizeStatsHandler creates a HTTP handler which loads the HTTP request
// and calls the "stats" service "Get size stats" endpoint.
func NewGetSizeStatsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		encodeResponse = EncodeGetSizeStatsResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Get size stats")
		ctx = context.WithValue(ctx, goa.ServiceKey, "stats")
		var err error
		res, err := endpoint(ctx, nil)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetOpenIssuesStatsHandler configures the mux to serve the "stats"
// service "Get open issues stats" endpoint.
func MountGetOpenIssuesStatsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/stats/open", f)
}

// NewGetOpenIssuesStatsHandler creates a HTTP handler which loads the HTTP
// request and calls the "stats" service "Get open issues stats" endpoint.
func NewGetOpenIssuesStatsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetOpenIssuesStatsRequest(mux, decoder)
		encodeResponse = EncodeGetOpenIssuesStatsResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Get open issues stats")
		ctx = context.WithValue(ctx, goa.ServiceKey, "stats")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetFixedIssuesStatsHandler configures the mux to serve the "stats"
// service "Get fixed issues stats" endpoint.
func MountGetFixedIssuesStatsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/stats/fixed", f)
}

// NewGetFixedIssuesStatsHandler creates a HTTP handler which loads the HTTP
// request and calls the "stats" service "Get fixed issues stats" endpoint.
func NewGetFixedIssuesStatsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetFixedIssuesStatsRequest(mux, decoder)
		encodeResponse = EncodeGetFixedIssuesStatsResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Get fixed issues stats")
		ctx = context.WithValue(ctx, goa.ServiceKey, "stats")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetStatsAssetsPerSeverityHandler configures the mux to serve the
// "stats" service "Get stats assets per severity" endpoint.
func MountGetStatsAssetsPerSeverityHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/stats/assets", f)
}

// NewGetStatsAssetsPerSeverityHandler creates a HTTP handler which loads the
// HTTP request and calls the "stats" service "Get stats assets per severity"
// endpoint.
func NewGetStatsAssetsPerSeverityHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetStatsAssetsPerSeverityRequest(mux, decoder)
		encodeResponse = EncodeGetStatsAssetsPerSeverityResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Get stats assets per severity")
		ctx = context.WithValue(ctx, goa.ServiceKey, "stats")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetIssuesStatsHandler configures the mux to serve the "stats" service
// "Get issues stats" endpoint.
func MountGetIssuesStatsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/stats/issues", f)
}

// NewGetIssuesStatsHandler creates a HTTP handler which loads the HTTP request
// and calls the "stats" service "Get issues stats" endpoint.
func NewGetIssuesStatsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetIssuesStatsRequest(mux, decoder)
		encodeResponse = EncodeGetIssuesStatsResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Get issues stats")
		ctx = context.WithValue(ctx, goa.ServiceKey, "stats")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetStatsMTTRHandler configures the mux to serve the "stats" service
// "Get stats MTTR" endpoint.
func MountGetStatsMTTRHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/stats/mttr", f)
}

// NewGetStatsMTTRHandler creates a HTTP handler which loads the HTTP request
// and calls the "stats" service "Get stats MTTR" endpoint.
func NewGetStatsMTTRHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetStatsMTTRRequest(mux, decoder)
		encodeResponse = EncodeGetStatsMTTRResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Get stats MTTR")
		ctx = context.WithValue(ctx, goa.ServiceKey, "stats")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetStatsExposureHandler configures the mux to serve the "stats" service
// "Get stats exposure" endpoint.
func MountGetStatsExposureHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/stats/exposure", f)
}

// NewGetStatsExposureHandler creates a HTTP handler which loads the HTTP
// request and calls the "stats" service "Get stats exposure" endpoint.
func NewGetStatsExposureHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetStatsExposureRequest(mux, decoder)
		encodeResponse = EncodeGetStatsExposureResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Get stats exposure")
		ctx = context.WithValue(ctx, goa.ServiceKey, "stats")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetStatsCurrentExposureHandler configures the mux to serve the "stats"
// service "Get stats current exposure" endpoint.
func MountGetStatsCurrentExposureHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/stats/exposure/current", f)
}

// NewGetStatsCurrentExposureHandler creates a HTTP handler which loads the
// HTTP request and calls the "stats" service "Get stats current exposure"
// endpoint.
func NewGetStatsCurrentExposureHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetStatsCurrentExposureRequest(mux, decoder)
		encodeResponse = EncodeGetStatsCurrentExposureResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Get stats current exposure")
		ctx = context.WithValue(ctx, goa.ServiceKey, "stats")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
