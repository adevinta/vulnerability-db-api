// Code generated by goa v3.0.6, DO NOT EDIT.
//
// stats HTTP server
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package server

import (
	"context"
	"net/http"

	stats "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/stats"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the stats service endpoint HTTP handlers.
type Server struct {
	Mounts              []*MountPoint
	GetSizeStats        http.Handler
	GetOpenIssuesStats  http.Handler
	GetFixedIssuesStats http.Handler
	GetIssuesStats      http.Handler
	GetStatsMTTR        http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the stats service endpoints.
func New(
	e *stats.Endpoints,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"GetSizeStats", "GET", "/stats/size"},
			{"GetOpenIssuesStats", "GET", "/stats/open"},
			{"GetFixedIssuesStats", "GET", "/stats/fixed"},
			{"GetIssuesStats", "GET", "/stats/issues"},
			{"GetStatsMTTR", "GET", "/stats/mttr"},
		},
		GetSizeStats:        NewGetSizeStatsHandler(e.GetSizeStats, mux, dec, enc, eh),
		GetOpenIssuesStats:  NewGetOpenIssuesStatsHandler(e.GetOpenIssuesStats, mux, dec, enc, eh),
		GetFixedIssuesStats: NewGetFixedIssuesStatsHandler(e.GetFixedIssuesStats, mux, dec, enc, eh),
		GetIssuesStats:      NewGetIssuesStatsHandler(e.GetIssuesStats, mux, dec, enc, eh),
		GetStatsMTTR:        NewGetStatsMTTRHandler(e.GetStatsMTTR, mux, dec, enc, eh),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "stats" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.GetSizeStats = m(s.GetSizeStats)
	s.GetOpenIssuesStats = m(s.GetOpenIssuesStats)
	s.GetFixedIssuesStats = m(s.GetFixedIssuesStats)
	s.GetIssuesStats = m(s.GetIssuesStats)
	s.GetStatsMTTR = m(s.GetStatsMTTR)
}

// Mount configures the mux to serve the stats endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountGetSizeStatsHandler(mux, h.GetSizeStats)
	MountGetOpenIssuesStatsHandler(mux, h.GetOpenIssuesStats)
	MountGetFixedIssuesStatsHandler(mux, h.GetFixedIssuesStats)
	MountGetIssuesStatsHandler(mux, h.GetIssuesStats)
	MountGetStatsMTTRHandler(mux, h.GetStatsMTTR)
}

// MountGetSizeStatsHandler configures the mux to serve the "stats" service
// "Get size stats" endpoint.
func MountGetSizeStatsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/stats/size", f)
}

// NewGetSizeStatsHandler creates a HTTP handler which loads the HTTP request
// and calls the "stats" service "Get size stats" endpoint.
func NewGetSizeStatsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		encodeResponse = EncodeGetSizeStatsResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Get size stats")
		ctx = context.WithValue(ctx, goa.ServiceKey, "stats")
		var err error

		res, err := endpoint(ctx, nil)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountGetOpenIssuesStatsHandler configures the mux to serve the "stats"
// service "Get open issues stats" endpoint.
func MountGetOpenIssuesStatsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/stats/open", f)
}

// NewGetOpenIssuesStatsHandler creates a HTTP handler which loads the HTTP
// request and calls the "stats" service "Get open issues stats" endpoint.
func NewGetOpenIssuesStatsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeGetOpenIssuesStatsRequest(mux, dec)
		encodeResponse = EncodeGetOpenIssuesStatsResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Get open issues stats")
		ctx = context.WithValue(ctx, goa.ServiceKey, "stats")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountGetFixedIssuesStatsHandler configures the mux to serve the "stats"
// service "Get fixed issues stats" endpoint.
func MountGetFixedIssuesStatsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/stats/fixed", f)
}

// NewGetFixedIssuesStatsHandler creates a HTTP handler which loads the HTTP
// request and calls the "stats" service "Get fixed issues stats" endpoint.
func NewGetFixedIssuesStatsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeGetFixedIssuesStatsRequest(mux, dec)
		encodeResponse = EncodeGetFixedIssuesStatsResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Get fixed issues stats")
		ctx = context.WithValue(ctx, goa.ServiceKey, "stats")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountGetIssuesStatsHandler configures the mux to serve the "stats" service
// "Get issues stats" endpoint.
func MountGetIssuesStatsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/stats/issues", f)
}

// NewGetIssuesStatsHandler creates a HTTP handler which loads the HTTP request
// and calls the "stats" service "Get issues stats" endpoint.
func NewGetIssuesStatsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeGetIssuesStatsRequest(mux, dec)
		encodeResponse = EncodeGetIssuesStatsResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Get issues stats")
		ctx = context.WithValue(ctx, goa.ServiceKey, "stats")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountGetStatsMTTRHandler configures the mux to serve the "stats" service
// "Get stats MTTR" endpoint.
func MountGetStatsMTTRHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/stats/mttr", f)
}

// NewGetStatsMTTRHandler creates a HTTP handler which loads the HTTP request
// and calls the "stats" service "Get stats MTTR" endpoint.
func NewGetStatsMTTRHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeGetStatsMTTRRequest(mux, dec)
		encodeResponse = EncodeGetStatsMTTRResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Get stats MTTR")
		ctx = context.WithValue(ctx, goa.ServiceKey, "stats")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}
