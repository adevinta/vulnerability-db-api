/*
Copyright 2021 Adevinta
*/

// Code generated by goa v3.0.6, DO NOT EDIT.
//
// sources HTTP server encoders and decoders
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package server

import (
	"context"
	"net/http"
	"strconv"

	sourcesviews "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/sources/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeListSourcesResponse returns an encoder for responses returned by the
// sources List sources endpoint.
func EncodeListSourcesResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(sourcesviews.SourceCollection)
		enc := encoder(ctx, w)
		body := NewSourceResponseCollection(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListSourcesRequest returns a decoder for requests sent to the sources
// List sources endpoint.
func DecodeListSourcesRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			page *int
			size *int
			err  error
		)
		{
			pageRaw := r.URL.Query().Get("page")
			if pageRaw != "" {
				v, err2 := strconv.ParseInt(pageRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("page", pageRaw, "integer"))
				}
				pv := int(v)
				page = &pv
			}
		}
		{
			sizeRaw := r.URL.Query().Get("size")
			if sizeRaw != "" {
				v, err2 := strconv.ParseInt(sizeRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("size", sizeRaw, "integer"))
				}
				pv := int(v)
				size = &pv
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewListSourcesPayload(page, size)

		return payload, nil
	}
}

// EncodeGetSourceResponse returns an encoder for responses returned by the
// sources Get source endpoint.
func EncodeGetSourceResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*sourcesviews.Source)
		enc := encoder(ctx, w)
		body := NewGetSourceResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetSourceRequest returns a decoder for requests sent to the sources
// Get source endpoint.
func DecodeGetSourceRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id string

			params = mux.Vars(r)
		)
		id = params["id"]
		payload := NewGetSourcePayload(id)

		return payload, nil
	}
}

// EncodeListFindingsBySourceResponse returns an encoder for responses returned
// by the sources List findings by source endpoint.
func EncodeListFindingsBySourceResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(sourcesviews.FindingCollection)
		enc := encoder(ctx, w)
		body := NewFindingResponseCollection(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListFindingsBySourceRequest returns a decoder for requests sent to the
// sources List findings by source endpoint.
func DecodeListFindingsBySourceRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id     string
			status *string
			sortBy *string
			page   *int
			size   *int
			err    error

			params = mux.Vars(r)
		)
		id = params["id"]
		statusRaw := r.URL.Query().Get("status")
		if statusRaw != "" {
			status = &statusRaw
		}
		sortByRaw := r.URL.Query().Get("sortBy")
		if sortByRaw != "" {
			sortBy = &sortByRaw
		}
		{
			pageRaw := r.URL.Query().Get("page")
			if pageRaw != "" {
				v, err2 := strconv.ParseInt(pageRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("page", pageRaw, "integer"))
				}
				pv := int(v)
				page = &pv
			}
		}
		{
			sizeRaw := r.URL.Query().Get("size")
			if sizeRaw != "" {
				v, err2 := strconv.ParseInt(sizeRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("size", sizeRaw, "integer"))
				}
				pv := int(v)
				size = &pv
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewListFindingsBySourcePayload(id, status, sortBy, page, size)

		return payload, nil
	}
}

// EncodeGetSourceMTTRResponse returns an encoder for responses returned by the
// sources Get source MTTR endpoint.
func EncodeGetSourceMTTRResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(float32)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetSourceMTTRRequest returns a decoder for requests sent to the
// sources Get source MTTR endpoint.
func DecodeGetSourceMTTRRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id string

			params = mux.Vars(r)
		)
		id = params["id"]
		payload := NewGetSourceMTTRPayload(id)

		return payload, nil
	}
}

// marshalSourcesviewsIssueViewToIssueResponse builds a value of type
// *IssueResponse from a value of type *sourcesviews.IssueView.
func marshalSourcesviewsIssueViewToIssueResponse(v *sourcesviews.IssueView) *IssueResponse {
	if v == nil {
		return nil
	}
	res := &IssueResponse{
		ID:          v.ID,
		Summary:     v.Summary,
		CweID:       v.CweID,
		Description: v.Description,
	}
	if v.Recommendations != nil {
		res.Recommendations = make([]string, len(v.Recommendations))
		for i, val := range v.Recommendations {
			res.Recommendations[i] = val
		}
	}
	if v.ReferenceLinks != nil {
		res.ReferenceLinks = make([]string, len(v.ReferenceLinks))
		for i, val := range v.ReferenceLinks {
			res.ReferenceLinks[i] = val
		}
	}

	return res
}

// marshalSourcesviewsTargetViewToTargetResponse builds a value of type
// *TargetResponse from a value of type *sourcesviews.TargetView.
func marshalSourcesviewsTargetViewToTargetResponse(v *sourcesviews.TargetView) *TargetResponse {
	if v == nil {
		return nil
	}
	res := &TargetResponse{
		ID:         v.ID,
		Identifier: v.Identifier,
	}
	if v.Tags != nil {
		res.Tags = make([]string, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = val
		}
	}

	return res
}

// marshalSourcesviewsSourcewithnotargetViewToSourcewithnotargetResponse builds
// a value of type *SourcewithnotargetResponse from a value of type
// *sourcesviews.SourcewithnotargetView.
func marshalSourcesviewsSourcewithnotargetViewToSourcewithnotargetResponse(v *sourcesviews.SourcewithnotargetView) *SourcewithnotargetResponse {
	if v == nil {
		return nil
	}
	res := &SourcewithnotargetResponse{
		ID:        v.ID,
		Name:      v.Name,
		Component: v.Component,
		Instance:  v.Instance,
		Options:   v.Options,
		Time:      v.Time,
	}

	return res
}

// marshalSourcesviewsResourceGroupViewToResourceGroupResponse builds a value
// of type *ResourceGroupResponse from a value of type
// *sourcesviews.ResourceGroupView.
func marshalSourcesviewsResourceGroupViewToResourceGroupResponse(v *sourcesviews.ResourceGroupView) *ResourceGroupResponse {
	if v == nil {
		return nil
	}
	res := &ResourceGroupResponse{
		Name: v.Name,
	}
	if v.Attributes != nil {
		res.Attributes = make([]string, len(v.Attributes))
		for i, val := range v.Attributes {
			res.Attributes[i] = val
		}
	}
	if v.Resources != nil {
		res.Resources = make([]map[string]string, len(v.Resources))
		for i, val := range v.Resources {
			res.Resources[i] = make(map[string]string, len(val))
			for key, val := range val {
				tk := key
				tv := val
				res.Resources[i][tk] = tv
			}
		}
	}

	return res
}
