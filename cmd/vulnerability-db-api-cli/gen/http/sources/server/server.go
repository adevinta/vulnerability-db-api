// Code generated by goa v3.14.0, DO NOT EDIT.
//
// sources HTTP server
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package server

import (
	"context"
	"net/http"

	sources "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/sources"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the sources service endpoint HTTP handlers.
type Server struct {
	Mounts               []*MountPoint
	ListSources          http.Handler
	GetSource            http.Handler
	ListFindingsBySource http.Handler
	GetSourceMTTR        http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the sources service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *sources.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"ListSources", "GET", "/sources"},
			{"GetSource", "GET", "/sources/{id}"},
			{"ListFindingsBySource", "GET", "/sources/{id}/findings"},
			{"GetSourceMTTR", "GET", "/sources/{id}/mttr"},
		},
		ListSources:          NewListSourcesHandler(e.ListSources, mux, decoder, encoder, errhandler, formatter),
		GetSource:            NewGetSourceHandler(e.GetSource, mux, decoder, encoder, errhandler, formatter),
		ListFindingsBySource: NewListFindingsBySourceHandler(e.ListFindingsBySource, mux, decoder, encoder, errhandler, formatter),
		GetSourceMTTR:        NewGetSourceMTTRHandler(e.GetSourceMTTR, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "sources" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.ListSources = m(s.ListSources)
	s.GetSource = m(s.GetSource)
	s.ListFindingsBySource = m(s.ListFindingsBySource)
	s.GetSourceMTTR = m(s.GetSourceMTTR)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return sources.MethodNames[:] }

// Mount configures the mux to serve the sources endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountListSourcesHandler(mux, h.ListSources)
	MountGetSourceHandler(mux, h.GetSource)
	MountListFindingsBySourceHandler(mux, h.ListFindingsBySource)
	MountGetSourceMTTRHandler(mux, h.GetSourceMTTR)
}

// Mount configures the mux to serve the sources endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountListSourcesHandler configures the mux to serve the "sources" service
// "List sources" endpoint.
func MountListSourcesHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/sources", f)
}

// NewListSourcesHandler creates a HTTP handler which loads the HTTP request
// and calls the "sources" service "List sources" endpoint.
func NewListSourcesHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListSourcesRequest(mux, decoder)
		encodeResponse = EncodeListSourcesResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "List sources")
		ctx = context.WithValue(ctx, goa.ServiceKey, "sources")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetSourceHandler configures the mux to serve the "sources" service "Get
// source" endpoint.
func MountGetSourceHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/sources/{id}", f)
}

// NewGetSourceHandler creates a HTTP handler which loads the HTTP request and
// calls the "sources" service "Get source" endpoint.
func NewGetSourceHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetSourceRequest(mux, decoder)
		encodeResponse = EncodeGetSourceResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Get source")
		ctx = context.WithValue(ctx, goa.ServiceKey, "sources")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountListFindingsBySourceHandler configures the mux to serve the "sources"
// service "List findings by source" endpoint.
func MountListFindingsBySourceHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/sources/{id}/findings", f)
}

// NewListFindingsBySourceHandler creates a HTTP handler which loads the HTTP
// request and calls the "sources" service "List findings by source" endpoint.
func NewListFindingsBySourceHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListFindingsBySourceRequest(mux, decoder)
		encodeResponse = EncodeListFindingsBySourceResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "List findings by source")
		ctx = context.WithValue(ctx, goa.ServiceKey, "sources")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetSourceMTTRHandler configures the mux to serve the "sources" service
// "Get source MTTR" endpoint.
func MountGetSourceMTTRHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/sources/{id}/mttr", f)
}

// NewGetSourceMTTRHandler creates a HTTP handler which loads the HTTP request
// and calls the "sources" service "Get source MTTR" endpoint.
func NewGetSourceMTTRHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetSourceMTTRRequest(mux, decoder)
		encodeResponse = EncodeGetSourceMTTRResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Get source MTTR")
		ctx = context.WithValue(ctx, goa.ServiceKey, "sources")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
