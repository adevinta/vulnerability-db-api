/*
Copyright 2021 Adevinta
*/

// Code generated by goa v3.0.6, DO NOT EDIT.
//
// sources client HTTP transport
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the sources service endpoint HTTP clients.
type Client struct {
	// ListSources Doer is the HTTP client used to make requests to the List
	// sources endpoint.
	ListSourcesDoer goahttp.Doer

	// GetSource Doer is the HTTP client used to make requests to the Get source
	// endpoint.
	GetSourceDoer goahttp.Doer

	// ListFindingsBySource Doer is the HTTP client used to make requests to the
	// List findings by source endpoint.
	ListFindingsBySourceDoer goahttp.Doer

	// GetSourceMTTR Doer is the HTTP client used to make requests to the Get
	// source MTTR endpoint.
	GetSourceMTTRDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the sources service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		ListSourcesDoer:          doer,
		GetSourceDoer:            doer,
		ListFindingsBySourceDoer: doer,
		GetSourceMTTRDoer:        doer,
		RestoreResponseBody:      restoreBody,
		scheme:                   scheme,
		host:                     host,
		decoder:                  dec,
		encoder:                  enc,
	}
}

// ListSources returns an endpoint that makes HTTP requests to the sources
// service List sources server.
func (c *Client) ListSources() goa.Endpoint {
	var (
		encodeRequest  = EncodeListSourcesRequest(c.encoder)
		decodeResponse = DecodeListSourcesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListSourcesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListSourcesDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("sources", "List sources", err)
		}
		return decodeResponse(resp)
	}
}

// GetSource returns an endpoint that makes HTTP requests to the sources
// service Get source server.
func (c *Client) GetSource() goa.Endpoint {
	var (
		decodeResponse = DecodeGetSourceResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetSourceRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetSourceDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("sources", "Get source", err)
		}
		return decodeResponse(resp)
	}
}

// ListFindingsBySource returns an endpoint that makes HTTP requests to the
// sources service List findings by source server.
func (c *Client) ListFindingsBySource() goa.Endpoint {
	var (
		encodeRequest  = EncodeListFindingsBySourceRequest(c.encoder)
		decodeResponse = DecodeListFindingsBySourceResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListFindingsBySourceRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListFindingsBySourceDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("sources", "List findings by source", err)
		}
		return decodeResponse(resp)
	}
}

// GetSourceMTTR returns an endpoint that makes HTTP requests to the sources
// service Get source MTTR server.
func (c *Client) GetSourceMTTR() goa.Endpoint {
	var (
		decodeResponse = DecodeGetSourceMTTRResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetSourceMTTRRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetSourceMTTRDoer.Do(req)

		if err != nil {
			return nil, goahttp.ErrRequestError("sources", "Get source MTTR", err)
		}
		return decodeResponse(resp)
	}
}
