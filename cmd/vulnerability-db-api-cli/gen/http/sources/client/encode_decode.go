// Code generated by goa v3.5.2, DO NOT EDIT.
//
// sources HTTP client encoders and decoders
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package client

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"

	sources "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/sources"
	sourcesviews "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/sources/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildListSourcesRequest instantiates a HTTP request object with method and
// path set to call the "sources" service "List sources" endpoint
func (c *Client) BuildListSourcesRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListSourcesSourcesPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("sources", "List sources", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListSourcesRequest returns an encoder for requests sent to the sources
// List sources server.
func EncodeListSourcesRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*sources.ListSourcesPayload)
		if !ok {
			return goahttp.ErrInvalidType("sources", "List sources", "*sources.ListSourcesPayload", v)
		}
		values := req.URL.Query()
		if p.Page != nil {
			values.Add("page", fmt.Sprintf("%v", *p.Page))
		}
		if p.Size != nil {
			values.Add("size", fmt.Sprintf("%v", *p.Size))
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListSourcesResponse returns a decoder for responses returned by the
// sources List sources endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeListSourcesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListSourcesResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sources", "List sources", err)
			}
			p := NewListSourcesSourceCollectionOK(body)
			view := "default"
			vres := sourcesviews.SourceCollection{Projected: p, View: view}
			if err = sourcesviews.ValidateSourceCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("sources", "List sources", err)
			}
			res := sources.NewSourceCollection(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("sources", "List sources", resp.StatusCode, string(body))
		}
	}
}

// BuildGetSourceRequest instantiates a HTTP request object with method and
// path set to call the "sources" service "Get source" endpoint
func (c *Client) BuildGetSourceRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*sources.GetSourcePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("sources", "Get source", "*sources.GetSourcePayload", v)
		}
		if p.ID != nil {
			id = *p.ID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetSourceSourcesPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("sources", "Get source", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetSourceResponse returns a decoder for responses returned by the
// sources Get source endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeGetSourceResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetSourceResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sources", "Get source", err)
			}
			p := NewGetSourceSourceOK(&body)
			view := "default"
			vres := &sourcesviews.Source{Projected: p, View: view}
			if err = sourcesviews.ValidateSource(vres); err != nil {
				return nil, goahttp.ErrValidationError("sources", "Get source", err)
			}
			res := sources.NewSource(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("sources", "Get source", resp.StatusCode, string(body))
		}
	}
}

// BuildListFindingsBySourceRequest instantiates a HTTP request object with
// method and path set to call the "sources" service "List findings by source"
// endpoint
func (c *Client) BuildListFindingsBySourceRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*sources.ListFindingsBySourcePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("sources", "List findings by source", "*sources.ListFindingsBySourcePayload", v)
		}
		if p.ID != nil {
			id = *p.ID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListFindingsBySourceSourcesPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("sources", "List findings by source", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListFindingsBySourceRequest returns an encoder for requests sent to
// the sources List findings by source server.
func EncodeListFindingsBySourceRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*sources.ListFindingsBySourcePayload)
		if !ok {
			return goahttp.ErrInvalidType("sources", "List findings by source", "*sources.ListFindingsBySourcePayload", v)
		}
		values := req.URL.Query()
		if p.Status != nil {
			values.Add("status", *p.Status)
		}
		if p.SortBy != nil {
			values.Add("sortBy", *p.SortBy)
		}
		if p.Page != nil {
			values.Add("page", fmt.Sprintf("%v", *p.Page))
		}
		if p.Size != nil {
			values.Add("size", fmt.Sprintf("%v", *p.Size))
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListFindingsBySourceResponse returns a decoder for responses returned
// by the sources List findings by source endpoint. restoreBody controls
// whether the response body should be restored after having been read.
func DecodeListFindingsBySourceResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListFindingsBySourceResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sources", "List findings by source", err)
			}
			p := NewListFindingsBySourceFindingCollectionOK(body)
			view := "default"
			vres := sourcesviews.FindingCollection{Projected: p, View: view}
			if err = sourcesviews.ValidateFindingCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("sources", "List findings by source", err)
			}
			res := sources.NewFindingCollection(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("sources", "List findings by source", resp.StatusCode, string(body))
		}
	}
}

// BuildGetSourceMTTRRequest instantiates a HTTP request object with method and
// path set to call the "sources" service "Get source MTTR" endpoint
func (c *Client) BuildGetSourceMTTRRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*sources.GetSourceMTTRPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("sources", "Get source MTTR", "*sources.GetSourceMTTRPayload", v)
		}
		if p.ID != nil {
			id = *p.ID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetSourceMTTRSourcesPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("sources", "Get source MTTR", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetSourceMTTRResponse returns a decoder for responses returned by the
// sources Get source MTTR endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeGetSourceMTTRResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body float32
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("sources", "Get source MTTR", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("sources", "Get source MTTR", resp.StatusCode, string(body))
		}
	}
}

// unmarshalSourceResponseToSourcesviewsSourceView builds a value of type
// *sourcesviews.SourceView from a value of type *SourceResponse.
func unmarshalSourceResponseToSourcesviewsSourceView(v *SourceResponse) *sourcesviews.SourceView {
	res := &sourcesviews.SourceView{
		ID:        v.ID,
		TargetID:  v.TargetID,
		Name:      v.Name,
		Component: v.Component,
		Instance:  v.Instance,
		Options:   v.Options,
		Time:      v.Time,
	}

	return res
}

// unmarshalFindingResponseToSourcesviewsFindingView builds a value of type
// *sourcesviews.FindingView from a value of type *FindingResponse.
func unmarshalFindingResponseToSourcesviewsFindingView(v *FindingResponse) *sourcesviews.FindingView {
	res := &sourcesviews.FindingView{
		ID:            v.ID,
		Details:       v.Details,
		ImpactDetails: v.ImpactDetails,
		Status:        v.Status,
		Score:         v.Score,
	}
	if v.Issue != nil {
		res.Issue = unmarshalIssueResponseToSourcesviewsIssueView(v.Issue)
	}
	if v.Target != nil {
		res.Target = unmarshalTargetResponseToSourcesviewsTargetView(v.Target)
	}
	if v.Source != nil {
		res.Source = unmarshalSourcewithnotargetResponseToSourcesviewsSourcewithnotargetView(v.Source)
	}
	if v.Resources != nil {
		res.Resources = make([]*sourcesviews.ResourceGroupView, len(v.Resources))
		for i, val := range v.Resources {
			res.Resources[i] = unmarshalResourceGroupResponseToSourcesviewsResourceGroupView(val)
		}
	}

	return res
}

// unmarshalIssueResponseToSourcesviewsIssueView builds a value of type
// *sourcesviews.IssueView from a value of type *IssueResponse.
func unmarshalIssueResponseToSourcesviewsIssueView(v *IssueResponse) *sourcesviews.IssueView {
	if v == nil {
		return nil
	}
	res := &sourcesviews.IssueView{
		ID:          v.ID,
		Summary:     v.Summary,
		CweID:       v.CweID,
		Description: v.Description,
	}
	if v.Recommendations != nil {
		res.Recommendations = make([]string, len(v.Recommendations))
		for i, val := range v.Recommendations {
			res.Recommendations[i] = val
		}
	}
	if v.ReferenceLinks != nil {
		res.ReferenceLinks = make([]string, len(v.ReferenceLinks))
		for i, val := range v.ReferenceLinks {
			res.ReferenceLinks[i] = val
		}
	}
	if v.Labels != nil {
		res.Labels = make([]string, len(v.Labels))
		for i, val := range v.Labels {
			res.Labels[i] = val
		}
	}

	return res
}

// unmarshalTargetResponseToSourcesviewsTargetView builds a value of type
// *sourcesviews.TargetView from a value of type *TargetResponse.
func unmarshalTargetResponseToSourcesviewsTargetView(v *TargetResponse) *sourcesviews.TargetView {
	if v == nil {
		return nil
	}
	res := &sourcesviews.TargetView{
		ID:         v.ID,
		Identifier: v.Identifier,
	}
	if v.Teams != nil {
		res.Teams = make([]string, len(v.Teams))
		for i, val := range v.Teams {
			res.Teams[i] = val
		}
	}
	if v.Tags != nil {
		res.Tags = make([]string, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = val
		}
	}

	return res
}

// unmarshalSourcewithnotargetResponseToSourcesviewsSourcewithnotargetView
// builds a value of type *sourcesviews.SourcewithnotargetView from a value of
// type *SourcewithnotargetResponse.
func unmarshalSourcewithnotargetResponseToSourcesviewsSourcewithnotargetView(v *SourcewithnotargetResponse) *sourcesviews.SourcewithnotargetView {
	if v == nil {
		return nil
	}
	res := &sourcesviews.SourcewithnotargetView{
		ID:        v.ID,
		Name:      v.Name,
		Component: v.Component,
		Instance:  v.Instance,
		Options:   v.Options,
		Time:      v.Time,
	}

	return res
}

// unmarshalResourceGroupResponseToSourcesviewsResourceGroupView builds a value
// of type *sourcesviews.ResourceGroupView from a value of type
// *ResourceGroupResponse.
func unmarshalResourceGroupResponseToSourcesviewsResourceGroupView(v *ResourceGroupResponse) *sourcesviews.ResourceGroupView {
	if v == nil {
		return nil
	}
	res := &sourcesviews.ResourceGroupView{
		Name: v.Name,
	}
	if v.Attributes != nil {
		res.Attributes = make([]string, len(v.Attributes))
		for i, val := range v.Attributes {
			res.Attributes[i] = val
		}
	}
	if v.Resources != nil {
		res.Resources = make([]map[string]string, len(v.Resources))
		for i, val := range v.Resources {
			res.Resources[i] = make(map[string]string, len(val))
			for key, val := range val {
				tk := key
				tv := val
				res.Resources[i][tk] = tv
			}
		}
	}

	return res
}
