/*
Copyright 2021 Adevinta
*/

// Code generated by goa v3.0.6, DO NOT EDIT.
//
// sources HTTP client CLI support package
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package client

import (
	"fmt"
	"strconv"

	sources "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/sources"
)

// BuildListSourcesPayload builds the payload for the sources List sources
// endpoint from CLI flags.
func BuildListSourcesPayload(sourcesListSourcesPage string, sourcesListSourcesSize string) (*sources.ListSourcesPayload, error) {
	var err error
	var page *int
	{
		if sourcesListSourcesPage != "" {
			var v int64
			v, err = strconv.ParseInt(sourcesListSourcesPage, 10, 64)
			val := int(v)
			page = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for page, must be INT")
			}
		}
	}
	var size *int
	{
		if sourcesListSourcesSize != "" {
			var v int64
			v, err = strconv.ParseInt(sourcesListSourcesSize, 10, 64)
			val := int(v)
			size = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for size, must be INT")
			}
		}
	}
	payload := &sources.ListSourcesPayload{
		Page: page,
		Size: size,
	}
	return payload, nil
}

// BuildGetSourcePayload builds the payload for the sources Get source endpoint
// from CLI flags.
func BuildGetSourcePayload(sourcesGetSourceID string) (*sources.GetSourcePayload, error) {
	var id string
	{
		id = sourcesGetSourceID
	}
	payload := &sources.GetSourcePayload{
		ID: &id,
	}
	return payload, nil
}

// BuildListFindingsBySourcePayload builds the payload for the sources List
// findings by source endpoint from CLI flags.
func BuildListFindingsBySourcePayload(sourcesListFindingsBySourceID string, sourcesListFindingsBySourceStatus string, sourcesListFindingsBySourceSortBy string, sourcesListFindingsBySourcePage string, sourcesListFindingsBySourceSize string) (*sources.ListFindingsBySourcePayload, error) {
	var err error
	var id string
	{
		id = sourcesListFindingsBySourceID
	}
	var status *string
	{
		if sourcesListFindingsBySourceStatus != "" {
			status = &sourcesListFindingsBySourceStatus
		}
	}
	var sortBy *string
	{
		if sourcesListFindingsBySourceSortBy != "" {
			sortBy = &sourcesListFindingsBySourceSortBy
		}
	}
	var page *int
	{
		if sourcesListFindingsBySourcePage != "" {
			var v int64
			v, err = strconv.ParseInt(sourcesListFindingsBySourcePage, 10, 64)
			val := int(v)
			page = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for page, must be INT")
			}
		}
	}
	var size *int
	{
		if sourcesListFindingsBySourceSize != "" {
			var v int64
			v, err = strconv.ParseInt(sourcesListFindingsBySourceSize, 10, 64)
			val := int(v)
			size = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for size, must be INT")
			}
		}
	}
	payload := &sources.ListFindingsBySourcePayload{
		ID:     &id,
		Status: status,
		SortBy: sortBy,
		Page:   page,
		Size:   size,
	}
	return payload, nil
}

// BuildGetSourceMTTRPayload builds the payload for the sources Get source MTTR
// endpoint from CLI flags.
func BuildGetSourceMTTRPayload(sourcesGetSourceMTTRID string) (*sources.GetSourceMTTRPayload, error) {
	var id string
	{
		id = sourcesGetSourceMTTRID
	}
	payload := &sources.GetSourceMTTRPayload{
		ID: &id,
	}
	return payload, nil
}
