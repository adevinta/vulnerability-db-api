// Code generated by goa v3.5.2, DO NOT EDIT.
//
// findings client HTTP transport
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the findings service endpoint HTTP clients.
type Client struct {
	// ListFindings Doer is the HTTP client used to make requests to the List
	// findings endpoint.
	ListFindingsDoer goahttp.Doer

	// GetFinding Doer is the HTTP client used to make requests to the Get finding
	// endpoint.
	GetFindingDoer goahttp.Doer

	// ListEventsByFinding Doer is the HTTP client used to make requests to the
	// List events by finding endpoint.
	ListEventsByFindingDoer goahttp.Doer

	// GetFindingMTTR Doer is the HTTP client used to make requests to the Get
	// finding MTTR endpoint.
	GetFindingMTTRDoer goahttp.Doer

	// PatchFinding Doer is the HTTP client used to make requests to the Patch
	// finding endpoint.
	PatchFindingDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the findings service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		ListFindingsDoer:        doer,
		GetFindingDoer:          doer,
		ListEventsByFindingDoer: doer,
		GetFindingMTTRDoer:      doer,
		PatchFindingDoer:        doer,
		RestoreResponseBody:     restoreBody,
		scheme:                  scheme,
		host:                    host,
		decoder:                 dec,
		encoder:                 enc,
	}
}

// ListFindings returns an endpoint that makes HTTP requests to the findings
// service List findings server.
func (c *Client) ListFindings() goa.Endpoint {
	var (
		encodeRequest  = EncodeListFindingsRequest(c.encoder)
		decodeResponse = DecodeListFindingsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListFindingsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListFindingsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("findings", "List findings", err)
		}
		return decodeResponse(resp)
	}
}

// GetFinding returns an endpoint that makes HTTP requests to the findings
// service Get finding server.
func (c *Client) GetFinding() goa.Endpoint {
	var (
		decodeResponse = DecodeGetFindingResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetFindingRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetFindingDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("findings", "Get finding", err)
		}
		return decodeResponse(resp)
	}
}

// ListEventsByFinding returns an endpoint that makes HTTP requests to the
// findings service List events by finding server.
func (c *Client) ListEventsByFinding() goa.Endpoint {
	var (
		encodeRequest  = EncodeListEventsByFindingRequest(c.encoder)
		decodeResponse = DecodeListEventsByFindingResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListEventsByFindingRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListEventsByFindingDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("findings", "List events by finding", err)
		}
		return decodeResponse(resp)
	}
}

// GetFindingMTTR returns an endpoint that makes HTTP requests to the findings
// service Get finding MTTR server.
func (c *Client) GetFindingMTTR() goa.Endpoint {
	var (
		decodeResponse = DecodeGetFindingMTTRResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetFindingMTTRRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetFindingMTTRDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("findings", "Get finding MTTR", err)
		}
		return decodeResponse(resp)
	}
}

// PatchFinding returns an endpoint that makes HTTP requests to the findings
// service Patch finding server.
func (c *Client) PatchFinding() goa.Endpoint {
	var (
		encodeRequest  = EncodePatchFindingRequest(c.encoder)
		decodeResponse = DecodePatchFindingResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildPatchFindingRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.PatchFindingDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("findings", "Patch finding", err)
		}
		return decodeResponse(resp)
	}
}
