// Code generated by goa v3.0.6, DO NOT EDIT.
//
// findings HTTP server
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package server

import (
	"context"
	"net/http"

	findings "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/findings"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the findings service endpoint HTTP handlers.
type Server struct {
	Mounts              []*MountPoint
	ListFindings        http.Handler
	GetFinding          http.Handler
	ListEventsByFinding http.Handler
	GetFindingMTTR      http.Handler
	PatchFinding        http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the findings service endpoints.
func New(
	e *findings.Endpoints,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"ListFindings", "GET", "/findings"},
			{"GetFinding", "GET", "/findings/{id}"},
			{"ListEventsByFinding", "GET", "/findings/{id}/events"},
			{"GetFindingMTTR", "GET", "/findings/{id}/mttr"},
			{"PatchFinding", "PATCH", "/findings/{id}"},
		},
		ListFindings:        NewListFindingsHandler(e.ListFindings, mux, dec, enc, eh),
		GetFinding:          NewGetFindingHandler(e.GetFinding, mux, dec, enc, eh),
		ListEventsByFinding: NewListEventsByFindingHandler(e.ListEventsByFinding, mux, dec, enc, eh),
		GetFindingMTTR:      NewGetFindingMTTRHandler(e.GetFindingMTTR, mux, dec, enc, eh),
		PatchFinding:        NewPatchFindingHandler(e.PatchFinding, mux, dec, enc, eh),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "findings" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.ListFindings = m(s.ListFindings)
	s.GetFinding = m(s.GetFinding)
	s.ListEventsByFinding = m(s.ListEventsByFinding)
	s.GetFindingMTTR = m(s.GetFindingMTTR)
	s.PatchFinding = m(s.PatchFinding)
}

// Mount configures the mux to serve the findings endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountListFindingsHandler(mux, h.ListFindings)
	MountGetFindingHandler(mux, h.GetFinding)
	MountListEventsByFindingHandler(mux, h.ListEventsByFinding)
	MountGetFindingMTTRHandler(mux, h.GetFindingMTTR)
	MountPatchFindingHandler(mux, h.PatchFinding)
}

// MountListFindingsHandler configures the mux to serve the "findings" service
// "List findings" endpoint.
func MountListFindingsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/findings", f)
}

// NewListFindingsHandler creates a HTTP handler which loads the HTTP request
// and calls the "findings" service "List findings" endpoint.
func NewListFindingsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeListFindingsRequest(mux, dec)
		encodeResponse = EncodeListFindingsResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "List findings")
		ctx = context.WithValue(ctx, goa.ServiceKey, "findings")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountGetFindingHandler configures the mux to serve the "findings" service
// "Get finding" endpoint.
func MountGetFindingHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/findings/{id}", f)
}

// NewGetFindingHandler creates a HTTP handler which loads the HTTP request and
// calls the "findings" service "Get finding" endpoint.
func NewGetFindingHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeGetFindingRequest(mux, dec)
		encodeResponse = EncodeGetFindingResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Get finding")
		ctx = context.WithValue(ctx, goa.ServiceKey, "findings")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountListEventsByFindingHandler configures the mux to serve the "findings"
// service "List events by finding" endpoint.
func MountListEventsByFindingHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/findings/{id}/events", f)
}

// NewListEventsByFindingHandler creates a HTTP handler which loads the HTTP
// request and calls the "findings" service "List events by finding" endpoint.
func NewListEventsByFindingHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeListEventsByFindingRequest(mux, dec)
		encodeResponse = EncodeListEventsByFindingResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "List events by finding")
		ctx = context.WithValue(ctx, goa.ServiceKey, "findings")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountGetFindingMTTRHandler configures the mux to serve the "findings"
// service "Get finding MTTR" endpoint.
func MountGetFindingMTTRHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/findings/{id}/mttr", f)
}

// NewGetFindingMTTRHandler creates a HTTP handler which loads the HTTP request
// and calls the "findings" service "Get finding MTTR" endpoint.
func NewGetFindingMTTRHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeGetFindingMTTRRequest(mux, dec)
		encodeResponse = EncodeGetFindingMTTRResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Get finding MTTR")
		ctx = context.WithValue(ctx, goa.ServiceKey, "findings")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountPatchFindingHandler configures the mux to serve the "findings" service
// "Patch finding" endpoint.
func MountPatchFindingHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("PATCH", "/findings/{id}", f)
}

// NewPatchFindingHandler creates a HTTP handler which loads the HTTP request
// and calls the "findings" service "Patch finding" endpoint.
func NewPatchFindingHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodePatchFindingRequest(mux, dec)
		encodeResponse = EncodePatchFindingResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Patch finding")
		ctx = context.WithValue(ctx, goa.ServiceKey, "findings")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}
