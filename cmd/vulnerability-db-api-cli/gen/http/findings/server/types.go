// Code generated by goa v3.5.2, DO NOT EDIT.
//
// findings HTTP server types
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package server

import (
	findings "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/findings"
	findingsviews "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/findings/views"
)

// PatchFindingRequestBody is the type of the "findings" service "Patch
// finding" endpoint HTTP request body.
type PatchFindingRequestBody struct {
	// Status
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
}

// FindingResponseCollection is the type of the "findings" service "List
// findings" endpoint HTTP response body.
type FindingResponseCollection []*FindingResponse

// GetFindingResponseBody is the type of the "findings" service "Get finding"
// endpoint HTTP response body.
type GetFindingResponseBody struct {
	// Finding ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Issue
	Issue *IssueResponseBody `form:"issue,omitempty" json:"issue,omitempty" xml:"issue,omitempty"`
	// Target
	Target *TargetResponseBody `form:"target,omitempty" json:"target,omitempty" xml:"target,omitempty"`
	// Source
	Source *SourcewithnotargetResponseBody `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
	// Finding details
	Details *string `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Finding impact details
	ImpactDetails *string `form:"impact_details,omitempty" json:"impact_details,omitempty" xml:"impact_details,omitempty"`
	// Finding status. Can be 'OPEN' or 'FIXED'.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Finding severity score
	Score *float32 `form:"score,omitempty" json:"score,omitempty" xml:"score,omitempty"`
	// Other resources associated with the finding
	Resources []*ResourceGroupResponseBody `form:"resources,omitempty" json:"resources,omitempty" xml:"resources,omitempty"`
}

// EventResponseCollection is the type of the "findings" service "List events
// by finding" endpoint HTTP response body.
type EventResponseCollection []*EventResponse

// GetFindingMTTRResponseBody is the type of the "findings" service "Get
// finding MTTR" endpoint HTTP response body.
type GetFindingMTTRResponseBody struct {
	Mttr *int `form:"mttr,omitempty" json:"mttr,omitempty" xml:"mttr,omitempty"`
}

// PatchFindingResponseBody is the type of the "findings" service "Patch
// finding" endpoint HTTP response body.
type PatchFindingResponseBody struct {
	// Finding ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Issue
	Issue *IssueResponseBody `form:"issue,omitempty" json:"issue,omitempty" xml:"issue,omitempty"`
	// Target
	Target *TargetResponseBody `form:"target,omitempty" json:"target,omitempty" xml:"target,omitempty"`
	// Source
	Source *SourcewithnotargetResponseBody `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
	// Finding details
	Details *string `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Finding impact details
	ImpactDetails *string `form:"impact_details,omitempty" json:"impact_details,omitempty" xml:"impact_details,omitempty"`
	// Finding status. Can be 'OPEN' or 'FIXED'.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Finding severity score
	Score *float32 `form:"score,omitempty" json:"score,omitempty" xml:"score,omitempty"`
	// Other resources associated with the finding
	Resources []*ResourceGroupResponseBody `form:"resources,omitempty" json:"resources,omitempty" xml:"resources,omitempty"`
}

// FindingResponse is used to define fields on response body types.
type FindingResponse struct {
	// Finding ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Issue
	Issue *IssueResponse `form:"issue,omitempty" json:"issue,omitempty" xml:"issue,omitempty"`
	// Target
	Target *TargetResponse `form:"target,omitempty" json:"target,omitempty" xml:"target,omitempty"`
	// Source
	Source *SourcewithnotargetResponse `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
	// Finding details
	Details *string `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Finding impact details
	ImpactDetails *string `form:"impact_details,omitempty" json:"impact_details,omitempty" xml:"impact_details,omitempty"`
	// Finding status. Can be 'OPEN' or 'FIXED'.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Finding severity score
	Score *float32 `form:"score,omitempty" json:"score,omitempty" xml:"score,omitempty"`
	// Other resources associated with the finding
	Resources []*ResourceGroupResponse `form:"resources,omitempty" json:"resources,omitempty" xml:"resources,omitempty"`
}

// IssueResponse is used to define fields on response body types.
type IssueResponse struct {
	// Issue ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Issue summary
	Summary *string `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	// Common Weakness Enumeration ID
	CweID *int `form:"cwe_id,omitempty" json:"cwe_id,omitempty" xml:"cwe_id,omitempty"`
	// Issue description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Recommendations to fix the issue
	Recommendations []string `form:"recommendations,omitempty" json:"recommendations,omitempty" xml:"recommendations,omitempty"`
	// Documentation reference for the issue
	ReferenceLinks []string `form:"reference_links,omitempty" json:"reference_links,omitempty" xml:"reference_links,omitempty"`
	// Labels associated with the issue
	Labels []string `form:"labels,omitempty" json:"labels,omitempty" xml:"labels,omitempty"`
}

// TargetResponse is used to define fields on response body types.
type TargetResponse struct {
	// Target ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Target identifier
	Identifier *string `form:"identifier,omitempty" json:"identifier,omitempty" xml:"identifier,omitempty"`
	// List of teams associated with target
	Teams []string `form:"teams,omitempty" json:"teams,omitempty" xml:"teams,omitempty"`
	// List of tags associated with target
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
}

// SourcewithnotargetResponse is used to define fields on response body types.
type SourcewithnotargetResponse struct {
	// Source ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Source name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Source component
	Component *string `form:"component,omitempty" json:"component,omitempty" xml:"component,omitempty"`
	// Source instance
	Instance *string `form:"instance,omitempty" json:"instance,omitempty" xml:"instance,omitempty"`
	// Source options
	Options *string `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// Time on which the source scanned the target
	Time *string `form:"time,omitempty" json:"time,omitempty" xml:"time,omitempty"`
}

// ResourceGroupResponse is used to define fields on response body types.
type ResourceGroupResponse struct {
	// Name of the resource group
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Column names of the resource group in the order that should be rendered
	Attributes []string `form:"attributes,omitempty" json:"attributes,omitempty" xml:"attributes,omitempty"`
	// List containing the resource rows as hashmap
	Resources []map[string]string `form:"resources,omitempty" json:"resources,omitempty" xml:"resources,omitempty"`
}

// IssueResponseBody is used to define fields on response body types.
type IssueResponseBody struct {
	// Issue ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Issue summary
	Summary *string `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	// Common Weakness Enumeration ID
	CweID *int `form:"cwe_id,omitempty" json:"cwe_id,omitempty" xml:"cwe_id,omitempty"`
	// Issue description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Recommendations to fix the issue
	Recommendations []string `form:"recommendations,omitempty" json:"recommendations,omitempty" xml:"recommendations,omitempty"`
	// Documentation reference for the issue
	ReferenceLinks []string `form:"reference_links,omitempty" json:"reference_links,omitempty" xml:"reference_links,omitempty"`
	// Labels associated with the issue
	Labels []string `form:"labels,omitempty" json:"labels,omitempty" xml:"labels,omitempty"`
}

// TargetResponseBody is used to define fields on response body types.
type TargetResponseBody struct {
	// Target ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Target identifier
	Identifier *string `form:"identifier,omitempty" json:"identifier,omitempty" xml:"identifier,omitempty"`
	// List of teams associated with target
	Teams []string `form:"teams,omitempty" json:"teams,omitempty" xml:"teams,omitempty"`
	// List of tags associated with target
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
}

// SourcewithnotargetResponseBody is used to define fields on response body
// types.
type SourcewithnotargetResponseBody struct {
	// Source ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Source name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Source component
	Component *string `form:"component,omitempty" json:"component,omitempty" xml:"component,omitempty"`
	// Source instance
	Instance *string `form:"instance,omitempty" json:"instance,omitempty" xml:"instance,omitempty"`
	// Source options
	Options *string `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// Time on which the source scanned the target
	Time *string `form:"time,omitempty" json:"time,omitempty" xml:"time,omitempty"`
}

// ResourceGroupResponseBody is used to define fields on response body types.
type ResourceGroupResponseBody struct {
	// Name of the resource group
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Column names of the resource group in the order that should be rendered
	Attributes []string `form:"attributes,omitempty" json:"attributes,omitempty" xml:"attributes,omitempty"`
	// List containing the resource rows as hashmap
	Resources []map[string]string `form:"resources,omitempty" json:"resources,omitempty" xml:"resources,omitempty"`
}

// EventResponse is used to define fields on response body types.
type EventResponse struct {
	// Finding event ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Finding ID
	FindingID *string `form:"finding_id,omitempty" json:"finding_id,omitempty" xml:"finding_id,omitempty"`
	// Source ID
	SourceID *string `form:"source_id,omitempty" json:"source_id,omitempty" xml:"source_id,omitempty"`
	// Finding severity score
	Score *float32 `form:"score,omitempty" json:"score,omitempty" xml:"score,omitempty"`
	// Event time
	Time *string `form:"time,omitempty" json:"time,omitempty" xml:"time,omitempty"`
}

// NewFindingResponseCollection builds the HTTP response body from the result
// of the "List findings" endpoint of the "findings" service.
func NewFindingResponseCollection(res findingsviews.FindingCollectionView) FindingResponseCollection {
	body := make([]*FindingResponse, len(res))
	for i, val := range res {
		body[i] = marshalFindingsviewsFindingViewToFindingResponse(val)
	}
	return body
}

// NewGetFindingResponseBody builds the HTTP response body from the result of
// the "Get finding" endpoint of the "findings" service.
func NewGetFindingResponseBody(res *findingsviews.FindingView) *GetFindingResponseBody {
	body := &GetFindingResponseBody{
		ID:            res.ID,
		Details:       res.Details,
		ImpactDetails: res.ImpactDetails,
		Status:        res.Status,
		Score:         res.Score,
	}
	if res.Issue != nil {
		body.Issue = marshalFindingsviewsIssueViewToIssueResponseBody(res.Issue)
	}
	if res.Target != nil {
		body.Target = marshalFindingsviewsTargetViewToTargetResponseBody(res.Target)
	}
	if res.Source != nil {
		body.Source = marshalFindingsviewsSourcewithnotargetViewToSourcewithnotargetResponseBody(res.Source)
	}
	if res.Resources != nil {
		body.Resources = make([]*ResourceGroupResponseBody, len(res.Resources))
		for i, val := range res.Resources {
			body.Resources[i] = marshalFindingsviewsResourceGroupViewToResourceGroupResponseBody(val)
		}
	}
	return body
}

// NewEventResponseCollection builds the HTTP response body from the result of
// the "List events by finding" endpoint of the "findings" service.
func NewEventResponseCollection(res findingsviews.EventCollectionView) EventResponseCollection {
	body := make([]*EventResponse, len(res))
	for i, val := range res {
		body[i] = marshalFindingsviewsEventViewToEventResponse(val)
	}
	return body
}

// NewGetFindingMTTRResponseBody builds the HTTP response body from the result
// of the "Get finding MTTR" endpoint of the "findings" service.
func NewGetFindingMTTRResponseBody(res *findingsviews.MttrView) *GetFindingMTTRResponseBody {
	body := &GetFindingMTTRResponseBody{
		Mttr: res.Mttr,
	}
	return body
}

// NewPatchFindingResponseBody builds the HTTP response body from the result of
// the "Patch finding" endpoint of the "findings" service.
func NewPatchFindingResponseBody(res *findingsviews.FindingView) *PatchFindingResponseBody {
	body := &PatchFindingResponseBody{
		ID:            res.ID,
		Details:       res.Details,
		ImpactDetails: res.ImpactDetails,
		Status:        res.Status,
		Score:         res.Score,
	}
	if res.Issue != nil {
		body.Issue = marshalFindingsviewsIssueViewToIssueResponseBody(res.Issue)
	}
	if res.Target != nil {
		body.Target = marshalFindingsviewsTargetViewToTargetResponseBody(res.Target)
	}
	if res.Source != nil {
		body.Source = marshalFindingsviewsSourcewithnotargetViewToSourcewithnotargetResponseBody(res.Source)
	}
	if res.Resources != nil {
		body.Resources = make([]*ResourceGroupResponseBody, len(res.Resources))
		for i, val := range res.Resources {
			body.Resources[i] = marshalFindingsviewsResourceGroupViewToResourceGroupResponseBody(val)
		}
	}
	return body
}

// NewListFindingsPayload builds a findings service List findings endpoint
// payload.
func NewListFindingsPayload(team *string, tag *string, status *string, minScore *int, maxScore *int, atDate *string, minDate *string, maxDate *string, sortBy *string, page *int, size *int, identifier *string, identifiermatch *bool, identifiers *string, labels *string) *findings.ListFindingsPayload {
	v := &findings.ListFindingsPayload{}
	v.Team = team
	v.Tag = tag
	v.Status = status
	v.MinScore = minScore
	v.MaxScore = maxScore
	v.AtDate = atDate
	v.MinDate = minDate
	v.MaxDate = maxDate
	v.SortBy = sortBy
	v.Page = page
	v.Size = size
	v.Identifier = identifier
	v.Identifiermatch = identifiermatch
	v.Identifiers = identifiers
	v.Labels = labels

	return v
}

// NewGetFindingPayload builds a findings service Get finding endpoint payload.
func NewGetFindingPayload(id string) *findings.GetFindingPayload {
	v := &findings.GetFindingPayload{}
	v.ID = &id

	return v
}

// NewListEventsByFindingPayload builds a findings service List events by
// finding endpoint payload.
func NewListEventsByFindingPayload(id string, page *int, size *int) *findings.ListEventsByFindingPayload {
	v := &findings.ListEventsByFindingPayload{}
	v.ID = &id
	v.Page = page
	v.Size = size

	return v
}

// NewGetFindingMTTRPayload builds a findings service Get finding MTTR endpoint
// payload.
func NewGetFindingMTTRPayload(id string) *findings.GetFindingMTTRPayload {
	v := &findings.GetFindingMTTRPayload{}
	v.ID = &id

	return v
}

// NewPatchFindingPayload builds a findings service Patch finding endpoint
// payload.
func NewPatchFindingPayload(body *PatchFindingRequestBody, id string, authorization *string) *findings.PatchFindingPayload {
	v := &findings.PatchFindingPayload{
		Status: body.Status,
	}
	v.ID = &id
	v.Authorization = authorization

	return v
}
