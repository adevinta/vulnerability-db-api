// Code generated by goa v3.14.0, DO NOT EDIT.
//
// issues HTTP server encoders and decoders
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package server

import (
	"context"
	"net/http"
	"strconv"

	issuesviews "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/issues/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeListIssuesResponse returns an encoder for responses returned by the
// issues List issues endpoint.
func EncodeListIssuesResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res := v.(issuesviews.IssueCollection)
		enc := encoder(ctx, w)
		body := NewIssueResponseCollection(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListIssuesRequest returns a decoder for requests sent to the issues
// List issues endpoint.
func DecodeListIssuesRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			page *int
			size *int
			err  error
		)
		{
			pageRaw := r.URL.Query().Get("page")
			if pageRaw != "" {
				v, err2 := strconv.ParseInt(pageRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("page", pageRaw, "integer"))
				}
				pv := int(v)
				page = &pv
			}
		}
		{
			sizeRaw := r.URL.Query().Get("size")
			if sizeRaw != "" {
				v, err2 := strconv.ParseInt(sizeRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("size", sizeRaw, "integer"))
				}
				pv := int(v)
				size = &pv
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewListIssuesPayload(page, size)

		return payload, nil
	}
}

// EncodeIssuesSummaryResponse returns an encoder for responses returned by the
// issues Issues summary endpoint.
func EncodeIssuesSummaryResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res := v.(issuesviews.IssueSummaryCollection)
		enc := encoder(ctx, w)
		body := NewIssueSummaryResponseCollection(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeIssuesSummaryRequest returns a decoder for requests sent to the issues
// Issues summary endpoint.
func DecodeIssuesSummaryRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			team        *string
			teams       *string
			status      *string
			sortBy      *string
			page        *int
			size        *int
			identifiers *string
			labels      *string
			err         error
		)
		teamRaw := r.URL.Query().Get("team")
		if teamRaw != "" {
			team = &teamRaw
		}
		teamsRaw := r.URL.Query().Get("teams")
		if teamsRaw != "" {
			teams = &teamsRaw
		}
		statusRaw := r.URL.Query().Get("status")
		if statusRaw != "" {
			status = &statusRaw
		}
		sortByRaw := r.URL.Query().Get("sortBy")
		if sortByRaw != "" {
			sortBy = &sortByRaw
		}
		{
			pageRaw := r.URL.Query().Get("page")
			if pageRaw != "" {
				v, err2 := strconv.ParseInt(pageRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("page", pageRaw, "integer"))
				}
				pv := int(v)
				page = &pv
			}
		}
		{
			sizeRaw := r.URL.Query().Get("size")
			if sizeRaw != "" {
				v, err2 := strconv.ParseInt(sizeRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("size", sizeRaw, "integer"))
				}
				pv := int(v)
				size = &pv
			}
		}
		identifiersRaw := r.URL.Query().Get("identifiers")
		if identifiersRaw != "" {
			identifiers = &identifiersRaw
		}
		labelsRaw := r.URL.Query().Get("labels")
		if labelsRaw != "" {
			labels = &labelsRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewIssuesSummaryPayload(team, teams, status, sortBy, page, size, identifiers, labels)

		return payload, nil
	}
}

// EncodeGetIssueResponse returns an encoder for responses returned by the
// issues Get issue endpoint.
func EncodeGetIssueResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res := v.(*issuesviews.Issue)
		enc := encoder(ctx, w)
		body := NewGetIssueResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetIssueRequest returns a decoder for requests sent to the issues Get
// issue endpoint.
func DecodeGetIssueRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			id string

			params = mux.Vars(r)
		)
		id = params["id"]
		payload := NewGetIssuePayload(id)

		return payload, nil
	}
}

// EncodeListFindingsByIssueResponse returns an encoder for responses returned
// by the issues List findings by issue endpoint.
func EncodeListFindingsByIssueResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res := v.(issuesviews.FindingCollection)
		enc := encoder(ctx, w)
		body := NewFindingResponseCollection(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListFindingsByIssueRequest returns a decoder for requests sent to the
// issues List findings by issue endpoint.
func DecodeListFindingsByIssueRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			id          string
			status      *string
			sortBy      *string
			page        *int
			size        *int
			identifiers *string
			labels      *string
			err         error

			params = mux.Vars(r)
		)
		id = params["id"]
		statusRaw := r.URL.Query().Get("status")
		if statusRaw != "" {
			status = &statusRaw
		}
		sortByRaw := r.URL.Query().Get("sortBy")
		if sortByRaw != "" {
			sortBy = &sortByRaw
		}
		{
			pageRaw := r.URL.Query().Get("page")
			if pageRaw != "" {
				v, err2 := strconv.ParseInt(pageRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("page", pageRaw, "integer"))
				}
				pv := int(v)
				page = &pv
			}
		}
		{
			sizeRaw := r.URL.Query().Get("size")
			if sizeRaw != "" {
				v, err2 := strconv.ParseInt(sizeRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("size", sizeRaw, "integer"))
				}
				pv := int(v)
				size = &pv
			}
		}
		identifiersRaw := r.URL.Query().Get("identifiers")
		if identifiersRaw != "" {
			identifiers = &identifiersRaw
		}
		labelsRaw := r.URL.Query().Get("labels")
		if labelsRaw != "" {
			labels = &labelsRaw
		}
		if err != nil {
			return nil, err
		}
		payload := NewListFindingsByIssuePayload(id, status, sortBy, page, size, identifiers, labels)

		return payload, nil
	}
}

// EncodeGetFindingByIssueTargetAndAffectedResourceResponse returns an encoder
// for responses returned by the issues Get finding by issue, target and
// affected resource endpoint.
func EncodeGetFindingByIssueTargetAndAffectedResourceResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res := v.(*issuesviews.Finding)
		enc := encoder(ctx, w)
		body := NewGetFindingByIssueTargetAndAffectedResourceResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetFindingByIssueTargetAndAffectedResourceRequest returns a decoder
// for requests sent to the issues Get finding by issue, target and affected
// resource endpoint.
func DecodeGetFindingByIssueTargetAndAffectedResourceRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			issueID  string
			targetID string
			resource string

			params = mux.Vars(r)
		)
		issueID = params["issue_id"]
		targetID = params["target_id"]
		resource = params["resource"]
		payload := NewGetFindingByIssueTargetAndAffectedResourcePayload(issueID, targetID, resource)

		return payload, nil
	}
}

// EncodeGetIssueMTTRResponse returns an encoder for responses returned by the
// issues Get issue MTTR endpoint.
func EncodeGetIssueMTTRResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, any) error {
	return func(ctx context.Context, w http.ResponseWriter, v any) error {
		res, _ := v.(float32)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetIssueMTTRRequest returns a decoder for requests sent to the issues
// Get issue MTTR endpoint.
func DecodeGetIssueMTTRRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (any, error) {
	return func(r *http.Request) (any, error) {
		var (
			id string

			params = mux.Vars(r)
		)
		id = params["id"]
		payload := NewGetIssueMTTRPayload(id)

		return payload, nil
	}
}

// marshalIssuesviewsIssueViewToIssueResponse builds a value of type
// *IssueResponse from a value of type *issuesviews.IssueView.
func marshalIssuesviewsIssueViewToIssueResponse(v *issuesviews.IssueView) *IssueResponse {
	res := &IssueResponse{
		ID:          v.ID,
		Summary:     v.Summary,
		CweID:       v.CweID,
		Description: v.Description,
	}
	if v.Recommendations != nil {
		res.Recommendations = make([]string, len(v.Recommendations))
		for i, val := range v.Recommendations {
			res.Recommendations[i] = val
		}
	}
	if v.ReferenceLinks != nil {
		res.ReferenceLinks = make([]string, len(v.ReferenceLinks))
		for i, val := range v.ReferenceLinks {
			res.ReferenceLinks[i] = val
		}
	}
	if v.Labels != nil {
		res.Labels = make([]string, len(v.Labels))
		for i, val := range v.Labels {
			res.Labels[i] = val
		}
	}

	return res
}

// marshalIssuesviewsIssueSummaryViewToIssueSummaryResponse builds a value of
// type *IssueSummaryResponse from a value of type
// *issuesviews.IssueSummaryView.
func marshalIssuesviewsIssueSummaryViewToIssueSummaryResponse(v *issuesviews.IssueSummaryView) *IssueSummaryResponse {
	res := &IssueSummaryResponse{
		IssueID:        v.IssueID,
		Summary:        v.Summary,
		TargetsCount:   v.TargetsCount,
		ResourcesCount: v.ResourcesCount,
		MaxScore:       v.MaxScore,
	}

	return res
}

// marshalIssuesviewsFindingViewToFindingResponse builds a value of type
// *FindingResponse from a value of type *issuesviews.FindingView.
func marshalIssuesviewsFindingViewToFindingResponse(v *issuesviews.FindingView) *FindingResponse {
	res := &FindingResponse{
		ID:            v.ID,
		Details:       v.Details,
		ImpactDetails: v.ImpactDetails,
		Status:        v.Status,
		Score:         v.Score,
	}
	if v.Issue != nil {
		res.Issue = marshalIssuesviewsIssueViewToIssueResponse(v.Issue)
	}
	if v.Target != nil {
		res.Target = marshalIssuesviewsTargetViewToTargetResponse(v.Target)
	}
	if v.Source != nil {
		res.Source = marshalIssuesviewsSourcewithnotargetViewToSourcewithnotargetResponse(v.Source)
	}
	if v.Resources != nil {
		res.Resources = make([]*ResourceGroupResponse, len(v.Resources))
		for i, val := range v.Resources {
			res.Resources[i] = marshalIssuesviewsResourceGroupViewToResourceGroupResponse(val)
		}
	}

	return res
}

// marshalIssuesviewsTargetViewToTargetResponse builds a value of type
// *TargetResponse from a value of type *issuesviews.TargetView.
func marshalIssuesviewsTargetViewToTargetResponse(v *issuesviews.TargetView) *TargetResponse {
	if v == nil {
		return nil
	}
	res := &TargetResponse{
		ID:         v.ID,
		Identifier: v.Identifier,
	}
	if v.Teams != nil {
		res.Teams = make([]string, len(v.Teams))
		for i, val := range v.Teams {
			res.Teams[i] = val
		}
	}

	return res
}

// marshalIssuesviewsSourcewithnotargetViewToSourcewithnotargetResponse builds
// a value of type *SourcewithnotargetResponse from a value of type
// *issuesviews.SourcewithnotargetView.
func marshalIssuesviewsSourcewithnotargetViewToSourcewithnotargetResponse(v *issuesviews.SourcewithnotargetView) *SourcewithnotargetResponse {
	if v == nil {
		return nil
	}
	res := &SourcewithnotargetResponse{
		ID:        v.ID,
		Name:      v.Name,
		Component: v.Component,
		Instance:  v.Instance,
		Options:   v.Options,
		Time:      v.Time,
	}

	return res
}

// marshalIssuesviewsResourceGroupViewToResourceGroupResponse builds a value of
// type *ResourceGroupResponse from a value of type
// *issuesviews.ResourceGroupView.
func marshalIssuesviewsResourceGroupViewToResourceGroupResponse(v *issuesviews.ResourceGroupView) *ResourceGroupResponse {
	if v == nil {
		return nil
	}
	res := &ResourceGroupResponse{
		Name: v.Name,
	}
	if v.Attributes != nil {
		res.Attributes = make([]string, len(v.Attributes))
		for i, val := range v.Attributes {
			res.Attributes[i] = val
		}
	}
	if v.Resources != nil {
		res.Resources = make([]map[string]string, len(v.Resources))
		for i, val := range v.Resources {
			res.Resources[i] = make(map[string]string, len(val))
			for key, val := range val {
				tk := key
				tv := val
				res.Resources[i][tk] = tv
			}
		}
	}

	return res
}

// marshalIssuesviewsIssueViewToIssueResponseBody builds a value of type
// *IssueResponseBody from a value of type *issuesviews.IssueView.
func marshalIssuesviewsIssueViewToIssueResponseBody(v *issuesviews.IssueView) *IssueResponseBody {
	if v == nil {
		return nil
	}
	res := &IssueResponseBody{
		ID:          v.ID,
		Summary:     v.Summary,
		CweID:       v.CweID,
		Description: v.Description,
	}
	if v.Recommendations != nil {
		res.Recommendations = make([]string, len(v.Recommendations))
		for i, val := range v.Recommendations {
			res.Recommendations[i] = val
		}
	}
	if v.ReferenceLinks != nil {
		res.ReferenceLinks = make([]string, len(v.ReferenceLinks))
		for i, val := range v.ReferenceLinks {
			res.ReferenceLinks[i] = val
		}
	}
	if v.Labels != nil {
		res.Labels = make([]string, len(v.Labels))
		for i, val := range v.Labels {
			res.Labels[i] = val
		}
	}

	return res
}

// marshalIssuesviewsTargetViewToTargetResponseBody builds a value of type
// *TargetResponseBody from a value of type *issuesviews.TargetView.
func marshalIssuesviewsTargetViewToTargetResponseBody(v *issuesviews.TargetView) *TargetResponseBody {
	if v == nil {
		return nil
	}
	res := &TargetResponseBody{
		ID:         v.ID,
		Identifier: v.Identifier,
	}
	if v.Teams != nil {
		res.Teams = make([]string, len(v.Teams))
		for i, val := range v.Teams {
			res.Teams[i] = val
		}
	}

	return res
}

// marshalIssuesviewsSourcewithnotargetViewToSourcewithnotargetResponseBody
// builds a value of type *SourcewithnotargetResponseBody from a value of type
// *issuesviews.SourcewithnotargetView.
func marshalIssuesviewsSourcewithnotargetViewToSourcewithnotargetResponseBody(v *issuesviews.SourcewithnotargetView) *SourcewithnotargetResponseBody {
	if v == nil {
		return nil
	}
	res := &SourcewithnotargetResponseBody{
		ID:        v.ID,
		Name:      v.Name,
		Component: v.Component,
		Instance:  v.Instance,
		Options:   v.Options,
		Time:      v.Time,
	}

	return res
}

// marshalIssuesviewsResourceGroupViewToResourceGroupResponseBody builds a
// value of type *ResourceGroupResponseBody from a value of type
// *issuesviews.ResourceGroupView.
func marshalIssuesviewsResourceGroupViewToResourceGroupResponseBody(v *issuesviews.ResourceGroupView) *ResourceGroupResponseBody {
	if v == nil {
		return nil
	}
	res := &ResourceGroupResponseBody{
		Name: v.Name,
	}
	if v.Attributes != nil {
		res.Attributes = make([]string, len(v.Attributes))
		for i, val := range v.Attributes {
			res.Attributes[i] = val
		}
	}
	if v.Resources != nil {
		res.Resources = make([]map[string]string, len(v.Resources))
		for i, val := range v.Resources {
			res.Resources[i] = make(map[string]string, len(val))
			for key, val := range val {
				tk := key
				tv := val
				res.Resources[i][tk] = tv
			}
		}
	}

	return res
}
