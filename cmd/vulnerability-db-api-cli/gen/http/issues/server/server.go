// Code generated by goa v3.14.0, DO NOT EDIT.
//
// issues HTTP server
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package server

import (
	"context"
	"net/http"

	issues "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/issues"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the issues service endpoint HTTP handlers.
type Server struct {
	Mounts                                     []*MountPoint
	ListIssues                                 http.Handler
	IssuesSummary                              http.Handler
	GetIssue                                   http.Handler
	ListFindingsByIssue                        http.Handler
	GetFindingByIssueTargetAndAffectedResource http.Handler
	GetIssueMTTR                               http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the issues service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *issues.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"ListIssues", "GET", "/issues"},
			{"IssuesSummary", "GET", "/issues/summary"},
			{"GetIssue", "GET", "/issues/{id}"},
			{"ListFindingsByIssue", "GET", "/issues/{id}/findings"},
			{"GetFindingByIssueTargetAndAffectedResource", "GET", "/issues/{issue_id}/targets/{target_id}/resources/{resource}"},
			{"GetIssueMTTR", "GET", "/issues/{id}/mttr"},
		},
		ListIssues:          NewListIssuesHandler(e.ListIssues, mux, decoder, encoder, errhandler, formatter),
		IssuesSummary:       NewIssuesSummaryHandler(e.IssuesSummary, mux, decoder, encoder, errhandler, formatter),
		GetIssue:            NewGetIssueHandler(e.GetIssue, mux, decoder, encoder, errhandler, formatter),
		ListFindingsByIssue: NewListFindingsByIssueHandler(e.ListFindingsByIssue, mux, decoder, encoder, errhandler, formatter),
		GetFindingByIssueTargetAndAffectedResource: NewGetFindingByIssueTargetAndAffectedResourceHandler(e.GetFindingByIssueTargetAndAffectedResource, mux, decoder, encoder, errhandler, formatter),
		GetIssueMTTR: NewGetIssueMTTRHandler(e.GetIssueMTTR, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "issues" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.ListIssues = m(s.ListIssues)
	s.IssuesSummary = m(s.IssuesSummary)
	s.GetIssue = m(s.GetIssue)
	s.ListFindingsByIssue = m(s.ListFindingsByIssue)
	s.GetFindingByIssueTargetAndAffectedResource = m(s.GetFindingByIssueTargetAndAffectedResource)
	s.GetIssueMTTR = m(s.GetIssueMTTR)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return issues.MethodNames[:] }

// Mount configures the mux to serve the issues endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountListIssuesHandler(mux, h.ListIssues)
	MountIssuesSummaryHandler(mux, h.IssuesSummary)
	MountGetIssueHandler(mux, h.GetIssue)
	MountListFindingsByIssueHandler(mux, h.ListFindingsByIssue)
	MountGetFindingByIssueTargetAndAffectedResourceHandler(mux, h.GetFindingByIssueTargetAndAffectedResource)
	MountGetIssueMTTRHandler(mux, h.GetIssueMTTR)
}

// Mount configures the mux to serve the issues endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountListIssuesHandler configures the mux to serve the "issues" service
// "List issues" endpoint.
func MountListIssuesHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/issues", f)
}

// NewListIssuesHandler creates a HTTP handler which loads the HTTP request and
// calls the "issues" service "List issues" endpoint.
func NewListIssuesHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListIssuesRequest(mux, decoder)
		encodeResponse = EncodeListIssuesResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "List issues")
		ctx = context.WithValue(ctx, goa.ServiceKey, "issues")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountIssuesSummaryHandler configures the mux to serve the "issues" service
// "Issues summary" endpoint.
func MountIssuesSummaryHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/issues/summary", f)
}

// NewIssuesSummaryHandler creates a HTTP handler which loads the HTTP request
// and calls the "issues" service "Issues summary" endpoint.
func NewIssuesSummaryHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeIssuesSummaryRequest(mux, decoder)
		encodeResponse = EncodeIssuesSummaryResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Issues summary")
		ctx = context.WithValue(ctx, goa.ServiceKey, "issues")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetIssueHandler configures the mux to serve the "issues" service "Get
// issue" endpoint.
func MountGetIssueHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/issues/{id}", f)
}

// NewGetIssueHandler creates a HTTP handler which loads the HTTP request and
// calls the "issues" service "Get issue" endpoint.
func NewGetIssueHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetIssueRequest(mux, decoder)
		encodeResponse = EncodeGetIssueResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Get issue")
		ctx = context.WithValue(ctx, goa.ServiceKey, "issues")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountListFindingsByIssueHandler configures the mux to serve the "issues"
// service "List findings by issue" endpoint.
func MountListFindingsByIssueHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/issues/{id}/findings", f)
}

// NewListFindingsByIssueHandler creates a HTTP handler which loads the HTTP
// request and calls the "issues" service "List findings by issue" endpoint.
func NewListFindingsByIssueHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListFindingsByIssueRequest(mux, decoder)
		encodeResponse = EncodeListFindingsByIssueResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "List findings by issue")
		ctx = context.WithValue(ctx, goa.ServiceKey, "issues")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetFindingByIssueTargetAndAffectedResourceHandler configures the mux to
// serve the "issues" service "Get finding by issue, target and affected
// resource" endpoint.
func MountGetFindingByIssueTargetAndAffectedResourceHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/issues/{issue_id}/targets/{target_id}/resources/{resource}", f)
}

// NewGetFindingByIssueTargetAndAffectedResourceHandler creates a HTTP handler
// which loads the HTTP request and calls the "issues" service "Get finding by
// issue, target and affected resource" endpoint.
func NewGetFindingByIssueTargetAndAffectedResourceHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetFindingByIssueTargetAndAffectedResourceRequest(mux, decoder)
		encodeResponse = EncodeGetFindingByIssueTargetAndAffectedResourceResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Get finding by issue, target and affected resource")
		ctx = context.WithValue(ctx, goa.ServiceKey, "issues")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetIssueMTTRHandler configures the mux to serve the "issues" service
// "Get issue MTTR" endpoint.
func MountGetIssueMTTRHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/issues/{id}/mttr", f)
}

// NewGetIssueMTTRHandler creates a HTTP handler which loads the HTTP request
// and calls the "issues" service "Get issue MTTR" endpoint.
func NewGetIssueMTTRHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetIssueMTTRRequest(mux, decoder)
		encodeResponse = EncodeGetIssueMTTRResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Get issue MTTR")
		ctx = context.WithValue(ctx, goa.ServiceKey, "issues")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
