/*
Copyright 2021 Adevinta
*/

// Code generated by goa v3.0.6, DO NOT EDIT.
//
// issues HTTP client CLI support package
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package client

import (
	"fmt"
	"strconv"

	issues "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/issues"
)

// BuildListIssuesPayload builds the payload for the issues List issues
// endpoint from CLI flags.
func BuildListIssuesPayload(issuesListIssuesPage string, issuesListIssuesSize string) (*issues.ListIssuesPayload, error) {
	var err error
	var page *int
	{
		if issuesListIssuesPage != "" {
			var v int64
			v, err = strconv.ParseInt(issuesListIssuesPage, 10, 64)
			val := int(v)
			page = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for page, must be INT")
			}
		}
	}
	var size *int
	{
		if issuesListIssuesSize != "" {
			var v int64
			v, err = strconv.ParseInt(issuesListIssuesSize, 10, 64)
			val := int(v)
			size = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for size, must be INT")
			}
		}
	}
	payload := &issues.ListIssuesPayload{
		Page: page,
		Size: size,
	}
	return payload, nil
}

// BuildIssuesSummaryPayload builds the payload for the issues Issues summary
// endpoint from CLI flags.
func BuildIssuesSummaryPayload(issuesIssuesSummaryTag string, issuesIssuesSummaryStatus string, issuesIssuesSummarySortBy string, issuesIssuesSummaryPage string, issuesIssuesSummarySize string) (*issues.IssuesSummaryPayload, error) {
	var err error
	var tag *string
	{
		if issuesIssuesSummaryTag != "" {
			tag = &issuesIssuesSummaryTag
		}
	}
	var status *string
	{
		if issuesIssuesSummaryStatus != "" {
			status = &issuesIssuesSummaryStatus
		}
	}
	var sortBy *string
	{
		if issuesIssuesSummarySortBy != "" {
			sortBy = &issuesIssuesSummarySortBy
		}
	}
	var page *int
	{
		if issuesIssuesSummaryPage != "" {
			var v int64
			v, err = strconv.ParseInt(issuesIssuesSummaryPage, 10, 64)
			val := int(v)
			page = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for page, must be INT")
			}
		}
	}
	var size *int
	{
		if issuesIssuesSummarySize != "" {
			var v int64
			v, err = strconv.ParseInt(issuesIssuesSummarySize, 10, 64)
			val := int(v)
			size = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for size, must be INT")
			}
		}
	}
	payload := &issues.IssuesSummaryPayload{
		Tag:    tag,
		Status: status,
		SortBy: sortBy,
		Page:   page,
		Size:   size,
	}
	return payload, nil
}

// BuildGetIssuePayload builds the payload for the issues Get issue endpoint
// from CLI flags.
func BuildGetIssuePayload(issuesGetIssueID string) (*issues.GetIssuePayload, error) {
	var id string
	{
		id = issuesGetIssueID
	}
	payload := &issues.GetIssuePayload{
		ID: &id,
	}
	return payload, nil
}

// BuildListFindingsByIssuePayload builds the payload for the issues List
// findings by issue endpoint from CLI flags.
func BuildListFindingsByIssuePayload(issuesListFindingsByIssueID string, issuesListFindingsByIssueStatus string, issuesListFindingsByIssueSortBy string, issuesListFindingsByIssuePage string, issuesListFindingsByIssueSize string) (*issues.ListFindingsByIssuePayload, error) {
	var err error
	var id string
	{
		id = issuesListFindingsByIssueID
	}
	var status *string
	{
		if issuesListFindingsByIssueStatus != "" {
			status = &issuesListFindingsByIssueStatus
		}
	}
	var sortBy *string
	{
		if issuesListFindingsByIssueSortBy != "" {
			sortBy = &issuesListFindingsByIssueSortBy
		}
	}
	var page *int
	{
		if issuesListFindingsByIssuePage != "" {
			var v int64
			v, err = strconv.ParseInt(issuesListFindingsByIssuePage, 10, 64)
			val := int(v)
			page = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for page, must be INT")
			}
		}
	}
	var size *int
	{
		if issuesListFindingsByIssueSize != "" {
			var v int64
			v, err = strconv.ParseInt(issuesListFindingsByIssueSize, 10, 64)
			val := int(v)
			size = &val
			if err != nil {
				return nil, fmt.Errorf("invalid value for size, must be INT")
			}
		}
	}
	payload := &issues.ListFindingsByIssuePayload{
		ID:     &id,
		Status: status,
		SortBy: sortBy,
		Page:   page,
		Size:   size,
	}
	return payload, nil
}

// BuildListFindingsByIssueAndTargetPayload builds the payload for the issues
// List findings by issue and target endpoint from CLI flags.
func BuildListFindingsByIssueAndTargetPayload(issuesListFindingsByIssueAndTargetIssueID string, issuesListFindingsByIssueAndTargetTargetID string) (*issues.ListFindingsByIssueAndTargetPayload, error) {
	var issueID string
	{
		issueID = issuesListFindingsByIssueAndTargetIssueID
	}
	var targetID string
	{
		targetID = issuesListFindingsByIssueAndTargetTargetID
	}
	payload := &issues.ListFindingsByIssueAndTargetPayload{
		IssueID:  &issueID,
		TargetID: &targetID,
	}
	return payload, nil
}

// BuildGetIssueMTTRPayload builds the payload for the issues Get issue MTTR
// endpoint from CLI flags.
func BuildGetIssueMTTRPayload(issuesGetIssueMTTRID string) (*issues.GetIssueMTTRPayload, error) {
	var id string
	{
		id = issuesGetIssueMTTRID
	}
	payload := &issues.GetIssueMTTRPayload{
		ID: &id,
	}
	return payload, nil
}
