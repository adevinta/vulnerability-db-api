// Code generated by goa v3.5.2, DO NOT EDIT.
//
// issues client HTTP transport
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the issues service endpoint HTTP clients.
type Client struct {
	// ListIssues Doer is the HTTP client used to make requests to the List issues
	// endpoint.
	ListIssuesDoer goahttp.Doer

	// IssuesSummary Doer is the HTTP client used to make requests to the Issues
	// summary endpoint.
	IssuesSummaryDoer goahttp.Doer

	// GetIssue Doer is the HTTP client used to make requests to the Get issue
	// endpoint.
	GetIssueDoer goahttp.Doer

	// ListFindingsByIssue Doer is the HTTP client used to make requests to the
	// List findings by issue endpoint.
	ListFindingsByIssueDoer goahttp.Doer

	// GetFindingByIssueTargetAndAffectedResource Doer is the HTTP client used to
	// make requests to the Get finding by issue, target and affected resource
	// endpoint.
	GetFindingByIssueTargetAndAffectedResourceDoer goahttp.Doer

	// GetIssueMTTR Doer is the HTTP client used to make requests to the Get issue
	// MTTR endpoint.
	GetIssueMTTRDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the issues service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		ListIssuesDoer:          doer,
		IssuesSummaryDoer:       doer,
		GetIssueDoer:            doer,
		ListFindingsByIssueDoer: doer,
		GetFindingByIssueTargetAndAffectedResourceDoer: doer,
		GetIssueMTTRDoer:    doer,
		RestoreResponseBody: restoreBody,
		scheme:              scheme,
		host:                host,
		decoder:             dec,
		encoder:             enc,
	}
}

// ListIssues returns an endpoint that makes HTTP requests to the issues
// service List issues server.
func (c *Client) ListIssues() goa.Endpoint {
	var (
		encodeRequest  = EncodeListIssuesRequest(c.encoder)
		decodeResponse = DecodeListIssuesResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListIssuesRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListIssuesDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("issues", "List issues", err)
		}
		return decodeResponse(resp)
	}
}

// IssuesSummary returns an endpoint that makes HTTP requests to the issues
// service Issues summary server.
func (c *Client) IssuesSummary() goa.Endpoint {
	var (
		encodeRequest  = EncodeIssuesSummaryRequest(c.encoder)
		decodeResponse = DecodeIssuesSummaryResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildIssuesSummaryRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.IssuesSummaryDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("issues", "Issues summary", err)
		}
		return decodeResponse(resp)
	}
}

// GetIssue returns an endpoint that makes HTTP requests to the issues service
// Get issue server.
func (c *Client) GetIssue() goa.Endpoint {
	var (
		decodeResponse = DecodeGetIssueResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetIssueRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetIssueDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("issues", "Get issue", err)
		}
		return decodeResponse(resp)
	}
}

// ListFindingsByIssue returns an endpoint that makes HTTP requests to the
// issues service List findings by issue server.
func (c *Client) ListFindingsByIssue() goa.Endpoint {
	var (
		encodeRequest  = EncodeListFindingsByIssueRequest(c.encoder)
		decodeResponse = DecodeListFindingsByIssueResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListFindingsByIssueRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListFindingsByIssueDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("issues", "List findings by issue", err)
		}
		return decodeResponse(resp)
	}
}

// GetFindingByIssueTargetAndAffectedResource returns an endpoint that makes
// HTTP requests to the issues service Get finding by issue, target and
// affected resource server.
func (c *Client) GetFindingByIssueTargetAndAffectedResource() goa.Endpoint {
	var (
		decodeResponse = DecodeGetFindingByIssueTargetAndAffectedResourceResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetFindingByIssueTargetAndAffectedResourceRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetFindingByIssueTargetAndAffectedResourceDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("issues", "Get finding by issue, target and affected resource", err)
		}
		return decodeResponse(resp)
	}
}

// GetIssueMTTR returns an endpoint that makes HTTP requests to the issues
// service Get issue MTTR server.
func (c *Client) GetIssueMTTR() goa.Endpoint {
	var (
		decodeResponse = DecodeGetIssueMTTRResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetIssueMTTRRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetIssueMTTRDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("issues", "Get issue MTTR", err)
		}
		return decodeResponse(resp)
	}
}
