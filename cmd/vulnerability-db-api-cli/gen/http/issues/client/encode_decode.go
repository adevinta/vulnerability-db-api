// Code generated by goa v3.0.6, DO NOT EDIT.
//
// issues HTTP client encoders and decoders
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package client

import (
	"bytes"
	"context"
	"fmt"
	"io/ioutil"
	"net/http"
	"net/url"

	issues "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/issues"
	issuesviews "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/issues/views"
	goahttp "goa.design/goa/v3/http"
)

// BuildListIssuesRequest instantiates a HTTP request object with method and
// path set to call the "issues" service "List issues" endpoint
func (c *Client) BuildListIssuesRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListIssuesIssuesPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("issues", "List issues", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListIssuesRequest returns an encoder for requests sent to the issues
// List issues server.
func EncodeListIssuesRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*issues.ListIssuesPayload)
		if !ok {
			return goahttp.ErrInvalidType("issues", "List issues", "*issues.ListIssuesPayload", v)
		}
		values := req.URL.Query()
		if p.Page != nil {
			values.Add("page", fmt.Sprintf("%v", *p.Page))
		}
		if p.Size != nil {
			values.Add("size", fmt.Sprintf("%v", *p.Size))
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListIssuesResponse returns a decoder for responses returned by the
// issues List issues endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeListIssuesResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListIssuesResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("issues", "List issues", err)
			}
			p := NewListIssuesIssueCollectionOK(body)
			view := "default"
			vres := issuesviews.IssueCollection{p, view}
			if err = issuesviews.ValidateIssueCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("issues", "List issues", err)
			}
			res := issues.NewIssueCollection(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("issues", "List issues", resp.StatusCode, string(body))
		}
	}
}

// BuildIssuesSummaryRequest instantiates a HTTP request object with method and
// path set to call the "issues" service "Issues summary" endpoint
func (c *Client) BuildIssuesSummaryRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: IssuesSummaryIssuesPath()}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("issues", "Issues summary", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeIssuesSummaryRequest returns an encoder for requests sent to the
// issues Issues summary server.
func EncodeIssuesSummaryRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*issues.IssuesSummaryPayload)
		if !ok {
			return goahttp.ErrInvalidType("issues", "Issues summary", "*issues.IssuesSummaryPayload", v)
		}
		values := req.URL.Query()
		if p.Tag != nil {
			values.Add("tag", *p.Tag)
		}
		if p.Status != nil {
			values.Add("status", *p.Status)
		}
		if p.SortBy != nil {
			values.Add("sortBy", *p.SortBy)
		}
		if p.Page != nil {
			values.Add("page", fmt.Sprintf("%v", *p.Page))
		}
		if p.Size != nil {
			values.Add("size", fmt.Sprintf("%v", *p.Size))
		}
		if p.Identifiers != nil {
			values.Add("identifiers", *p.Identifiers)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeIssuesSummaryResponse returns a decoder for responses returned by the
// issues Issues summary endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeIssuesSummaryResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body IssuesSummaryResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("issues", "Issues summary", err)
			}
			p := NewIssuesSummaryIssueSummaryCollectionOK(body)
			view := "default"
			vres := issuesviews.IssueSummaryCollection{p, view}
			if err = issuesviews.ValidateIssueSummaryCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("issues", "Issues summary", err)
			}
			res := issues.NewIssueSummaryCollection(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("issues", "Issues summary", resp.StatusCode, string(body))
		}
	}
}

// BuildGetIssueRequest instantiates a HTTP request object with method and path
// set to call the "issues" service "Get issue" endpoint
func (c *Client) BuildGetIssueRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*issues.GetIssuePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("issues", "Get issue", "*issues.GetIssuePayload", v)
		}
		if p.ID != nil {
			id = *p.ID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetIssueIssuesPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("issues", "Get issue", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetIssueResponse returns a decoder for responses returned by the
// issues Get issue endpoint. restoreBody controls whether the response body
// should be restored after having been read.
func DecodeGetIssueResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body GetIssueResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("issues", "Get issue", err)
			}
			p := NewGetIssueIssueOK(&body)
			view := "default"
			vres := &issuesviews.Issue{p, view}
			if err = issuesviews.ValidateIssue(vres); err != nil {
				return nil, goahttp.ErrValidationError("issues", "Get issue", err)
			}
			res := issues.NewIssue(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("issues", "Get issue", resp.StatusCode, string(body))
		}
	}
}

// BuildListFindingsByIssueRequest instantiates a HTTP request object with
// method and path set to call the "issues" service "List findings by issue"
// endpoint
func (c *Client) BuildListFindingsByIssueRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*issues.ListFindingsByIssuePayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("issues", "List findings by issue", "*issues.ListFindingsByIssuePayload", v)
		}
		if p.ID != nil {
			id = *p.ID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListFindingsByIssueIssuesPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("issues", "List findings by issue", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// EncodeListFindingsByIssueRequest returns an encoder for requests sent to the
// issues List findings by issue server.
func EncodeListFindingsByIssueRequest(encoder func(*http.Request) goahttp.Encoder) func(*http.Request, interface{}) error {
	return func(req *http.Request, v interface{}) error {
		p, ok := v.(*issues.ListFindingsByIssuePayload)
		if !ok {
			return goahttp.ErrInvalidType("issues", "List findings by issue", "*issues.ListFindingsByIssuePayload", v)
		}
		values := req.URL.Query()
		if p.Status != nil {
			values.Add("status", *p.Status)
		}
		if p.SortBy != nil {
			values.Add("sortBy", *p.SortBy)
		}
		if p.Page != nil {
			values.Add("page", fmt.Sprintf("%v", *p.Page))
		}
		if p.Size != nil {
			values.Add("size", fmt.Sprintf("%v", *p.Size))
		}
		if p.Identifiers != nil {
			values.Add("identifiers", *p.Identifiers)
		}
		req.URL.RawQuery = values.Encode()
		return nil
	}
}

// DecodeListFindingsByIssueResponse returns a decoder for responses returned
// by the issues List findings by issue endpoint. restoreBody controls whether
// the response body should be restored after having been read.
func DecodeListFindingsByIssueResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListFindingsByIssueResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("issues", "List findings by issue", err)
			}
			p := NewListFindingsByIssueFindingCollectionOK(body)
			view := "default"
			vres := issuesviews.FindingCollection{p, view}
			if err = issuesviews.ValidateFindingCollection(vres); err != nil {
				return nil, goahttp.ErrValidationError("issues", "List findings by issue", err)
			}
			res := issues.NewFindingCollection(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("issues", "List findings by issue", resp.StatusCode, string(body))
		}
	}
}

// BuildListFindingsByIssueAndTargetRequest instantiates a HTTP request object
// with method and path set to call the "issues" service "List findings by
// issue and target" endpoint
func (c *Client) BuildListFindingsByIssueAndTargetRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		issueID  string
		targetID string
	)
	{
		p, ok := v.(*issues.ListFindingsByIssueAndTargetPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("issues", "List findings by issue and target", "*issues.ListFindingsByIssueAndTargetPayload", v)
		}
		if p.IssueID != nil {
			issueID = *p.IssueID
		}
		if p.TargetID != nil {
			targetID = *p.TargetID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: ListFindingsByIssueAndTargetIssuesPath(issueID, targetID)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("issues", "List findings by issue and target", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeListFindingsByIssueAndTargetResponse returns a decoder for responses
// returned by the issues List findings by issue and target endpoint.
// restoreBody controls whether the response body should be restored after
// having been read.
func DecodeListFindingsByIssueAndTargetResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body ListFindingsByIssueAndTargetResponseBody
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("issues", "List findings by issue and target", err)
			}
			p := NewListFindingsByIssueAndTargetFindingOK(&body)
			view := "default"
			vres := &issuesviews.Finding{p, view}
			if err = issuesviews.ValidateFinding(vres); err != nil {
				return nil, goahttp.ErrValidationError("issues", "List findings by issue and target", err)
			}
			res := issues.NewFinding(vres)
			return res, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("issues", "List findings by issue and target", resp.StatusCode, string(body))
		}
	}
}

// BuildGetIssueMTTRRequest instantiates a HTTP request object with method and
// path set to call the "issues" service "Get issue MTTR" endpoint
func (c *Client) BuildGetIssueMTTRRequest(ctx context.Context, v interface{}) (*http.Request, error) {
	var (
		id string
	)
	{
		p, ok := v.(*issues.GetIssueMTTRPayload)
		if !ok {
			return nil, goahttp.ErrInvalidType("issues", "Get issue MTTR", "*issues.GetIssueMTTRPayload", v)
		}
		if p.ID != nil {
			id = *p.ID
		}
	}
	u := &url.URL{Scheme: c.scheme, Host: c.host, Path: GetIssueMTTRIssuesPath(id)}
	req, err := http.NewRequest("GET", u.String(), nil)
	if err != nil {
		return nil, goahttp.ErrInvalidURL("issues", "Get issue MTTR", u.String(), err)
	}
	if ctx != nil {
		req = req.WithContext(ctx)
	}

	return req, nil
}

// DecodeGetIssueMTTRResponse returns a decoder for responses returned by the
// issues Get issue MTTR endpoint. restoreBody controls whether the response
// body should be restored after having been read.
func DecodeGetIssueMTTRResponse(decoder func(*http.Response) goahttp.Decoder, restoreBody bool) func(*http.Response) (interface{}, error) {
	return func(resp *http.Response) (interface{}, error) {
		if restoreBody {
			b, err := ioutil.ReadAll(resp.Body)
			if err != nil {
				return nil, err
			}
			resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			defer func() {
				resp.Body = ioutil.NopCloser(bytes.NewBuffer(b))
			}()
		} else {
			defer resp.Body.Close()
		}
		switch resp.StatusCode {
		case http.StatusOK:
			var (
				body float32
				err  error
			)
			err = decoder(resp).Decode(&body)
			if err != nil {
				return nil, goahttp.ErrDecodingError("issues", "Get issue MTTR", err)
			}
			return body, nil
		default:
			body, _ := ioutil.ReadAll(resp.Body)
			return nil, goahttp.ErrInvalidResponse("issues", "Get issue MTTR", resp.StatusCode, string(body))
		}
	}
}

// unmarshalIssueResponseToIssuesviewsIssueView builds a value of type
// *issuesviews.IssueView from a value of type *IssueResponse.
func unmarshalIssueResponseToIssuesviewsIssueView(v *IssueResponse) *issuesviews.IssueView {
	if v == nil {
		return nil
	}
	res := &issuesviews.IssueView{
		ID:          v.ID,
		Summary:     v.Summary,
		CweID:       v.CweID,
		Description: v.Description,
	}
	if v.Recommendations != nil {
		res.Recommendations = make([]string, len(v.Recommendations))
		for i, val := range v.Recommendations {
			res.Recommendations[i] = val
		}
	}
	if v.ReferenceLinks != nil {
		res.ReferenceLinks = make([]string, len(v.ReferenceLinks))
		for i, val := range v.ReferenceLinks {
			res.ReferenceLinks[i] = val
		}
	}

	return res
}

// unmarshalTargetResponseToIssuesviewsTargetView builds a value of type
// *issuesviews.TargetView from a value of type *TargetResponse.
func unmarshalTargetResponseToIssuesviewsTargetView(v *TargetResponse) *issuesviews.TargetView {
	if v == nil {
		return nil
	}
	res := &issuesviews.TargetView{
		ID:         v.ID,
		Identifier: v.Identifier,
	}
	if v.Tags != nil {
		res.Tags = make([]string, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = val
		}
	}

	return res
}

// unmarshalSourcewithnotargetResponseToIssuesviewsSourcewithnotargetView
// builds a value of type *issuesviews.SourcewithnotargetView from a value of
// type *SourcewithnotargetResponse.
func unmarshalSourcewithnotargetResponseToIssuesviewsSourcewithnotargetView(v *SourcewithnotargetResponse) *issuesviews.SourcewithnotargetView {
	if v == nil {
		return nil
	}
	res := &issuesviews.SourcewithnotargetView{
		ID:        v.ID,
		Name:      v.Name,
		Component: v.Component,
		Instance:  v.Instance,
		Options:   v.Options,
		Time:      v.Time,
	}

	return res
}

// unmarshalResourceGroupResponseToIssuesviewsResourceGroupView builds a value
// of type *issuesviews.ResourceGroupView from a value of type
// *ResourceGroupResponse.
func unmarshalResourceGroupResponseToIssuesviewsResourceGroupView(v *ResourceGroupResponse) *issuesviews.ResourceGroupView {
	if v == nil {
		return nil
	}
	res := &issuesviews.ResourceGroupView{
		Name: v.Name,
	}
	if v.Attributes != nil {
		res.Attributes = make([]string, len(v.Attributes))
		for i, val := range v.Attributes {
			res.Attributes[i] = val
		}
	}
	if v.Resources != nil {
		res.Resources = make([]map[string]string, len(v.Resources))
		for i, val := range v.Resources {
			res.Resources[i] = make(map[string]string, len(val))
			for key, val := range val {
				tk := key
				tv := val
				res.Resources[i][tk] = tv
			}
		}
	}

	return res
}

// unmarshalIssueResponseBodyToIssuesviewsIssueView builds a value of type
// *issuesviews.IssueView from a value of type *IssueResponseBody.
func unmarshalIssueResponseBodyToIssuesviewsIssueView(v *IssueResponseBody) *issuesviews.IssueView {
	if v == nil {
		return nil
	}
	res := &issuesviews.IssueView{
		ID:          v.ID,
		Summary:     v.Summary,
		CweID:       v.CweID,
		Description: v.Description,
	}
	if v.Recommendations != nil {
		res.Recommendations = make([]string, len(v.Recommendations))
		for i, val := range v.Recommendations {
			res.Recommendations[i] = val
		}
	}
	if v.ReferenceLinks != nil {
		res.ReferenceLinks = make([]string, len(v.ReferenceLinks))
		for i, val := range v.ReferenceLinks {
			res.ReferenceLinks[i] = val
		}
	}

	return res
}

// unmarshalTargetResponseBodyToIssuesviewsTargetView builds a value of type
// *issuesviews.TargetView from a value of type *TargetResponseBody.
func unmarshalTargetResponseBodyToIssuesviewsTargetView(v *TargetResponseBody) *issuesviews.TargetView {
	if v == nil {
		return nil
	}
	res := &issuesviews.TargetView{
		ID:         v.ID,
		Identifier: v.Identifier,
	}
	if v.Tags != nil {
		res.Tags = make([]string, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = val
		}
	}

	return res
}

// unmarshalSourcewithnotargetResponseBodyToIssuesviewsSourcewithnotargetView
// builds a value of type *issuesviews.SourcewithnotargetView from a value of
// type *SourcewithnotargetResponseBody.
func unmarshalSourcewithnotargetResponseBodyToIssuesviewsSourcewithnotargetView(v *SourcewithnotargetResponseBody) *issuesviews.SourcewithnotargetView {
	if v == nil {
		return nil
	}
	res := &issuesviews.SourcewithnotargetView{
		ID:        v.ID,
		Name:      v.Name,
		Component: v.Component,
		Instance:  v.Instance,
		Options:   v.Options,
		Time:      v.Time,
	}

	return res
}

// unmarshalResourceGroupResponseBodyToIssuesviewsResourceGroupView builds a
// value of type *issuesviews.ResourceGroupView from a value of type
// *ResourceGroupResponseBody.
func unmarshalResourceGroupResponseBodyToIssuesviewsResourceGroupView(v *ResourceGroupResponseBody) *issuesviews.ResourceGroupView {
	if v == nil {
		return nil
	}
	res := &issuesviews.ResourceGroupView{
		Name: v.Name,
	}
	if v.Attributes != nil {
		res.Attributes = make([]string, len(v.Attributes))
		for i, val := range v.Attributes {
			res.Attributes[i] = val
		}
	}
	if v.Resources != nil {
		res.Resources = make([]map[string]string, len(v.Resources))
		for i, val := range v.Resources {
			res.Resources[i] = make(map[string]string, len(val))
			for key, val := range val {
				tk := key
				tv := val
				res.Resources[i][tk] = tv
			}
		}
	}

	return res
}
