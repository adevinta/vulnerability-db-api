// Code generated by goa v3.0.6, DO NOT EDIT.
//
// targets HTTP server
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package server

import (
	"context"
	"net/http"

	targets "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/targets"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the targets service endpoint HTTP handlers.
type Server struct {
	Mounts                       []*MountPoint
	ListTargets                  http.Handler
	TargetsSummary               http.Handler
	GetTarget                    http.Handler
	CreateTarget                 http.Handler
	ListFindingsByTarget         http.Handler
	ListFindingsByTargetAndIssue http.Handler
	GetTargetMTTR                http.Handler
	DeleteTargetTag              http.Handler
	DeleteTag                    http.Handler
}

// ErrorNamer is an interface implemented by generated error structs that
// exposes the name of the error as defined in the design.
type ErrorNamer interface {
	ErrorName() string
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the targets service endpoints.
func New(
	e *targets.Endpoints,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"ListTargets", "GET", "/targets"},
			{"TargetsSummary", "GET", "/targets/summary"},
			{"GetTarget", "GET", "/targets/{id}"},
			{"CreateTarget", "POST", "/targets"},
			{"ListFindingsByTarget", "GET", "/targets/{id}/findings"},
			{"ListFindingsByTargetAndIssue", "GET", "/targets/{target_id}/issues/{issue_id}"},
			{"GetTargetMTTR", "GET", "/targets/{id}/mttr"},
			{"DeleteTargetTag", "DELETE", "/targets/{target_id}/tags/{tag}"},
			{"DeleteTag", "DELETE", "/targets/tags/{tag}"},
		},
		ListTargets:                  NewListTargetsHandler(e.ListTargets, mux, dec, enc, eh),
		TargetsSummary:               NewTargetsSummaryHandler(e.TargetsSummary, mux, dec, enc, eh),
		GetTarget:                    NewGetTargetHandler(e.GetTarget, mux, dec, enc, eh),
		CreateTarget:                 NewCreateTargetHandler(e.CreateTarget, mux, dec, enc, eh),
		ListFindingsByTarget:         NewListFindingsByTargetHandler(e.ListFindingsByTarget, mux, dec, enc, eh),
		ListFindingsByTargetAndIssue: NewListFindingsByTargetAndIssueHandler(e.ListFindingsByTargetAndIssue, mux, dec, enc, eh),
		GetTargetMTTR:                NewGetTargetMTTRHandler(e.GetTargetMTTR, mux, dec, enc, eh),
		DeleteTargetTag:              NewDeleteTargetTagHandler(e.DeleteTargetTag, mux, dec, enc, eh),
		DeleteTag:                    NewDeleteTagHandler(e.DeleteTag, mux, dec, enc, eh),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "targets" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.ListTargets = m(s.ListTargets)
	s.TargetsSummary = m(s.TargetsSummary)
	s.GetTarget = m(s.GetTarget)
	s.CreateTarget = m(s.CreateTarget)
	s.ListFindingsByTarget = m(s.ListFindingsByTarget)
	s.ListFindingsByTargetAndIssue = m(s.ListFindingsByTargetAndIssue)
	s.GetTargetMTTR = m(s.GetTargetMTTR)
	s.DeleteTargetTag = m(s.DeleteTargetTag)
	s.DeleteTag = m(s.DeleteTag)
}

// Mount configures the mux to serve the targets endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountListTargetsHandler(mux, h.ListTargets)
	MountTargetsSummaryHandler(mux, h.TargetsSummary)
	MountGetTargetHandler(mux, h.GetTarget)
	MountCreateTargetHandler(mux, h.CreateTarget)
	MountListFindingsByTargetHandler(mux, h.ListFindingsByTarget)
	MountListFindingsByTargetAndIssueHandler(mux, h.ListFindingsByTargetAndIssue)
	MountGetTargetMTTRHandler(mux, h.GetTargetMTTR)
	MountDeleteTargetTagHandler(mux, h.DeleteTargetTag)
	MountDeleteTagHandler(mux, h.DeleteTag)
}

// MountListTargetsHandler configures the mux to serve the "targets" service
// "List targets" endpoint.
func MountListTargetsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/targets", f)
}

// NewListTargetsHandler creates a HTTP handler which loads the HTTP request
// and calls the "targets" service "List targets" endpoint.
func NewListTargetsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeListTargetsRequest(mux, dec)
		encodeResponse = EncodeListTargetsResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "List targets")
		ctx = context.WithValue(ctx, goa.ServiceKey, "targets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountTargetsSummaryHandler configures the mux to serve the "targets" service
// "Targets summary" endpoint.
func MountTargetsSummaryHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/targets/summary", f)
}

// NewTargetsSummaryHandler creates a HTTP handler which loads the HTTP request
// and calls the "targets" service "Targets summary" endpoint.
func NewTargetsSummaryHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeTargetsSummaryRequest(mux, dec)
		encodeResponse = EncodeTargetsSummaryResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Targets summary")
		ctx = context.WithValue(ctx, goa.ServiceKey, "targets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountGetTargetHandler configures the mux to serve the "targets" service "Get
// target" endpoint.
func MountGetTargetHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/targets/{id}", f)
}

// NewGetTargetHandler creates a HTTP handler which loads the HTTP request and
// calls the "targets" service "Get target" endpoint.
func NewGetTargetHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeGetTargetRequest(mux, dec)
		encodeResponse = EncodeGetTargetResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Get target")
		ctx = context.WithValue(ctx, goa.ServiceKey, "targets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountCreateTargetHandler configures the mux to serve the "targets" service
// "Create target" endpoint.
func MountCreateTargetHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/targets", f)
}

// NewCreateTargetHandler creates a HTTP handler which loads the HTTP request
// and calls the "targets" service "Create target" endpoint.
func NewCreateTargetHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeCreateTargetRequest(mux, dec)
		encodeResponse = EncodeCreateTargetResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Create target")
		ctx = context.WithValue(ctx, goa.ServiceKey, "targets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountListFindingsByTargetHandler configures the mux to serve the "targets"
// service "List findings by target" endpoint.
func MountListFindingsByTargetHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/targets/{id}/findings", f)
}

// NewListFindingsByTargetHandler creates a HTTP handler which loads the HTTP
// request and calls the "targets" service "List findings by target" endpoint.
func NewListFindingsByTargetHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeListFindingsByTargetRequest(mux, dec)
		encodeResponse = EncodeListFindingsByTargetResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "List findings by target")
		ctx = context.WithValue(ctx, goa.ServiceKey, "targets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountListFindingsByTargetAndIssueHandler configures the mux to serve the
// "targets" service "List findings by target and issue" endpoint.
func MountListFindingsByTargetAndIssueHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/targets/{target_id}/issues/{issue_id}", f)
}

// NewListFindingsByTargetAndIssueHandler creates a HTTP handler which loads
// the HTTP request and calls the "targets" service "List findings by target
// and issue" endpoint.
func NewListFindingsByTargetAndIssueHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeListFindingsByTargetAndIssueRequest(mux, dec)
		encodeResponse = EncodeListFindingsByTargetAndIssueResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "List findings by target and issue")
		ctx = context.WithValue(ctx, goa.ServiceKey, "targets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountGetTargetMTTRHandler configures the mux to serve the "targets" service
// "Get target MTTR" endpoint.
func MountGetTargetMTTRHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/targets/{id}/mttr", f)
}

// NewGetTargetMTTRHandler creates a HTTP handler which loads the HTTP request
// and calls the "targets" service "Get target MTTR" endpoint.
func NewGetTargetMTTRHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeGetTargetMTTRRequest(mux, dec)
		encodeResponse = EncodeGetTargetMTTRResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Get target MTTR")
		ctx = context.WithValue(ctx, goa.ServiceKey, "targets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountDeleteTargetTagHandler configures the mux to serve the "targets"
// service "Delete target tag" endpoint.
func MountDeleteTargetTagHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/targets/{target_id}/tags/{tag}", f)
}

// NewDeleteTargetTagHandler creates a HTTP handler which loads the HTTP
// request and calls the "targets" service "Delete target tag" endpoint.
func NewDeleteTargetTagHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteTargetTagRequest(mux, dec)
		encodeResponse = EncodeDeleteTargetTagResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Delete target tag")
		ctx = context.WithValue(ctx, goa.ServiceKey, "targets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}

// MountDeleteTagHandler configures the mux to serve the "targets" service
// "Delete tag" endpoint.
func MountDeleteTagHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/targets/tags/{tag}", f)
}

// NewDeleteTagHandler creates a HTTP handler which loads the HTTP request and
// calls the "targets" service "Delete tag" endpoint.
func NewDeleteTagHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	dec func(*http.Request) goahttp.Decoder,
	enc func(context.Context, http.ResponseWriter) goahttp.Encoder,
	eh func(context.Context, http.ResponseWriter, error),
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteTagRequest(mux, dec)
		encodeResponse = EncodeDeleteTagResponse(enc)
		encodeError    = goahttp.ErrorEncoder(enc)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Delete tag")
		ctx = context.WithValue(ctx, goa.ServiceKey, "targets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}

		res, err := endpoint(ctx, payload)

		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				eh(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			eh(ctx, w, err)
		}
	})
}
