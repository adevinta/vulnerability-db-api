// Code generated by goa v3.14.0, DO NOT EDIT.
//
// targets HTTP server
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package server

import (
	"context"
	"net/http"

	targets "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/targets"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Server lists the targets service endpoint HTTP handlers.
type Server struct {
	Mounts                                     []*MountPoint
	ListTargets                                http.Handler
	TargetsSummary                             http.Handler
	GetTarget                                  http.Handler
	CreateTarget                               http.Handler
	ListFindingsByTarget                       http.Handler
	GetFindingByTargetIssueAndAffectedResource http.Handler
	GetTargetMTTR                              http.Handler
	DeleteTargetTeam                           http.Handler
	DeleteTeam                                 http.Handler
}

// MountPoint holds information about the mounted endpoints.
type MountPoint struct {
	// Method is the name of the service method served by the mounted HTTP handler.
	Method string
	// Verb is the HTTP method used to match requests to the mounted handler.
	Verb string
	// Pattern is the HTTP request path pattern used to match requests to the
	// mounted handler.
	Pattern string
}

// New instantiates HTTP handlers for all the targets service endpoints using
// the provided encoder and decoder. The handlers are mounted on the given mux
// using the HTTP verb and path defined in the design. errhandler is called
// whenever a response fails to be encoded. formatter is used to format errors
// returned by the service methods prior to encoding. Both errhandler and
// formatter are optional and can be nil.
func New(
	e *targets.Endpoints,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) *Server {
	return &Server{
		Mounts: []*MountPoint{
			{"ListTargets", "GET", "/targets"},
			{"TargetsSummary", "GET", "/targets/summary"},
			{"GetTarget", "GET", "/targets/{id}"},
			{"CreateTarget", "POST", "/targets"},
			{"ListFindingsByTarget", "GET", "/targets/{id}/findings"},
			{"GetFindingByTargetIssueAndAffectedResource", "GET", "/targets/{target_id}/issues/{issue_id}/resources/{resource}"},
			{"GetTargetMTTR", "GET", "/targets/{id}/mttr"},
			{"DeleteTargetTeam", "DELETE", "/targets/{target_id}/teams/{team}"},
			{"DeleteTeam", "DELETE", "/targets/teams/{team}"},
		},
		ListTargets:          NewListTargetsHandler(e.ListTargets, mux, decoder, encoder, errhandler, formatter),
		TargetsSummary:       NewTargetsSummaryHandler(e.TargetsSummary, mux, decoder, encoder, errhandler, formatter),
		GetTarget:            NewGetTargetHandler(e.GetTarget, mux, decoder, encoder, errhandler, formatter),
		CreateTarget:         NewCreateTargetHandler(e.CreateTarget, mux, decoder, encoder, errhandler, formatter),
		ListFindingsByTarget: NewListFindingsByTargetHandler(e.ListFindingsByTarget, mux, decoder, encoder, errhandler, formatter),
		GetFindingByTargetIssueAndAffectedResource: NewGetFindingByTargetIssueAndAffectedResourceHandler(e.GetFindingByTargetIssueAndAffectedResource, mux, decoder, encoder, errhandler, formatter),
		GetTargetMTTR:    NewGetTargetMTTRHandler(e.GetTargetMTTR, mux, decoder, encoder, errhandler, formatter),
		DeleteTargetTeam: NewDeleteTargetTeamHandler(e.DeleteTargetTeam, mux, decoder, encoder, errhandler, formatter),
		DeleteTeam:       NewDeleteTeamHandler(e.DeleteTeam, mux, decoder, encoder, errhandler, formatter),
	}
}

// Service returns the name of the service served.
func (s *Server) Service() string { return "targets" }

// Use wraps the server handlers with the given middleware.
func (s *Server) Use(m func(http.Handler) http.Handler) {
	s.ListTargets = m(s.ListTargets)
	s.TargetsSummary = m(s.TargetsSummary)
	s.GetTarget = m(s.GetTarget)
	s.CreateTarget = m(s.CreateTarget)
	s.ListFindingsByTarget = m(s.ListFindingsByTarget)
	s.GetFindingByTargetIssueAndAffectedResource = m(s.GetFindingByTargetIssueAndAffectedResource)
	s.GetTargetMTTR = m(s.GetTargetMTTR)
	s.DeleteTargetTeam = m(s.DeleteTargetTeam)
	s.DeleteTeam = m(s.DeleteTeam)
}

// MethodNames returns the methods served.
func (s *Server) MethodNames() []string { return targets.MethodNames[:] }

// Mount configures the mux to serve the targets endpoints.
func Mount(mux goahttp.Muxer, h *Server) {
	MountListTargetsHandler(mux, h.ListTargets)
	MountTargetsSummaryHandler(mux, h.TargetsSummary)
	MountGetTargetHandler(mux, h.GetTarget)
	MountCreateTargetHandler(mux, h.CreateTarget)
	MountListFindingsByTargetHandler(mux, h.ListFindingsByTarget)
	MountGetFindingByTargetIssueAndAffectedResourceHandler(mux, h.GetFindingByTargetIssueAndAffectedResource)
	MountGetTargetMTTRHandler(mux, h.GetTargetMTTR)
	MountDeleteTargetTeamHandler(mux, h.DeleteTargetTeam)
	MountDeleteTeamHandler(mux, h.DeleteTeam)
}

// Mount configures the mux to serve the targets endpoints.
func (s *Server) Mount(mux goahttp.Muxer) {
	Mount(mux, s)
}

// MountListTargetsHandler configures the mux to serve the "targets" service
// "List targets" endpoint.
func MountListTargetsHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/targets", f)
}

// NewListTargetsHandler creates a HTTP handler which loads the HTTP request
// and calls the "targets" service "List targets" endpoint.
func NewListTargetsHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListTargetsRequest(mux, decoder)
		encodeResponse = EncodeListTargetsResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "List targets")
		ctx = context.WithValue(ctx, goa.ServiceKey, "targets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountTargetsSummaryHandler configures the mux to serve the "targets" service
// "Targets summary" endpoint.
func MountTargetsSummaryHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/targets/summary", f)
}

// NewTargetsSummaryHandler creates a HTTP handler which loads the HTTP request
// and calls the "targets" service "Targets summary" endpoint.
func NewTargetsSummaryHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeTargetsSummaryRequest(mux, decoder)
		encodeResponse = EncodeTargetsSummaryResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Targets summary")
		ctx = context.WithValue(ctx, goa.ServiceKey, "targets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetTargetHandler configures the mux to serve the "targets" service "Get
// target" endpoint.
func MountGetTargetHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/targets/{id}", f)
}

// NewGetTargetHandler creates a HTTP handler which loads the HTTP request and
// calls the "targets" service "Get target" endpoint.
func NewGetTargetHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetTargetRequest(mux, decoder)
		encodeResponse = EncodeGetTargetResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Get target")
		ctx = context.WithValue(ctx, goa.ServiceKey, "targets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountCreateTargetHandler configures the mux to serve the "targets" service
// "Create target" endpoint.
func MountCreateTargetHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("POST", "/targets", f)
}

// NewCreateTargetHandler creates a HTTP handler which loads the HTTP request
// and calls the "targets" service "Create target" endpoint.
func NewCreateTargetHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeCreateTargetRequest(mux, decoder)
		encodeResponse = EncodeCreateTargetResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Create target")
		ctx = context.WithValue(ctx, goa.ServiceKey, "targets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountListFindingsByTargetHandler configures the mux to serve the "targets"
// service "List findings by target" endpoint.
func MountListFindingsByTargetHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/targets/{id}/findings", f)
}

// NewListFindingsByTargetHandler creates a HTTP handler which loads the HTTP
// request and calls the "targets" service "List findings by target" endpoint.
func NewListFindingsByTargetHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeListFindingsByTargetRequest(mux, decoder)
		encodeResponse = EncodeListFindingsByTargetResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "List findings by target")
		ctx = context.WithValue(ctx, goa.ServiceKey, "targets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetFindingByTargetIssueAndAffectedResourceHandler configures the mux to
// serve the "targets" service "Get finding by target, issue and affected
// resource" endpoint.
func MountGetFindingByTargetIssueAndAffectedResourceHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/targets/{target_id}/issues/{issue_id}/resources/{resource}", f)
}

// NewGetFindingByTargetIssueAndAffectedResourceHandler creates a HTTP handler
// which loads the HTTP request and calls the "targets" service "Get finding by
// target, issue and affected resource" endpoint.
func NewGetFindingByTargetIssueAndAffectedResourceHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetFindingByTargetIssueAndAffectedResourceRequest(mux, decoder)
		encodeResponse = EncodeGetFindingByTargetIssueAndAffectedResourceResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Get finding by target, issue and affected resource")
		ctx = context.WithValue(ctx, goa.ServiceKey, "targets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountGetTargetMTTRHandler configures the mux to serve the "targets" service
// "Get target MTTR" endpoint.
func MountGetTargetMTTRHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("GET", "/targets/{id}/mttr", f)
}

// NewGetTargetMTTRHandler creates a HTTP handler which loads the HTTP request
// and calls the "targets" service "Get target MTTR" endpoint.
func NewGetTargetMTTRHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeGetTargetMTTRRequest(mux, decoder)
		encodeResponse = EncodeGetTargetMTTRResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Get target MTTR")
		ctx = context.WithValue(ctx, goa.ServiceKey, "targets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteTargetTeamHandler configures the mux to serve the "targets"
// service "Delete target team" endpoint.
func MountDeleteTargetTeamHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/targets/{target_id}/teams/{team}", f)
}

// NewDeleteTargetTeamHandler creates a HTTP handler which loads the HTTP
// request and calls the "targets" service "Delete target team" endpoint.
func NewDeleteTargetTeamHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteTargetTeamRequest(mux, decoder)
		encodeResponse = EncodeDeleteTargetTeamResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Delete target team")
		ctx = context.WithValue(ctx, goa.ServiceKey, "targets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}

// MountDeleteTeamHandler configures the mux to serve the "targets" service
// "Delete team" endpoint.
func MountDeleteTeamHandler(mux goahttp.Muxer, h http.Handler) {
	f, ok := h.(http.HandlerFunc)
	if !ok {
		f = func(w http.ResponseWriter, r *http.Request) {
			h.ServeHTTP(w, r)
		}
	}
	mux.Handle("DELETE", "/targets/teams/{team}", f)
}

// NewDeleteTeamHandler creates a HTTP handler which loads the HTTP request and
// calls the "targets" service "Delete team" endpoint.
func NewDeleteTeamHandler(
	endpoint goa.Endpoint,
	mux goahttp.Muxer,
	decoder func(*http.Request) goahttp.Decoder,
	encoder func(context.Context, http.ResponseWriter) goahttp.Encoder,
	errhandler func(context.Context, http.ResponseWriter, error),
	formatter func(ctx context.Context, err error) goahttp.Statuser,
) http.Handler {
	var (
		decodeRequest  = DecodeDeleteTeamRequest(mux, decoder)
		encodeResponse = EncodeDeleteTeamResponse(encoder)
		encodeError    = goahttp.ErrorEncoder(encoder, formatter)
	)
	return http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		ctx := context.WithValue(r.Context(), goahttp.AcceptTypeKey, r.Header.Get("Accept"))
		ctx = context.WithValue(ctx, goa.MethodKey, "Delete team")
		ctx = context.WithValue(ctx, goa.ServiceKey, "targets")
		payload, err := decodeRequest(r)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		res, err := endpoint(ctx, payload)
		if err != nil {
			if err := encodeError(ctx, w, err); err != nil {
				errhandler(ctx, w, err)
			}
			return
		}
		if err := encodeResponse(ctx, w, res); err != nil {
			errhandler(ctx, w, err)
		}
	})
}
