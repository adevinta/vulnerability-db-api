// Code generated by goa v3.5.2, DO NOT EDIT.
//
// targets HTTP server types
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package server

import (
	targets "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/targets"
	targetsviews "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/targets/views"
)

// CreateTargetRequestBody is the type of the "targets" service "Create target"
// endpoint HTTP request body.
type CreateTargetRequestBody struct {
	// Target Identifier
	Identifier *string `form:"identifier,omitempty" json:"identifier,omitempty" xml:"identifier,omitempty"`
	// Target Teams
	Teams []string `form:"teams,omitempty" json:"teams,omitempty" xml:"teams,omitempty"`
	// Target Tags
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
}

// TargetResponseCollection is the type of the "targets" service "List targets"
// endpoint HTTP response body.
type TargetResponseCollection []*TargetResponse

// TargetSummaryResponseCollection is the type of the "targets" service
// "Targets summary" endpoint HTTP response body.
type TargetSummaryResponseCollection []*TargetSummaryResponse

// GetTargetResponseBody is the type of the "targets" service "Get target"
// endpoint HTTP response body.
type GetTargetResponseBody struct {
	// Target ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Target identifier
	Identifier *string `form:"identifier,omitempty" json:"identifier,omitempty" xml:"identifier,omitempty"`
	// List of teams associated with target
	Teams []string `form:"teams,omitempty" json:"teams,omitempty" xml:"teams,omitempty"`
	// List of tags associated with target
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
}

// CreateTargetResponseBody is the type of the "targets" service "Create
// target" endpoint HTTP response body.
type CreateTargetResponseBody struct {
	// Target ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Target identifier
	Identifier *string `form:"identifier,omitempty" json:"identifier,omitempty" xml:"identifier,omitempty"`
	// List of teams associated with target
	Teams []string `form:"teams,omitempty" json:"teams,omitempty" xml:"teams,omitempty"`
	// List of tags associated with target
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
}

// FindingResponseCollection is the type of the "targets" service "List
// findings by target" endpoint HTTP response body.
type FindingResponseCollection []*FindingResponse

// GetFindingByTargetIssueAndAffectedResourceResponseBody is the type of the
// "targets" service "Get finding by target, issue and affected resource"
// endpoint HTTP response body.
type GetFindingByTargetIssueAndAffectedResourceResponseBody struct {
	// Finding ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Issue
	Issue *IssueResponseBody `form:"issue,omitempty" json:"issue,omitempty" xml:"issue,omitempty"`
	// Target
	Target *TargetResponseBody `form:"target,omitempty" json:"target,omitempty" xml:"target,omitempty"`
	// Source
	Source *SourcewithnotargetResponseBody `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
	// Finding details
	Details *string `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Finding impact details
	ImpactDetails *string `form:"impact_details,omitempty" json:"impact_details,omitempty" xml:"impact_details,omitempty"`
	// Finding status. Can be 'OPEN' or 'FIXED'.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Finding severity score
	Score *float32 `form:"score,omitempty" json:"score,omitempty" xml:"score,omitempty"`
	// Other resources associated with the finding
	Resources []*ResourceGroupResponseBody `form:"resources,omitempty" json:"resources,omitempty" xml:"resources,omitempty"`
}

// TargetResponse is used to define fields on response body types.
type TargetResponse struct {
	// Target ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Target identifier
	Identifier *string `form:"identifier,omitempty" json:"identifier,omitempty" xml:"identifier,omitempty"`
	// List of teams associated with target
	Teams []string `form:"teams,omitempty" json:"teams,omitempty" xml:"teams,omitempty"`
	// List of tags associated with target
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
}

// TargetSummaryResponse is used to define fields on response body types.
type TargetSummaryResponse struct {
	// Target ID
	TargetID *string `form:"target_id,omitempty" json:"target_id,omitempty" xml:"target_id,omitempty"`
	// Target identifier
	Identifier *string `form:"identifier,omitempty" json:"identifier,omitempty" xml:"identifier,omitempty"`
	// Number of findings for target
	FindingsCount *int `form:"findings_count,omitempty" json:"findings_count,omitempty" xml:"findings_count,omitempty"`
	// Number of issues for target
	IssuesCount *int `form:"issues_count,omitempty" json:"issues_count,omitempty" xml:"issues_count,omitempty"`
	// Max score for target
	MaxScore *float32 `form:"max_score,omitempty" json:"max_score,omitempty" xml:"max_score,omitempty"`
}

// FindingResponse is used to define fields on response body types.
type FindingResponse struct {
	// Finding ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Issue
	Issue *IssueResponse `form:"issue,omitempty" json:"issue,omitempty" xml:"issue,omitempty"`
	// Target
	Target *TargetResponse `form:"target,omitempty" json:"target,omitempty" xml:"target,omitempty"`
	// Source
	Source *SourcewithnotargetResponse `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
	// Finding details
	Details *string `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Finding impact details
	ImpactDetails *string `form:"impact_details,omitempty" json:"impact_details,omitempty" xml:"impact_details,omitempty"`
	// Finding status. Can be 'OPEN' or 'FIXED'.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Finding severity score
	Score *float32 `form:"score,omitempty" json:"score,omitempty" xml:"score,omitempty"`
	// Other resources associated with the finding
	Resources []*ResourceGroupResponse `form:"resources,omitempty" json:"resources,omitempty" xml:"resources,omitempty"`
}

// IssueResponse is used to define fields on response body types.
type IssueResponse struct {
	// Issue ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Issue summary
	Summary *string `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	// Common Weakness Enumeration ID
	CweID *int `form:"cwe_id,omitempty" json:"cwe_id,omitempty" xml:"cwe_id,omitempty"`
	// Issue description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Recommendations to fix the issue
	Recommendations []string `form:"recommendations,omitempty" json:"recommendations,omitempty" xml:"recommendations,omitempty"`
	// Documentation reference for the issue
	ReferenceLinks []string `form:"reference_links,omitempty" json:"reference_links,omitempty" xml:"reference_links,omitempty"`
	// Labels associated with the issue
	Labels []string `form:"labels,omitempty" json:"labels,omitempty" xml:"labels,omitempty"`
}

// SourcewithnotargetResponse is used to define fields on response body types.
type SourcewithnotargetResponse struct {
	// Source ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Source name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Source component
	Component *string `form:"component,omitempty" json:"component,omitempty" xml:"component,omitempty"`
	// Source instance
	Instance *string `form:"instance,omitempty" json:"instance,omitempty" xml:"instance,omitempty"`
	// Source options
	Options *string `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// Time on which the source scanned the target
	Time *string `form:"time,omitempty" json:"time,omitempty" xml:"time,omitempty"`
}

// ResourceGroupResponse is used to define fields on response body types.
type ResourceGroupResponse struct {
	// Name of the resource group
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Column names of the resource group in the order that should be rendered
	Attributes []string `form:"attributes,omitempty" json:"attributes,omitempty" xml:"attributes,omitempty"`
	// List containing the resource rows as hashmap
	Resources []map[string]string `form:"resources,omitempty" json:"resources,omitempty" xml:"resources,omitempty"`
}

// IssueResponseBody is used to define fields on response body types.
type IssueResponseBody struct {
	// Issue ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Issue summary
	Summary *string `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	// Common Weakness Enumeration ID
	CweID *int `form:"cwe_id,omitempty" json:"cwe_id,omitempty" xml:"cwe_id,omitempty"`
	// Issue description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Recommendations to fix the issue
	Recommendations []string `form:"recommendations,omitempty" json:"recommendations,omitempty" xml:"recommendations,omitempty"`
	// Documentation reference for the issue
	ReferenceLinks []string `form:"reference_links,omitempty" json:"reference_links,omitempty" xml:"reference_links,omitempty"`
	// Labels associated with the issue
	Labels []string `form:"labels,omitempty" json:"labels,omitempty" xml:"labels,omitempty"`
}

// TargetResponseBody is used to define fields on response body types.
type TargetResponseBody struct {
	// Target ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Target identifier
	Identifier *string `form:"identifier,omitempty" json:"identifier,omitempty" xml:"identifier,omitempty"`
	// List of teams associated with target
	Teams []string `form:"teams,omitempty" json:"teams,omitempty" xml:"teams,omitempty"`
	// List of tags associated with target
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
}

// SourcewithnotargetResponseBody is used to define fields on response body
// types.
type SourcewithnotargetResponseBody struct {
	// Source ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Source name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Source component
	Component *string `form:"component,omitempty" json:"component,omitempty" xml:"component,omitempty"`
	// Source instance
	Instance *string `form:"instance,omitempty" json:"instance,omitempty" xml:"instance,omitempty"`
	// Source options
	Options *string `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// Time on which the source scanned the target
	Time *string `form:"time,omitempty" json:"time,omitempty" xml:"time,omitempty"`
}

// ResourceGroupResponseBody is used to define fields on response body types.
type ResourceGroupResponseBody struct {
	// Name of the resource group
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Column names of the resource group in the order that should be rendered
	Attributes []string `form:"attributes,omitempty" json:"attributes,omitempty" xml:"attributes,omitempty"`
	// List containing the resource rows as hashmap
	Resources []map[string]string `form:"resources,omitempty" json:"resources,omitempty" xml:"resources,omitempty"`
}

// NewTargetResponseCollection builds the HTTP response body from the result of
// the "List targets" endpoint of the "targets" service.
func NewTargetResponseCollection(res targetsviews.TargetCollectionView) TargetResponseCollection {
	body := make([]*TargetResponse, len(res))
	for i, val := range res {
		body[i] = marshalTargetsviewsTargetViewToTargetResponse(val)
	}
	return body
}

// NewTargetSummaryResponseCollection builds the HTTP response body from the
// result of the "Targets summary" endpoint of the "targets" service.
func NewTargetSummaryResponseCollection(res targetsviews.TargetSummaryCollectionView) TargetSummaryResponseCollection {
	body := make([]*TargetSummaryResponse, len(res))
	for i, val := range res {
		body[i] = marshalTargetsviewsTargetSummaryViewToTargetSummaryResponse(val)
	}
	return body
}

// NewGetTargetResponseBody builds the HTTP response body from the result of
// the "Get target" endpoint of the "targets" service.
func NewGetTargetResponseBody(res *targetsviews.TargetView) *GetTargetResponseBody {
	body := &GetTargetResponseBody{
		ID:         res.ID,
		Identifier: res.Identifier,
	}
	if res.Teams != nil {
		body.Teams = make([]string, len(res.Teams))
		for i, val := range res.Teams {
			body.Teams[i] = val
		}
	}
	if res.Tags != nil {
		body.Tags = make([]string, len(res.Tags))
		for i, val := range res.Tags {
			body.Tags[i] = val
		}
	}
	return body
}

// NewCreateTargetResponseBody builds the HTTP response body from the result of
// the "Create target" endpoint of the "targets" service.
func NewCreateTargetResponseBody(res *targetsviews.TargetView) *CreateTargetResponseBody {
	body := &CreateTargetResponseBody{
		ID:         res.ID,
		Identifier: res.Identifier,
	}
	if res.Teams != nil {
		body.Teams = make([]string, len(res.Teams))
		for i, val := range res.Teams {
			body.Teams[i] = val
		}
	}
	if res.Tags != nil {
		body.Tags = make([]string, len(res.Tags))
		for i, val := range res.Tags {
			body.Tags[i] = val
		}
	}
	return body
}

// NewFindingResponseCollection builds the HTTP response body from the result
// of the "List findings by target" endpoint of the "targets" service.
func NewFindingResponseCollection(res targetsviews.FindingCollectionView) FindingResponseCollection {
	body := make([]*FindingResponse, len(res))
	for i, val := range res {
		body[i] = marshalTargetsviewsFindingViewToFindingResponse(val)
	}
	return body
}

// NewGetFindingByTargetIssueAndAffectedResourceResponseBody builds the HTTP
// response body from the result of the "Get finding by target, issue and
// affected resource" endpoint of the "targets" service.
func NewGetFindingByTargetIssueAndAffectedResourceResponseBody(res *targetsviews.FindingView) *GetFindingByTargetIssueAndAffectedResourceResponseBody {
	body := &GetFindingByTargetIssueAndAffectedResourceResponseBody{
		ID:            res.ID,
		Details:       res.Details,
		ImpactDetails: res.ImpactDetails,
		Status:        res.Status,
		Score:         res.Score,
	}
	if res.Issue != nil {
		body.Issue = marshalTargetsviewsIssueViewToIssueResponseBody(res.Issue)
	}
	if res.Target != nil {
		body.Target = marshalTargetsviewsTargetViewToTargetResponseBody(res.Target)
	}
	if res.Source != nil {
		body.Source = marshalTargetsviewsSourcewithnotargetViewToSourcewithnotargetResponseBody(res.Source)
	}
	if res.Resources != nil {
		body.Resources = make([]*ResourceGroupResponseBody, len(res.Resources))
		for i, val := range res.Resources {
			body.Resources[i] = marshalTargetsviewsResourceGroupViewToResourceGroupResponseBody(val)
		}
	}
	return body
}

// NewListTargetsPayload builds a targets service List targets endpoint payload.
func NewListTargetsPayload(team *string, tag *string, identifier *string, page *int, size *int, identifiermatch *bool, identifiers *string) *targets.ListTargetsPayload {
	v := &targets.ListTargetsPayload{}
	v.Team = team
	v.Tag = tag
	v.Identifier = identifier
	v.Page = page
	v.Size = size
	v.Identifiermatch = identifiermatch
	v.Identifiers = identifiers

	return v
}

// NewTargetsSummaryPayload builds a targets service Targets summary endpoint
// payload.
func NewTargetsSummaryPayload(team *string, tag *string, status *string, sortBy *string, page *int, size *int, identifiers *string, labels *string) *targets.TargetsSummaryPayload {
	v := &targets.TargetsSummaryPayload{}
	v.Team = team
	v.Tag = tag
	v.Status = status
	v.SortBy = sortBy
	v.Page = page
	v.Size = size
	v.Identifiers = identifiers
	v.Labels = labels

	return v
}

// NewGetTargetPayload builds a targets service Get target endpoint payload.
func NewGetTargetPayload(id string) *targets.GetTargetPayload {
	v := &targets.GetTargetPayload{}
	v.ID = &id

	return v
}

// NewCreateTargetPayload builds a targets service Create target endpoint
// payload.
func NewCreateTargetPayload(body *CreateTargetRequestBody) *targets.CreateTargetPayload {
	v := &targets.CreateTargetPayload{
		Identifier: body.Identifier,
	}
	if body.Teams != nil {
		v.Teams = make([]string, len(body.Teams))
		for i, val := range body.Teams {
			v.Teams[i] = val
		}
	}
	if body.Tags != nil {
		v.Tags = make([]string, len(body.Tags))
		for i, val := range body.Tags {
			v.Tags[i] = val
		}
	}

	return v
}

// NewListFindingsByTargetPayload builds a targets service List findings by
// target endpoint payload.
func NewListFindingsByTargetPayload(id string, status *string, sortBy *string, page *int, size *int, labels *string) *targets.ListFindingsByTargetPayload {
	v := &targets.ListFindingsByTargetPayload{}
	v.ID = &id
	v.Status = status
	v.SortBy = sortBy
	v.Page = page
	v.Size = size
	v.Labels = labels

	return v
}

// NewGetFindingByTargetIssueAndAffectedResourcePayload builds a targets
// service Get finding by target, issue and affected resource endpoint payload.
func NewGetFindingByTargetIssueAndAffectedResourcePayload(targetID string, issueID string, resource string) *targets.GetFindingByTargetIssueAndAffectedResourcePayload {
	v := &targets.GetFindingByTargetIssueAndAffectedResourcePayload{}
	v.TargetID = &targetID
	v.IssueID = &issueID
	v.Resource = &resource

	return v
}

// NewGetTargetMTTRPayload builds a targets service Get target MTTR endpoint
// payload.
func NewGetTargetMTTRPayload(id string) *targets.GetTargetMTTRPayload {
	v := &targets.GetTargetMTTRPayload{}
	v.ID = &id

	return v
}

// NewDeleteTargetTeamPayload builds a targets service Delete target team
// endpoint payload.
func NewDeleteTargetTeamPayload(targetID string, team string, auth string) *targets.DeleteTargetTeamPayload {
	v := &targets.DeleteTargetTeamPayload{}
	v.TargetID = &targetID
	v.Team = &team
	v.Auth = auth

	return v
}

// NewDeleteTeamPayload builds a targets service Delete team endpoint payload.
func NewDeleteTeamPayload(team string, auth string) *targets.DeleteTeamPayload {
	v := &targets.DeleteTeamPayload{}
	v.Team = &team
	v.Auth = auth

	return v
}

// NewDeleteTargetTagPayload builds a targets service Delete target tag
// endpoint payload.
func NewDeleteTargetTagPayload(targetID string, tag string, auth string) *targets.DeleteTargetTagPayload {
	v := &targets.DeleteTargetTagPayload{}
	v.TargetID = &targetID
	v.Tag = &tag
	v.Auth = auth

	return v
}

// NewDeleteTagPayload builds a targets service Delete tag endpoint payload.
func NewDeleteTagPayload(tag string, auth string) *targets.DeleteTagPayload {
	v := &targets.DeleteTagPayload{}
	v.Tag = &tag
	v.Auth = auth

	return v
}
