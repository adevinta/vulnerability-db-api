// Code generated by goa v3.0.6, DO NOT EDIT.
//
// targets HTTP server encoders and decoders
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package server

import (
	"context"
	"net/http"
	"strconv"

	targetsviews "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/targets/views"
	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// EncodeListTargetsResponse returns an encoder for responses returned by the
// targets List targets endpoint.
func EncodeListTargetsResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(targetsviews.TargetCollection)
		enc := encoder(ctx, w)
		body := NewTargetResponseCollection(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListTargetsRequest returns a decoder for requests sent to the targets
// List targets endpoint.
func DecodeListTargetsRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			tag        *string
			identifier *string
			page       *int
			size       *int
			err        error
		)
		tagRaw := r.URL.Query().Get("tag")
		if tagRaw != "" {
			tag = &tagRaw
		}
		identifierRaw := r.URL.Query().Get("identifier")
		if identifierRaw != "" {
			identifier = &identifierRaw
		}
		{
			pageRaw := r.URL.Query().Get("page")
			if pageRaw != "" {
				v, err2 := strconv.ParseInt(pageRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("page", pageRaw, "integer"))
				}
				pv := int(v)
				page = &pv
			}
		}
		{
			sizeRaw := r.URL.Query().Get("size")
			if sizeRaw != "" {
				v, err2 := strconv.ParseInt(sizeRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("size", sizeRaw, "integer"))
				}
				pv := int(v)
				size = &pv
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewListTargetsPayload(tag, identifier, page, size)

		return payload, nil
	}
}

// EncodeTargetsSummaryResponse returns an encoder for responses returned by
// the targets Targets summary endpoint.
func EncodeTargetsSummaryResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(targetsviews.TargetSummaryCollection)
		enc := encoder(ctx, w)
		body := NewTargetSummaryResponseCollection(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeTargetsSummaryRequest returns a decoder for requests sent to the
// targets Targets summary endpoint.
func DecodeTargetsSummaryRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			tag    *string
			status *string
			sortBy *string
			page   *int
			size   *int
			err    error
		)
		tagRaw := r.URL.Query().Get("tag")
		if tagRaw != "" {
			tag = &tagRaw
		}
		statusRaw := r.URL.Query().Get("status")
		if statusRaw != "" {
			status = &statusRaw
		}
		sortByRaw := r.URL.Query().Get("sortBy")
		if sortByRaw != "" {
			sortBy = &sortByRaw
		}
		{
			pageRaw := r.URL.Query().Get("page")
			if pageRaw != "" {
				v, err2 := strconv.ParseInt(pageRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("page", pageRaw, "integer"))
				}
				pv := int(v)
				page = &pv
			}
		}
		{
			sizeRaw := r.URL.Query().Get("size")
			if sizeRaw != "" {
				v, err2 := strconv.ParseInt(sizeRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("size", sizeRaw, "integer"))
				}
				pv := int(v)
				size = &pv
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewTargetsSummaryPayload(tag, status, sortBy, page, size)

		return payload, nil
	}
}

// EncodeGetTargetResponse returns an encoder for responses returned by the
// targets Get target endpoint.
func EncodeGetTargetResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*targetsviews.Target)
		enc := encoder(ctx, w)
		body := NewGetTargetResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetTargetRequest returns a decoder for requests sent to the targets
// Get target endpoint.
func DecodeGetTargetRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id string

			params = mux.Vars(r)
		)
		id = params["id"]
		payload := NewGetTargetPayload(id)

		return payload, nil
	}
}

// EncodeListFindingsByTargetResponse returns an encoder for responses returned
// by the targets List findings by target endpoint.
func EncodeListFindingsByTargetResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(targetsviews.FindingCollection)
		enc := encoder(ctx, w)
		body := NewFindingResponseCollection(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListFindingsByTargetRequest returns a decoder for requests sent to the
// targets List findings by target endpoint.
func DecodeListFindingsByTargetRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id     string
			status *string
			sortBy *string
			page   *int
			size   *int
			err    error

			params = mux.Vars(r)
		)
		id = params["id"]
		statusRaw := r.URL.Query().Get("status")
		if statusRaw != "" {
			status = &statusRaw
		}
		sortByRaw := r.URL.Query().Get("sortBy")
		if sortByRaw != "" {
			sortBy = &sortByRaw
		}
		{
			pageRaw := r.URL.Query().Get("page")
			if pageRaw != "" {
				v, err2 := strconv.ParseInt(pageRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("page", pageRaw, "integer"))
				}
				pv := int(v)
				page = &pv
			}
		}
		{
			sizeRaw := r.URL.Query().Get("size")
			if sizeRaw != "" {
				v, err2 := strconv.ParseInt(sizeRaw, 10, strconv.IntSize)
				if err2 != nil {
					err = goa.MergeErrors(err, goa.InvalidFieldTypeError("size", sizeRaw, "integer"))
				}
				pv := int(v)
				size = &pv
			}
		}
		if err != nil {
			return nil, err
		}
		payload := NewListFindingsByTargetPayload(id, status, sortBy, page, size)

		return payload, nil
	}
}

// EncodeListFindingsByTargetAndIssueResponse returns an encoder for responses
// returned by the targets List findings by target and issue endpoint.
func EncodeListFindingsByTargetAndIssueResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(*targetsviews.Finding)
		enc := encoder(ctx, w)
		body := NewListFindingsByTargetAndIssueResponseBody(res.Projected)
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeListFindingsByTargetAndIssueRequest returns a decoder for requests
// sent to the targets List findings by target and issue endpoint.
func DecodeListFindingsByTargetAndIssueRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			targetID string
			issueID  string

			params = mux.Vars(r)
		)
		targetID = params["target_id"]
		issueID = params["issue_id"]
		payload := NewListFindingsByTargetAndIssuePayload(targetID, issueID)

		return payload, nil
	}
}

// EncodeGetTargetMTTRResponse returns an encoder for responses returned by the
// targets Get target MTTR endpoint.
func EncodeGetTargetMTTRResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		res := v.(float32)
		enc := encoder(ctx, w)
		body := res
		w.WriteHeader(http.StatusOK)
		return enc.Encode(body)
	}
}

// DecodeGetTargetMTTRRequest returns a decoder for requests sent to the
// targets Get target MTTR endpoint.
func DecodeGetTargetMTTRRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			id string

			params = mux.Vars(r)
		)
		id = params["id"]
		payload := NewGetTargetMTTRPayload(id)

		return payload, nil
	}
}

// EncodeDeleteTargetTagResponse returns an encoder for responses returned by
// the targets Delete target tag endpoint.
func EncodeDeleteTargetTagResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeDeleteTargetTagRequest returns a decoder for requests sent to the
// targets Delete target tag endpoint.
func DecodeDeleteTargetTagRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			targetID string
			tag      string
			auth     string
			err      error

			params = mux.Vars(r)
		)
		targetID = params["target_id"]
		tag = params["tag"]
		auth = r.Header.Get("Authorization")
		if auth == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("auth", auth, "^TAG tag=[^ ]+$"))
		if err != nil {
			return nil, err
		}
		payload := NewDeleteTargetTagPayload(targetID, tag, auth)

		return payload, nil
	}
}

// EncodeDeleteTagResponse returns an encoder for responses returned by the
// targets Delete tag endpoint.
func EncodeDeleteTagResponse(encoder func(context.Context, http.ResponseWriter) goahttp.Encoder) func(context.Context, http.ResponseWriter, interface{}) error {
	return func(ctx context.Context, w http.ResponseWriter, v interface{}) error {
		w.WriteHeader(http.StatusNoContent)
		return nil
	}
}

// DecodeDeleteTagRequest returns a decoder for requests sent to the targets
// Delete tag endpoint.
func DecodeDeleteTagRequest(mux goahttp.Muxer, decoder func(*http.Request) goahttp.Decoder) func(*http.Request) (interface{}, error) {
	return func(r *http.Request) (interface{}, error) {
		var (
			tag  string
			auth string
			err  error

			params = mux.Vars(r)
		)
		tag = params["tag"]
		auth = r.Header.Get("Authorization")
		if auth == "" {
			err = goa.MergeErrors(err, goa.MissingFieldError("Authorization", "header"))
		}
		err = goa.MergeErrors(err, goa.ValidatePattern("auth", auth, "^TAG tag=[^ ]+$"))
		if err != nil {
			return nil, err
		}
		payload := NewDeleteTagPayload(tag, auth)

		return payload, nil
	}
}

// marshalTargetsviewsIssueViewToIssueResponse builds a value of type
// *IssueResponse from a value of type *targetsviews.IssueView.
func marshalTargetsviewsIssueViewToIssueResponse(v *targetsviews.IssueView) *IssueResponse {
	if v == nil {
		return nil
	}
	res := &IssueResponse{
		ID:          v.ID,
		Summary:     v.Summary,
		CweID:       v.CweID,
		Description: v.Description,
	}
	if v.Recommendations != nil {
		res.Recommendations = make([]string, len(v.Recommendations))
		for i, val := range v.Recommendations {
			res.Recommendations[i] = val
		}
	}
	if v.ReferenceLinks != nil {
		res.ReferenceLinks = make([]string, len(v.ReferenceLinks))
		for i, val := range v.ReferenceLinks {
			res.ReferenceLinks[i] = val
		}
	}

	return res
}

// marshalTargetsviewsTargetViewToTargetResponse builds a value of type
// *TargetResponse from a value of type *targetsviews.TargetView.
func marshalTargetsviewsTargetViewToTargetResponse(v *targetsviews.TargetView) *TargetResponse {
	if v == nil {
		return nil
	}
	res := &TargetResponse{
		ID:         v.ID,
		Identifier: v.Identifier,
	}
	if v.Tags != nil {
		res.Tags = make([]string, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = val
		}
	}

	return res
}

// marshalTargetsviewsSourcewithnotargetViewToSourcewithnotargetResponse builds
// a value of type *SourcewithnotargetResponse from a value of type
// *targetsviews.SourcewithnotargetView.
func marshalTargetsviewsSourcewithnotargetViewToSourcewithnotargetResponse(v *targetsviews.SourcewithnotargetView) *SourcewithnotargetResponse {
	if v == nil {
		return nil
	}
	res := &SourcewithnotargetResponse{
		ID:        v.ID,
		Name:      v.Name,
		Component: v.Component,
		Instance:  v.Instance,
		Options:   v.Options,
		Time:      v.Time,
	}

	return res
}

// marshalTargetsviewsResourceGroupViewToResourceGroupResponse builds a value
// of type *ResourceGroupResponse from a value of type
// *targetsviews.ResourceGroupView.
func marshalTargetsviewsResourceGroupViewToResourceGroupResponse(v *targetsviews.ResourceGroupView) *ResourceGroupResponse {
	if v == nil {
		return nil
	}
	res := &ResourceGroupResponse{
		Name: v.Name,
	}
	if v.Attributes != nil {
		res.Attributes = make([]string, len(v.Attributes))
		for i, val := range v.Attributes {
			res.Attributes[i] = val
		}
	}
	if v.Resources != nil {
		res.Resources = make([]map[string]string, len(v.Resources))
		for i, val := range v.Resources {
			res.Resources[i] = make(map[string]string, len(val))
			for key, val := range val {
				tk := key
				tv := val
				res.Resources[i][tk] = tv
			}
		}
	}

	return res
}

// marshalTargetsviewsIssueViewToIssueResponseBody builds a value of type
// *IssueResponseBody from a value of type *targetsviews.IssueView.
func marshalTargetsviewsIssueViewToIssueResponseBody(v *targetsviews.IssueView) *IssueResponseBody {
	if v == nil {
		return nil
	}
	res := &IssueResponseBody{
		ID:          v.ID,
		Summary:     v.Summary,
		CweID:       v.CweID,
		Description: v.Description,
	}
	if v.Recommendations != nil {
		res.Recommendations = make([]string, len(v.Recommendations))
		for i, val := range v.Recommendations {
			res.Recommendations[i] = val
		}
	}
	if v.ReferenceLinks != nil {
		res.ReferenceLinks = make([]string, len(v.ReferenceLinks))
		for i, val := range v.ReferenceLinks {
			res.ReferenceLinks[i] = val
		}
	}

	return res
}

// marshalTargetsviewsTargetViewToTargetResponseBody builds a value of type
// *TargetResponseBody from a value of type *targetsviews.TargetView.
func marshalTargetsviewsTargetViewToTargetResponseBody(v *targetsviews.TargetView) *TargetResponseBody {
	if v == nil {
		return nil
	}
	res := &TargetResponseBody{
		ID:         v.ID,
		Identifier: v.Identifier,
	}
	if v.Tags != nil {
		res.Tags = make([]string, len(v.Tags))
		for i, val := range v.Tags {
			res.Tags[i] = val
		}
	}

	return res
}

// marshalTargetsviewsSourcewithnotargetViewToSourcewithnotargetResponseBody
// builds a value of type *SourcewithnotargetResponseBody from a value of type
// *targetsviews.SourcewithnotargetView.
func marshalTargetsviewsSourcewithnotargetViewToSourcewithnotargetResponseBody(v *targetsviews.SourcewithnotargetView) *SourcewithnotargetResponseBody {
	if v == nil {
		return nil
	}
	res := &SourcewithnotargetResponseBody{
		ID:        v.ID,
		Name:      v.Name,
		Component: v.Component,
		Instance:  v.Instance,
		Options:   v.Options,
		Time:      v.Time,
	}

	return res
}

// marshalTargetsviewsResourceGroupViewToResourceGroupResponseBody builds a
// value of type *ResourceGroupResponseBody from a value of type
// *targetsviews.ResourceGroupView.
func marshalTargetsviewsResourceGroupViewToResourceGroupResponseBody(v *targetsviews.ResourceGroupView) *ResourceGroupResponseBody {
	if v == nil {
		return nil
	}
	res := &ResourceGroupResponseBody{
		Name: v.Name,
	}
	if v.Attributes != nil {
		res.Attributes = make([]string, len(v.Attributes))
		for i, val := range v.Attributes {
			res.Attributes[i] = val
		}
	}
	if v.Resources != nil {
		res.Resources = make([]map[string]string, len(v.Resources))
		for i, val := range v.Resources {
			res.Resources[i] = make(map[string]string, len(val))
			for key, val := range val {
				tk := key
				tv := val
				res.Resources[i][tk] = tv
			}
		}
	}

	return res
}
