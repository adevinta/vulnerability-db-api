// Code generated by goa v3.0.6, DO NOT EDIT.
//
// targets HTTP client types
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package client

import (
	targetsviews "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/targets/views"
)

// ListTargetsResponseBody is the type of the "targets" service "List targets"
// endpoint HTTP response body.
type ListTargetsResponseBody []*TargetResponse

// TargetsSummaryResponseBody is the type of the "targets" service "Targets
// summary" endpoint HTTP response body.
type TargetsSummaryResponseBody []*TargetSummaryResponse

// GetTargetResponseBody is the type of the "targets" service "Get target"
// endpoint HTTP response body.
type GetTargetResponseBody struct {
	// Target ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Target identifier
	Identifier *string `form:"identifier,omitempty" json:"identifier,omitempty" xml:"identifier,omitempty"`
	// List of tags associated with target
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
}

// ListFindingsByTargetResponseBody is the type of the "targets" service "List
// findings by target" endpoint HTTP response body.
type ListFindingsByTargetResponseBody []*FindingResponse

// ListFindingsByTargetAndIssueResponseBody is the type of the "targets"
// service "List findings by target and issue" endpoint HTTP response body.
type ListFindingsByTargetAndIssueResponseBody struct {
	// Finding ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Issue
	Issue *IssueResponseBody `form:"issue,omitempty" json:"issue,omitempty" xml:"issue,omitempty"`
	// Target
	Target *TargetResponseBody `form:"target,omitempty" json:"target,omitempty" xml:"target,omitempty"`
	// Source
	Source *SourcewithnotargetResponseBody `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
	// Finding details
	Details *string `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Finding impact details
	ImpactDetails *string `form:"impact_details,omitempty" json:"impact_details,omitempty" xml:"impact_details,omitempty"`
	// Finding status. Can be 'OPEN' or 'FIXED'.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Finding severity score
	Score *float32 `form:"score,omitempty" json:"score,omitempty" xml:"score,omitempty"`
	// Other resources associated with the finding
	Resources []*ResourceGroupResponseBody `form:"resources,omitempty" json:"resources,omitempty" xml:"resources,omitempty"`
}

// TargetResponse is used to define fields on response body types.
type TargetResponse struct {
	// Target ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Target identifier
	Identifier *string `form:"identifier,omitempty" json:"identifier,omitempty" xml:"identifier,omitempty"`
	// List of tags associated with target
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
}

// TargetSummaryResponse is used to define fields on response body types.
type TargetSummaryResponse struct {
	// Target ID
	TargetID *string `form:"target_id,omitempty" json:"target_id,omitempty" xml:"target_id,omitempty"`
	// Target identifier
	Identifier *string `form:"identifier,omitempty" json:"identifier,omitempty" xml:"identifier,omitempty"`
	// Number of findings for target
	FindingsCount *int `form:"findings_count,omitempty" json:"findings_count,omitempty" xml:"findings_count,omitempty"`
	// Max score for target
	MaxScore *float32 `form:"max_score,omitempty" json:"max_score,omitempty" xml:"max_score,omitempty"`
}

// FindingResponse is used to define fields on response body types.
type FindingResponse struct {
	// Finding ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Issue
	Issue *IssueResponse `form:"issue,omitempty" json:"issue,omitempty" xml:"issue,omitempty"`
	// Target
	Target *TargetResponse `form:"target,omitempty" json:"target,omitempty" xml:"target,omitempty"`
	// Source
	Source *SourcewithnotargetResponse `form:"source,omitempty" json:"source,omitempty" xml:"source,omitempty"`
	// Finding details
	Details *string `form:"details,omitempty" json:"details,omitempty" xml:"details,omitempty"`
	// Finding impact details
	ImpactDetails *string `form:"impact_details,omitempty" json:"impact_details,omitempty" xml:"impact_details,omitempty"`
	// Finding status. Can be 'OPEN' or 'FIXED'.
	Status *string `form:"status,omitempty" json:"status,omitempty" xml:"status,omitempty"`
	// Finding severity score
	Score *float32 `form:"score,omitempty" json:"score,omitempty" xml:"score,omitempty"`
	// Other resources associated with the finding
	Resources []*ResourceGroupResponse `form:"resources,omitempty" json:"resources,omitempty" xml:"resources,omitempty"`
}

// IssueResponse is used to define fields on response body types.
type IssueResponse struct {
	// Issue ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Issue summary
	Summary *string `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	// Common Weakness Enumeration ID
	CweID *int `form:"cwe_id,omitempty" json:"cwe_id,omitempty" xml:"cwe_id,omitempty"`
	// Issue description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Recommendations to fix the issue
	Recommendations []string `form:"recommendations,omitempty" json:"recommendations,omitempty" xml:"recommendations,omitempty"`
	// Documentation reference for the issue
	ReferenceLinks []string `form:"reference_links,omitempty" json:"reference_links,omitempty" xml:"reference_links,omitempty"`
}

// SourcewithnotargetResponse is used to define fields on response body types.
type SourcewithnotargetResponse struct {
	// Source ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Source name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Source component
	Component *string `form:"component,omitempty" json:"component,omitempty" xml:"component,omitempty"`
	// Source instance
	Instance *string `form:"instance,omitempty" json:"instance,omitempty" xml:"instance,omitempty"`
	// Source options
	Options *string `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// Time on which the source scanned the target
	Time *string `form:"time,omitempty" json:"time,omitempty" xml:"time,omitempty"`
}

// ResourceGroupResponse is used to define fields on response body types.
type ResourceGroupResponse struct {
	// Name of the resource group
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Column names of the resource group in the order that should be rendered
	Attributes []string `form:"attributes,omitempty" json:"attributes,omitempty" xml:"attributes,omitempty"`
	// List containing the resource rows as hashmap
	Resources []map[string]string `form:"resources,omitempty" json:"resources,omitempty" xml:"resources,omitempty"`
}

// IssueResponseBody is used to define fields on response body types.
type IssueResponseBody struct {
	// Issue ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Issue summary
	Summary *string `form:"summary,omitempty" json:"summary,omitempty" xml:"summary,omitempty"`
	// Common Weakness Enumeration ID
	CweID *int `form:"cwe_id,omitempty" json:"cwe_id,omitempty" xml:"cwe_id,omitempty"`
	// Issue description
	Description *string `form:"description,omitempty" json:"description,omitempty" xml:"description,omitempty"`
	// Recommendations to fix the issue
	Recommendations []string `form:"recommendations,omitempty" json:"recommendations,omitempty" xml:"recommendations,omitempty"`
	// Documentation reference for the issue
	ReferenceLinks []string `form:"reference_links,omitempty" json:"reference_links,omitempty" xml:"reference_links,omitempty"`
}

// TargetResponseBody is used to define fields on response body types.
type TargetResponseBody struct {
	// Target ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Target identifier
	Identifier *string `form:"identifier,omitempty" json:"identifier,omitempty" xml:"identifier,omitempty"`
	// List of tags associated with target
	Tags []string `form:"tags,omitempty" json:"tags,omitempty" xml:"tags,omitempty"`
}

// SourcewithnotargetResponseBody is used to define fields on response body
// types.
type SourcewithnotargetResponseBody struct {
	// Source ID
	ID *string `form:"id,omitempty" json:"id,omitempty" xml:"id,omitempty"`
	// Source name
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Source component
	Component *string `form:"component,omitempty" json:"component,omitempty" xml:"component,omitempty"`
	// Source instance
	Instance *string `form:"instance,omitempty" json:"instance,omitempty" xml:"instance,omitempty"`
	// Source options
	Options *string `form:"options,omitempty" json:"options,omitempty" xml:"options,omitempty"`
	// Time on which the source scanned the target
	Time *string `form:"time,omitempty" json:"time,omitempty" xml:"time,omitempty"`
}

// ResourceGroupResponseBody is used to define fields on response body types.
type ResourceGroupResponseBody struct {
	// Name of the resource group
	Name *string `form:"name,omitempty" json:"name,omitempty" xml:"name,omitempty"`
	// Column names of the resource group in the order that should be rendered
	Attributes []string `form:"attributes,omitempty" json:"attributes,omitempty" xml:"attributes,omitempty"`
	// List containing the resource rows as hashmap
	Resources []map[string]string `form:"resources,omitempty" json:"resources,omitempty" xml:"resources,omitempty"`
}

// NewListTargetsTargetCollectionOK builds a "targets" service "List targets"
// endpoint result from a HTTP "OK" response.
func NewListTargetsTargetCollectionOK(body ListTargetsResponseBody) targetsviews.TargetCollectionView {
	v := make([]*targetsviews.TargetView, len(body))
	for i, val := range body {
		v[i] = &targetsviews.TargetView{
			ID:         val.ID,
			Identifier: val.Identifier,
		}
		if val.Tags != nil {
			v[i].Tags = make([]string, len(val.Tags))
			for j, val := range val.Tags {
				v[i].Tags[j] = val
			}
		}
	}
	return v
}

// NewTargetsSummaryTargetSummaryCollectionOK builds a "targets" service
// "Targets summary" endpoint result from a HTTP "OK" response.
func NewTargetsSummaryTargetSummaryCollectionOK(body TargetsSummaryResponseBody) targetsviews.TargetSummaryCollectionView {
	v := make([]*targetsviews.TargetSummaryView, len(body))
	for i, val := range body {
		v[i] = &targetsviews.TargetSummaryView{
			TargetID:      val.TargetID,
			Identifier:    val.Identifier,
			FindingsCount: val.FindingsCount,
			MaxScore:      val.MaxScore,
		}
	}
	return v
}

// NewGetTargetTargetOK builds a "targets" service "Get target" endpoint result
// from a HTTP "OK" response.
func NewGetTargetTargetOK(body *GetTargetResponseBody) *targetsviews.TargetView {
	v := &targetsviews.TargetView{
		ID:         body.ID,
		Identifier: body.Identifier,
	}
	if body.Tags != nil {
		v.Tags = make([]string, len(body.Tags))
		for i, val := range body.Tags {
			v.Tags[i] = val
		}
	}
	return v
}

// NewListFindingsByTargetFindingCollectionOK builds a "targets" service "List
// findings by target" endpoint result from a HTTP "OK" response.
func NewListFindingsByTargetFindingCollectionOK(body ListFindingsByTargetResponseBody) targetsviews.FindingCollectionView {
	v := make([]*targetsviews.FindingView, len(body))
	for i, val := range body {
		v[i] = &targetsviews.FindingView{
			ID:            val.ID,
			Details:       val.Details,
			ImpactDetails: val.ImpactDetails,
			Status:        val.Status,
			Score:         val.Score,
		}
		if val.Issue != nil {
			v[i].Issue = unmarshalIssueResponseToTargetsviewsIssueView(val.Issue)
		}
		if val.Target != nil {
			v[i].Target = unmarshalTargetResponseToTargetsviewsTargetView(val.Target)
		}
		if val.Source != nil {
			v[i].Source = unmarshalSourcewithnotargetResponseToTargetsviewsSourcewithnotargetView(val.Source)
		}
		if val.Resources != nil {
			v[i].Resources = make([]*targetsviews.ResourceGroupView, len(val.Resources))
			for j, val := range val.Resources {
				v[i].Resources[j] = unmarshalResourceGroupResponseToTargetsviewsResourceGroupView(val)
			}
		}
	}
	return v
}

// NewListFindingsByTargetAndIssueFindingOK builds a "targets" service "List
// findings by target and issue" endpoint result from a HTTP "OK" response.
func NewListFindingsByTargetAndIssueFindingOK(body *ListFindingsByTargetAndIssueResponseBody) *targetsviews.FindingView {
	v := &targetsviews.FindingView{
		ID:            body.ID,
		Details:       body.Details,
		ImpactDetails: body.ImpactDetails,
		Status:        body.Status,
		Score:         body.Score,
	}
	if body.Issue != nil {
		v.Issue = unmarshalIssueResponseBodyToTargetsviewsIssueView(body.Issue)
	}
	if body.Target != nil {
		v.Target = unmarshalTargetResponseBodyToTargetsviewsTargetView(body.Target)
	}
	if body.Source != nil {
		v.Source = unmarshalSourcewithnotargetResponseBodyToTargetsviewsSourcewithnotargetView(body.Source)
	}
	if body.Resources != nil {
		v.Resources = make([]*targetsviews.ResourceGroupView, len(body.Resources))
		for i, val := range body.Resources {
			v.Resources[i] = unmarshalResourceGroupResponseBodyToTargetsviewsResourceGroupView(val)
		}
	}
	return v
}
