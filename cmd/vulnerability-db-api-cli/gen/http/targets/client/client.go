// Code generated by goa v3.5.2, DO NOT EDIT.
//
// targets client HTTP transport
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package client

import (
	"context"
	"net/http"

	goahttp "goa.design/goa/v3/http"
	goa "goa.design/goa/v3/pkg"
)

// Client lists the targets service endpoint HTTP clients.
type Client struct {
	// ListTargets Doer is the HTTP client used to make requests to the List
	// targets endpoint.
	ListTargetsDoer goahttp.Doer

	// TargetsSummary Doer is the HTTP client used to make requests to the Targets
	// summary endpoint.
	TargetsSummaryDoer goahttp.Doer

	// GetTarget Doer is the HTTP client used to make requests to the Get target
	// endpoint.
	GetTargetDoer goahttp.Doer

	// CreateTarget Doer is the HTTP client used to make requests to the Create
	// target endpoint.
	CreateTargetDoer goahttp.Doer

	// ListFindingsByTarget Doer is the HTTP client used to make requests to the
	// List findings by target endpoint.
	ListFindingsByTargetDoer goahttp.Doer

	// GetFindingByTargetIssueAndAffectedResource Doer is the HTTP client used to
	// make requests to the Get finding by target, issue and affected resource
	// endpoint.
	GetFindingByTargetIssueAndAffectedResourceDoer goahttp.Doer

	// GetTargetMTTR Doer is the HTTP client used to make requests to the Get
	// target MTTR endpoint.
	GetTargetMTTRDoer goahttp.Doer

	// DeleteTargetTeam Doer is the HTTP client used to make requests to the Delete
	// target team endpoint.
	DeleteTargetTeamDoer goahttp.Doer

	// DeleteTeam Doer is the HTTP client used to make requests to the Delete team
	// endpoint.
	DeleteTeamDoer goahttp.Doer

	// RestoreResponseBody controls whether the response bodies are reset after
	// decoding so they can be read again.
	RestoreResponseBody bool

	scheme  string
	host    string
	encoder func(*http.Request) goahttp.Encoder
	decoder func(*http.Response) goahttp.Decoder
}

// NewClient instantiates HTTP clients for all the targets service servers.
func NewClient(
	scheme string,
	host string,
	doer goahttp.Doer,
	enc func(*http.Request) goahttp.Encoder,
	dec func(*http.Response) goahttp.Decoder,
	restoreBody bool,
) *Client {
	return &Client{
		ListTargetsDoer:          doer,
		TargetsSummaryDoer:       doer,
		GetTargetDoer:            doer,
		CreateTargetDoer:         doer,
		ListFindingsByTargetDoer: doer,
		GetFindingByTargetIssueAndAffectedResourceDoer: doer,
		GetTargetMTTRDoer:    doer,
		DeleteTargetTeamDoer: doer,
		DeleteTeamDoer:       doer,
		RestoreResponseBody:  restoreBody,
		scheme:               scheme,
		host:                 host,
		decoder:              dec,
		encoder:              enc,
	}
}

// ListTargets returns an endpoint that makes HTTP requests to the targets
// service List targets server.
func (c *Client) ListTargets() goa.Endpoint {
	var (
		encodeRequest  = EncodeListTargetsRequest(c.encoder)
		decodeResponse = DecodeListTargetsResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListTargetsRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListTargetsDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("targets", "List targets", err)
		}
		return decodeResponse(resp)
	}
}

// TargetsSummary returns an endpoint that makes HTTP requests to the targets
// service Targets summary server.
func (c *Client) TargetsSummary() goa.Endpoint {
	var (
		encodeRequest  = EncodeTargetsSummaryRequest(c.encoder)
		decodeResponse = DecodeTargetsSummaryResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildTargetsSummaryRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.TargetsSummaryDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("targets", "Targets summary", err)
		}
		return decodeResponse(resp)
	}
}

// GetTarget returns an endpoint that makes HTTP requests to the targets
// service Get target server.
func (c *Client) GetTarget() goa.Endpoint {
	var (
		decodeResponse = DecodeGetTargetResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetTargetRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetTargetDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("targets", "Get target", err)
		}
		return decodeResponse(resp)
	}
}

// CreateTarget returns an endpoint that makes HTTP requests to the targets
// service Create target server.
func (c *Client) CreateTarget() goa.Endpoint {
	var (
		encodeRequest  = EncodeCreateTargetRequest(c.encoder)
		decodeResponse = DecodeCreateTargetResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildCreateTargetRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.CreateTargetDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("targets", "Create target", err)
		}
		return decodeResponse(resp)
	}
}

// ListFindingsByTarget returns an endpoint that makes HTTP requests to the
// targets service List findings by target server.
func (c *Client) ListFindingsByTarget() goa.Endpoint {
	var (
		encodeRequest  = EncodeListFindingsByTargetRequest(c.encoder)
		decodeResponse = DecodeListFindingsByTargetResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildListFindingsByTargetRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.ListFindingsByTargetDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("targets", "List findings by target", err)
		}
		return decodeResponse(resp)
	}
}

// GetFindingByTargetIssueAndAffectedResource returns an endpoint that makes
// HTTP requests to the targets service Get finding by target, issue and
// affected resource server.
func (c *Client) GetFindingByTargetIssueAndAffectedResource() goa.Endpoint {
	var (
		decodeResponse = DecodeGetFindingByTargetIssueAndAffectedResourceResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetFindingByTargetIssueAndAffectedResourceRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetFindingByTargetIssueAndAffectedResourceDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("targets", "Get finding by target, issue and affected resource", err)
		}
		return decodeResponse(resp)
	}
}

// GetTargetMTTR returns an endpoint that makes HTTP requests to the targets
// service Get target MTTR server.
func (c *Client) GetTargetMTTR() goa.Endpoint {
	var (
		decodeResponse = DecodeGetTargetMTTRResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildGetTargetMTTRRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.GetTargetMTTRDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("targets", "Get target MTTR", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteTargetTeam returns an endpoint that makes HTTP requests to the targets
// service Delete target team server.
func (c *Client) DeleteTargetTeam() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteTargetTeamRequest(c.encoder)
		decodeResponse = DecodeDeleteTargetTeamResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDeleteTargetTeamRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteTargetTeamDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("targets", "Delete target team", err)
		}
		return decodeResponse(resp)
	}
}

// DeleteTeam returns an endpoint that makes HTTP requests to the targets
// service Delete team server.
func (c *Client) DeleteTeam() goa.Endpoint {
	var (
		encodeRequest  = EncodeDeleteTeamRequest(c.encoder)
		decodeResponse = DecodeDeleteTeamResponse(c.decoder, c.RestoreResponseBody)
	)
	return func(ctx context.Context, v interface{}) (interface{}, error) {
		req, err := c.BuildDeleteTeamRequest(ctx, v)
		if err != nil {
			return nil, err
		}
		err = encodeRequest(req, v)
		if err != nil {
			return nil, err
		}
		resp, err := c.DeleteTeamDoer.Do(req)
		if err != nil {
			return nil, goahttp.ErrRequestError("targets", "Delete team", err)
		}
		return decodeResponse(resp)
	}
}
