// Code generated by goa v3.0.6, DO NOT EDIT.
//
// issues endpoints
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package issues

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "issues" service endpoints.
type Endpoints struct {
	ListIssues                                 goa.Endpoint
	IssuesSummary                              goa.Endpoint
	GetIssue                                   goa.Endpoint
	ListFindingsByIssue                        goa.Endpoint
	GetFindingByIssueTargetAndAffectedResource goa.Endpoint
	GetIssueMTTR                               goa.Endpoint
}

// NewEndpoints wraps the methods of the "issues" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		ListIssues:          NewListIssuesEndpoint(s),
		IssuesSummary:       NewIssuesSummaryEndpoint(s),
		GetIssue:            NewGetIssueEndpoint(s),
		ListFindingsByIssue: NewListFindingsByIssueEndpoint(s),
		GetFindingByIssueTargetAndAffectedResource: NewGetFindingByIssueTargetAndAffectedResourceEndpoint(s),
		GetIssueMTTR: NewGetIssueMTTREndpoint(s),
	}
}

// Use applies the given middleware to all the "issues" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.ListIssues = m(e.ListIssues)
	e.IssuesSummary = m(e.IssuesSummary)
	e.GetIssue = m(e.GetIssue)
	e.ListFindingsByIssue = m(e.ListFindingsByIssue)
	e.GetFindingByIssueTargetAndAffectedResource = m(e.GetFindingByIssueTargetAndAffectedResource)
	e.GetIssueMTTR = m(e.GetIssueMTTR)
}

// NewListIssuesEndpoint returns an endpoint function that calls the method
// "List issues" of service "issues".
func NewListIssuesEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ListIssuesPayload)
		res, err := s.ListIssues(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedIssueCollection(res, "default")
		return vres, nil
	}
}

// NewIssuesSummaryEndpoint returns an endpoint function that calls the method
// "Issues summary" of service "issues".
func NewIssuesSummaryEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*IssuesSummaryPayload)
		res, err := s.IssuesSummary(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedIssueSummaryCollection(res, "default")
		return vres, nil
	}
}

// NewGetIssueEndpoint returns an endpoint function that calls the method "Get
// issue" of service "issues".
func NewGetIssueEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetIssuePayload)
		res, err := s.GetIssue(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedIssue(res, "default")
		return vres, nil
	}
}

// NewListFindingsByIssueEndpoint returns an endpoint function that calls the
// method "List findings by issue" of service "issues".
func NewListFindingsByIssueEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ListFindingsByIssuePayload)
		res, err := s.ListFindingsByIssue(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedFindingCollection(res, "default")
		return vres, nil
	}
}

// NewGetFindingByIssueTargetAndAffectedResourceEndpoint returns an endpoint
// function that calls the method "Get finding by issue, target and affected
// resource" of service "issues".
func NewGetFindingByIssueTargetAndAffectedResourceEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetFindingByIssueTargetAndAffectedResourcePayload)
		res, err := s.GetFindingByIssueTargetAndAffectedResource(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedFinding(res, "default")
		return vres, nil
	}
}

// NewGetIssueMTTREndpoint returns an endpoint function that calls the method
// "Get issue MTTR" of service "issues".
func NewGetIssueMTTREndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetIssueMTTRPayload)
		return s.GetIssueMTTR(ctx, p)
	}
}
