// Code generated by goa v3.5.2, DO NOT EDIT.
//
// issues views
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// IssueCollection is the viewed result type that is projected based on a view.
type IssueCollection struct {
	// Type to project
	Projected IssueCollectionView
	// View to render
	View string
}

// IssueSummaryCollection is the viewed result type that is projected based on
// a view.
type IssueSummaryCollection struct {
	// Type to project
	Projected IssueSummaryCollectionView
	// View to render
	View string
}

// Issue is the viewed result type that is projected based on a view.
type Issue struct {
	// Type to project
	Projected *IssueView
	// View to render
	View string
}

// FindingCollection is the viewed result type that is projected based on a
// view.
type FindingCollection struct {
	// Type to project
	Projected FindingCollectionView
	// View to render
	View string
}

// Finding is the viewed result type that is projected based on a view.
type Finding struct {
	// Type to project
	Projected *FindingView
	// View to render
	View string
}

// IssueCollectionView is a type that runs validations on a projected type.
type IssueCollectionView []*IssueView

// IssueView is a type that runs validations on a projected type.
type IssueView struct {
	// Issue ID
	ID *string
	// Issue summary
	Summary *string
	// Common Weakness Enumeration ID
	CweID *int
	// Issue description
	Description *string
	// Recommendations to fix the issue
	Recommendations []string
	// Documentation reference for the issue
	ReferenceLinks []string
	// Labels associated with the issue
	Labels []string
}

// IssueSummaryCollectionView is a type that runs validations on a projected
// type.
type IssueSummaryCollectionView []*IssueSummaryView

// IssueSummaryView is a type that runs validations on a projected type.
type IssueSummaryView struct {
	// Issue ID
	IssueID *string
	// Issue summary
	Summary *string
	// Number of affected targets for issue
	TargetsCount *int
	// Number of affected resources for issue
	ResourcesCount *int
	// Max score for issue
	MaxScore *float32
}

// FindingCollectionView is a type that runs validations on a projected type.
type FindingCollectionView []*FindingView

// FindingView is a type that runs validations on a projected type.
type FindingView struct {
	// Finding ID
	ID *string
	// Issue
	Issue *IssueView
	// Target
	Target *TargetView
	// Source
	Source *SourcewithnotargetView
	// Finding details
	Details *string
	// Finding impact details
	ImpactDetails *string
	// Finding status. Can be 'OPEN' or 'FIXED'.
	Status *string
	// Finding severity score
	Score *float32
	// Other resources associated with the finding
	Resources []*ResourceGroupView
}

// TargetView is a type that runs validations on a projected type.
type TargetView struct {
	// Target ID
	ID *string
	// Target identifier
	Identifier *string
	// List of tags associated with target
	Tags []string
}

// SourcewithnotargetView is a type that runs validations on a projected type.
type SourcewithnotargetView struct {
	// Source ID
	ID *string
	// Source name
	Name *string
	// Source component
	Component *string
	// Source instance
	Instance *string
	// Source options
	Options *string
	// Time on which the source scanned the target
	Time *string
}

// ResourceGroupView is a type that runs validations on a projected type.
type ResourceGroupView struct {
	// Name of the resource group
	Name *string
	// Column names of the resource group in the order that should be rendered
	Attributes []string
	// List containing the resource rows as hashmap
	Resources []map[string]string
}

var (
	// IssueCollectionMap is a map indexing the attribute names of IssueCollection
	// by view name.
	IssueCollectionMap = map[string][]string{
		"default": {
			"id",
			"summary",
			"cwe_id",
			"description",
			"recommendations",
			"reference_links",
			"labels",
		},
	}
	// IssueSummaryCollectionMap is a map indexing the attribute names of
	// IssueSummaryCollection by view name.
	IssueSummaryCollectionMap = map[string][]string{
		"default": {
			"issue_id",
			"summary",
			"targets_count",
			"resources_count",
			"max_score",
		},
	}
	// IssueMap is a map indexing the attribute names of Issue by view name.
	IssueMap = map[string][]string{
		"default": {
			"id",
			"summary",
			"cwe_id",
			"description",
			"recommendations",
			"reference_links",
			"labels",
		},
	}
	// FindingCollectionMap is a map indexing the attribute names of
	// FindingCollection by view name.
	FindingCollectionMap = map[string][]string{
		"default": {
			"id",
			"issue",
			"target",
			"source",
			"details",
			"impact_details",
			"status",
			"score",
			"resources",
		},
	}
	// FindingMap is a map indexing the attribute names of Finding by view name.
	FindingMap = map[string][]string{
		"default": {
			"id",
			"issue",
			"target",
			"source",
			"details",
			"impact_details",
			"status",
			"score",
			"resources",
		},
	}
	// IssueSummaryMap is a map indexing the attribute names of IssueSummary by
	// view name.
	IssueSummaryMap = map[string][]string{
		"default": {
			"issue_id",
			"summary",
			"targets_count",
			"resources_count",
			"max_score",
		},
	}
	// TargetMap is a map indexing the attribute names of Target by view name.
	TargetMap = map[string][]string{
		"default": {
			"id",
			"identifier",
			"tags",
		},
	}
	// SourcewithnotargetMap is a map indexing the attribute names of
	// Sourcewithnotarget by view name.
	SourcewithnotargetMap = map[string][]string{
		"default": {
			"id",
			"name",
			"component",
			"instance",
			"options",
			"time",
		},
	}
	// ResourceGroupMap is a map indexing the attribute names of ResourceGroup by
	// view name.
	ResourceGroupMap = map[string][]string{
		"default": {
			"name",
			"attributes",
			"resources",
		},
	}
)

// ValidateIssueCollection runs the validations defined on the viewed result
// type IssueCollection.
func ValidateIssueCollection(result IssueCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateIssueCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateIssueSummaryCollection runs the validations defined on the viewed
// result type IssueSummaryCollection.
func ValidateIssueSummaryCollection(result IssueSummaryCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateIssueSummaryCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateIssue runs the validations defined on the viewed result type Issue.
func ValidateIssue(result *Issue) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateIssueView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateFindingCollection runs the validations defined on the viewed result
// type FindingCollection.
func ValidateFindingCollection(result FindingCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateFindingCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateFinding runs the validations defined on the viewed result type
// Finding.
func ValidateFinding(result *Finding) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateFindingView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateIssueCollectionView runs the validations defined on
// IssueCollectionView using the "default" view.
func ValidateIssueCollectionView(result IssueCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateIssueView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateIssueView runs the validations defined on IssueView using the
// "default" view.
func ValidateIssueView(result *IssueView) (err error) {

	return
}

// ValidateIssueSummaryCollectionView runs the validations defined on
// IssueSummaryCollectionView using the "default" view.
func ValidateIssueSummaryCollectionView(result IssueSummaryCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateIssueSummaryView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateIssueSummaryView runs the validations defined on IssueSummaryView
// using the "default" view.
func ValidateIssueSummaryView(result *IssueSummaryView) (err error) {

	return
}

// ValidateFindingCollectionView runs the validations defined on
// FindingCollectionView using the "default" view.
func ValidateFindingCollectionView(result FindingCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateFindingView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateFindingView runs the validations defined on FindingView using the
// "default" view.
func ValidateFindingView(result *FindingView) (err error) {

	if result.Issue != nil {
		if err2 := ValidateIssueView(result.Issue); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.Target != nil {
		if err2 := ValidateTargetView(result.Target); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	if result.Source != nil {
		if err2 := ValidateSourcewithnotargetView(result.Source); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateTargetView runs the validations defined on TargetView using the
// "default" view.
func ValidateTargetView(result *TargetView) (err error) {

	return
}

// ValidateSourcewithnotargetView runs the validations defined on
// SourcewithnotargetView using the "default" view.
func ValidateSourcewithnotargetView(result *SourcewithnotargetView) (err error) {

	return
}

// ValidateResourceGroupView runs the validations defined on ResourceGroupView
// using the "default" view.
func ValidateResourceGroupView(result *ResourceGroupView) (err error) {

	return
}
