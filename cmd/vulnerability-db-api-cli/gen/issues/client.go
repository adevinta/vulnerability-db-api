// Code generated by goa v3.14.0, DO NOT EDIT.
//
// issues client
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package issues

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "issues" service client.
type Client struct {
	ListIssuesEndpoint                                 goa.Endpoint
	IssuesSummaryEndpoint                              goa.Endpoint
	GetIssueEndpoint                                   goa.Endpoint
	ListFindingsByIssueEndpoint                        goa.Endpoint
	GetFindingByIssueTargetAndAffectedResourceEndpoint goa.Endpoint
	GetIssueMTTREndpoint                               goa.Endpoint
}

// NewClient initializes a "issues" service client given the endpoints.
func NewClient(listIssues, issuesSummary, getIssue, listFindingsByIssue, getFindingByIssueTargetAndAffectedResource, getIssueMTTR goa.Endpoint) *Client {
	return &Client{
		ListIssuesEndpoint:                                 listIssues,
		IssuesSummaryEndpoint:                              issuesSummary,
		GetIssueEndpoint:                                   getIssue,
		ListFindingsByIssueEndpoint:                        listFindingsByIssue,
		GetFindingByIssueTargetAndAffectedResourceEndpoint: getFindingByIssueTargetAndAffectedResource,
		GetIssueMTTREndpoint:                               getIssueMTTR,
	}
}

// ListIssues calls the "List issues" endpoint of the "issues" service.
func (c *Client) ListIssues(ctx context.Context, p *ListIssuesPayload) (res IssueCollection, err error) {
	var ires any
	ires, err = c.ListIssuesEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(IssueCollection), nil
}

// IssuesSummary calls the "Issues summary" endpoint of the "issues" service.
func (c *Client) IssuesSummary(ctx context.Context, p *IssuesSummaryPayload) (res IssueSummaryCollection, err error) {
	var ires any
	ires, err = c.IssuesSummaryEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(IssueSummaryCollection), nil
}

// GetIssue calls the "Get issue" endpoint of the "issues" service.
func (c *Client) GetIssue(ctx context.Context, p *GetIssuePayload) (res *Issue, err error) {
	var ires any
	ires, err = c.GetIssueEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Issue), nil
}

// ListFindingsByIssue calls the "List findings by issue" endpoint of the
// "issues" service.
func (c *Client) ListFindingsByIssue(ctx context.Context, p *ListFindingsByIssuePayload) (res FindingCollection, err error) {
	var ires any
	ires, err = c.ListFindingsByIssueEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(FindingCollection), nil
}

// GetFindingByIssueTargetAndAffectedResource calls the "Get finding by issue,
// target and affected resource" endpoint of the "issues" service.
func (c *Client) GetFindingByIssueTargetAndAffectedResource(ctx context.Context, p *GetFindingByIssueTargetAndAffectedResourcePayload) (res *Finding, err error) {
	var ires any
	ires, err = c.GetFindingByIssueTargetAndAffectedResourceEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Finding), nil
}

// GetIssueMTTR calls the "Get issue MTTR" endpoint of the "issues" service.
func (c *Client) GetIssueMTTR(ctx context.Context, p *GetIssueMTTRPayload) (res float32, err error) {
	var ires any
	ires, err = c.GetIssueMTTREndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(float32), nil
}
