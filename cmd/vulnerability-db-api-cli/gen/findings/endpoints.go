// Code generated by goa v3.0.6, DO NOT EDIT.
//
// findings endpoints
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package findings

import (
	"context"

	goa "goa.design/goa/v3/pkg"
	"goa.design/goa/v3/security"
)

// Endpoints wraps the "findings" service endpoints.
type Endpoints struct {
	ListFindings        goa.Endpoint
	GetFinding          goa.Endpoint
	ListEventsByFinding goa.Endpoint
	GetFindingMTTR      goa.Endpoint
	PatchFinding        goa.Endpoint
}

// NewEndpoints wraps the methods of the "findings" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	// Casting service to Auther interface
	a := s.(Auther)
	return &Endpoints{
		ListFindings:        NewListFindingsEndpoint(s),
		GetFinding:          NewGetFindingEndpoint(s),
		ListEventsByFinding: NewListEventsByFindingEndpoint(s),
		GetFindingMTTR:      NewGetFindingMTTREndpoint(s),
		PatchFinding:        NewPatchFindingEndpoint(s, a.APIKeyAuth),
	}
}

// Use applies the given middleware to all the "findings" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.ListFindings = m(e.ListFindings)
	e.GetFinding = m(e.GetFinding)
	e.ListEventsByFinding = m(e.ListEventsByFinding)
	e.GetFindingMTTR = m(e.GetFindingMTTR)
	e.PatchFinding = m(e.PatchFinding)
}

// NewListFindingsEndpoint returns an endpoint function that calls the method
// "List findings" of service "findings".
func NewListFindingsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ListFindingsPayload)
		res, err := s.ListFindings(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedFindingCollection(res, "default")
		return vres, nil
	}
}

// NewGetFindingEndpoint returns an endpoint function that calls the method
// "Get finding" of service "findings".
func NewGetFindingEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetFindingPayload)
		res, err := s.GetFinding(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedFinding(res, "default")
		return vres, nil
	}
}

// NewListEventsByFindingEndpoint returns an endpoint function that calls the
// method "List events by finding" of service "findings".
func NewListEventsByFindingEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ListEventsByFindingPayload)
		res, err := s.ListEventsByFinding(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedEventCollection(res, "default")
		return vres, nil
	}
}

// NewGetFindingMTTREndpoint returns an endpoint function that calls the method
// "Get finding MTTR" of service "findings".
func NewGetFindingMTTREndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetFindingMTTRPayload)
		res, err := s.GetFindingMTTR(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedMttr(res, "default")
		return vres, nil
	}
}

// NewPatchFindingEndpoint returns an endpoint function that calls the method
// "Patch finding" of service "findings".
func NewPatchFindingEndpoint(s Service, authAPIKeyFn security.AuthAPIKeyFunc) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*PatchFindingPayload)
		var err error
		sc := security.APIKeyScheme{
			Name:           "authorization",
			Scopes:         []string{},
			RequiredScopes: []string{},
		}
		var key string
		if p.Authorization != nil {
			key = *p.Authorization
		}
		ctx, err = authAPIKeyFn(ctx, key, &sc)
		if err != nil {
			return nil, err
		}
		res, err := s.PatchFinding(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedFinding(res, "default")
		return vres, nil
	}
}
