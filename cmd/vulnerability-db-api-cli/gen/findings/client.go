// Code generated by goa v3.0.6, DO NOT EDIT.
//
// findings client
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package findings

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "findings" service client.
type Client struct {
	ListFindingsEndpoint        goa.Endpoint
	GetFindingEndpoint          goa.Endpoint
	ListEventsByFindingEndpoint goa.Endpoint
	GetFindingMTTREndpoint      goa.Endpoint
	PatchFindingEndpoint        goa.Endpoint
}

// NewClient initializes a "findings" service client given the endpoints.
func NewClient(listFindings, getFinding, listEventsByFinding, getFindingMTTR, patchFinding goa.Endpoint) *Client {
	return &Client{
		ListFindingsEndpoint:        listFindings,
		GetFindingEndpoint:          getFinding,
		ListEventsByFindingEndpoint: listEventsByFinding,
		GetFindingMTTREndpoint:      getFindingMTTR,
		PatchFindingEndpoint:        patchFinding,
	}
}

// ListFindings calls the "List findings" endpoint of the "findings" service.
func (c *Client) ListFindings(ctx context.Context, p *ListFindingsPayload) (res FindingCollection, err error) {
	var ires interface{}
	ires, err = c.ListFindingsEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(FindingCollection), nil
}

// GetFinding calls the "Get finding" endpoint of the "findings" service.
func (c *Client) GetFinding(ctx context.Context, p *GetFindingPayload) (res *Finding, err error) {
	var ires interface{}
	ires, err = c.GetFindingEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Finding), nil
}

// ListEventsByFinding calls the "List events by finding" endpoint of the
// "findings" service.
func (c *Client) ListEventsByFinding(ctx context.Context, p *ListEventsByFindingPayload) (res EventCollection, err error) {
	var ires interface{}
	ires, err = c.ListEventsByFindingEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(EventCollection), nil
}

// GetFindingMTTR calls the "Get finding MTTR" endpoint of the "findings"
// service.
func (c *Client) GetFindingMTTR(ctx context.Context, p *GetFindingMTTRPayload) (res *Mttr, err error) {
	var ires interface{}
	ires, err = c.GetFindingMTTREndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Mttr), nil
}

// PatchFinding calls the "Patch finding" endpoint of the "findings" service.
func (c *Client) PatchFinding(ctx context.Context, p *PatchFindingPayload) (res *Finding, err error) {
	var ires interface{}
	ires, err = c.PatchFindingEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Finding), nil
}
