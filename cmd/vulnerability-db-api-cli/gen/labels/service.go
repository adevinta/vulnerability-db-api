// Code generated by goa v3.5.2, DO NOT EDIT.
//
// labels service
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package labels

import (
	"context"

	labelsviews "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/labels/views"
)

// Labels endpoint.
type Service interface {
	// ListLabels implements List labels.
	ListLabels(context.Context, *ListLabelsPayload) (res *Labels, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "labels"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"List labels"}

// ListLabelsPayload is the payload type of the labels service List labels
// method.
type ListLabelsPayload struct {
	// Team of associated targets
	Team *string
	// Team list of associated targets, separated by commas
	Teams *string
	// Status of associated findings
	Status *string
	// Allows to get the list of associated findings for a specific date
	// (YYYY-MM-DD). This filter has preference over minDate and maxDate.
	AtDate *string
	// Minimum date filter for associated findings (YYYY-MM-DD). This filter only
	// applies when used in conjunction with status filter.
	MinDate *string
	// Maximum date filter for associated findings (YYYY-MM-DD). This filter only
	// applies when used in conjunction with status filter.
	MaxDate *string
	// A list of asset identifiers to filter by for associated targets
	Identifiers *string
}

// Labels is the result type of the labels service List labels method.
type Labels struct {
	// List of labels
	Labels []string
}

// NewLabels initializes result type Labels from viewed result type Labels.
func NewLabels(vres *labelsviews.Labels) *Labels {
	return newLabels(vres.Projected)
}

// NewViewedLabels initializes viewed result type Labels from result type
// Labels using the given view.
func NewViewedLabels(res *Labels, view string) *labelsviews.Labels {
	p := newLabelsView(res)
	return &labelsviews.Labels{Projected: p, View: "default"}
}

// newLabels converts projected type Labels to service type Labels.
func newLabels(vres *labelsviews.LabelsView) *Labels {
	res := &Labels{}
	if vres.Labels != nil {
		res.Labels = make([]string, len(vres.Labels))
		for i, val := range vres.Labels {
			res.Labels[i] = val
		}
	}
	return res
}

// newLabelsView projects result type Labels to projected type LabelsView using
// the "default" view.
func newLabelsView(res *Labels) *labelsviews.LabelsView {
	vres := &labelsviews.LabelsView{}
	if res.Labels != nil {
		vres.Labels = make([]string, len(res.Labels))
		for i, val := range res.Labels {
			vres.Labels[i] = val
		}
	}
	return vres
}
