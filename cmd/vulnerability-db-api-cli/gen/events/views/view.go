// Code generated by goa v3.0.6, DO NOT EDIT.
//
// events views
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// EventCollection is the viewed result type that is projected based on a view.
type EventCollection struct {
	// Type to project
	Projected EventCollectionView
	// View to render
	View string
}

// EventCollectionView is a type that runs validations on a projected type.
type EventCollectionView []*EventView

// EventView is a type that runs validations on a projected type.
type EventView struct {
	// Finding event ID
	ID *string
	// Finding ID
	FindingID *string
	// Source ID
	SourceID *string
	// Finding severity score
	Score *float32
	// Event time
	Time *string
}

var (
	// EventCollectionMap is a map of attribute names in result type
	// EventCollection indexed by view name.
	EventCollectionMap = map[string][]string{
		"default": []string{
			"id",
			"finding_id",
			"source_id",
			"score",
			"time",
		},
	}
	// EventMap is a map of attribute names in result type Event indexed by view
	// name.
	EventMap = map[string][]string{
		"default": []string{
			"id",
			"finding_id",
			"source_id",
			"score",
			"time",
		},
	}
)

// ValidateEventCollection runs the validations defined on the viewed result
// type EventCollection.
func ValidateEventCollection(result EventCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateEventCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateEventCollectionView runs the validations defined on
// EventCollectionView using the "default" view.
func ValidateEventCollectionView(result EventCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateEventView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateEventView runs the validations defined on EventView using the
// "default" view.
func ValidateEventView(result *EventView) (err error) {

	return
}
