// Code generated by goa v3.0.6, DO NOT EDIT.
//
// events service
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package events

import (
	"context"

	eventsviews "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/events/views"
)

// Finding events endpoint.
type Service interface {
	// ListFindingEvents implements List finding events.
	ListFindingEvents(context.Context, *ListFindingEventsPayload) (res EventCollection, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "events"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [1]string{"List finding events"}

// ListFindingEventsPayload is the payload type of the events service List
// finding events method.
type ListFindingEventsPayload struct {
	// Minimum issues score filter
	MinScore *int
	// Maximum issues score filter
	MaxScore *int
	// Minimum date filter (YYY-MM-DD)
	MinDate *string
	// Maximum date filter (YYY-MM-DD)
	MaxDate *string
	// Number of page requested
	Page *int
	// Number of results per page
	Size *int
}

// EventCollection is the result type of the events service List finding events
// method.
type EventCollection []*Event

type Event struct {
	// Finding event ID
	ID *string
	// Finding ID
	FindingID *string
	// Source ID
	SourceID *string
	// Finding severity score
	Score *float32
	// Event time
	Time *string
}

// NewEventCollection initializes result type EventCollection from viewed
// result type EventCollection.
func NewEventCollection(vres eventsviews.EventCollection) EventCollection {
	var res EventCollection
	switch vres.View {
	case "default", "":
		res = newEventCollection(vres.Projected)
	}
	return res
}

// NewViewedEventCollection initializes viewed result type EventCollection from
// result type EventCollection using the given view.
func NewViewedEventCollection(res EventCollection, view string) eventsviews.EventCollection {
	var vres eventsviews.EventCollection
	switch view {
	case "default", "":
		p := newEventCollectionView(res)
		vres = eventsviews.EventCollection{p, "default"}
	}
	return vres
}

// newEventCollection converts projected type EventCollection to service type
// EventCollection.
func newEventCollection(vres eventsviews.EventCollectionView) EventCollection {
	res := make(EventCollection, len(vres))
	for i, n := range vres {
		res[i] = newEvent(n)
	}
	return res
}

// newEventCollectionView projects result type EventCollection to projected
// type EventCollectionView using the "default" view.
func newEventCollectionView(res EventCollection) eventsviews.EventCollectionView {
	vres := make(eventsviews.EventCollectionView, len(res))
	for i, n := range res {
		vres[i] = newEventView(n)
	}
	return vres
}

// newEvent converts projected type Event to service type Event.
func newEvent(vres *eventsviews.EventView) *Event {
	res := &Event{
		ID:        vres.ID,
		FindingID: vres.FindingID,
		SourceID:  vres.SourceID,
		Score:     vres.Score,
		Time:      vres.Time,
	}
	return res
}

// newEventView projects result type Event to projected type EventView using
// the "default" view.
func newEventView(res *Event) *eventsviews.EventView {
	vres := &eventsviews.EventView{
		ID:        res.ID,
		FindingID: res.FindingID,
		SourceID:  res.SourceID,
		Score:     res.Score,
		Time:      res.Time,
	}
	return vres
}
