// Code generated by goa v3.14.0, DO NOT EDIT.
//
// targets endpoints
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package targets

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "targets" service endpoints.
type Endpoints struct {
	ListTargets                                goa.Endpoint
	TargetsSummary                             goa.Endpoint
	GetTarget                                  goa.Endpoint
	CreateTarget                               goa.Endpoint
	ListFindingsByTarget                       goa.Endpoint
	GetFindingByTargetIssueAndAffectedResource goa.Endpoint
	GetTargetMTTR                              goa.Endpoint
	DeleteTargetTeam                           goa.Endpoint
	DeleteTeam                                 goa.Endpoint
}

// NewEndpoints wraps the methods of the "targets" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		ListTargets:          NewListTargetsEndpoint(s),
		TargetsSummary:       NewTargetsSummaryEndpoint(s),
		GetTarget:            NewGetTargetEndpoint(s),
		CreateTarget:         NewCreateTargetEndpoint(s),
		ListFindingsByTarget: NewListFindingsByTargetEndpoint(s),
		GetFindingByTargetIssueAndAffectedResource: NewGetFindingByTargetIssueAndAffectedResourceEndpoint(s),
		GetTargetMTTR:    NewGetTargetMTTREndpoint(s),
		DeleteTargetTeam: NewDeleteTargetTeamEndpoint(s),
		DeleteTeam:       NewDeleteTeamEndpoint(s),
	}
}

// Use applies the given middleware to all the "targets" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.ListTargets = m(e.ListTargets)
	e.TargetsSummary = m(e.TargetsSummary)
	e.GetTarget = m(e.GetTarget)
	e.CreateTarget = m(e.CreateTarget)
	e.ListFindingsByTarget = m(e.ListFindingsByTarget)
	e.GetFindingByTargetIssueAndAffectedResource = m(e.GetFindingByTargetIssueAndAffectedResource)
	e.GetTargetMTTR = m(e.GetTargetMTTR)
	e.DeleteTargetTeam = m(e.DeleteTargetTeam)
	e.DeleteTeam = m(e.DeleteTeam)
}

// NewListTargetsEndpoint returns an endpoint function that calls the method
// "List targets" of service "targets".
func NewListTargetsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ListTargetsPayload)
		res, err := s.ListTargets(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedTargetCollection(res, "default")
		return vres, nil
	}
}

// NewTargetsSummaryEndpoint returns an endpoint function that calls the method
// "Targets summary" of service "targets".
func NewTargetsSummaryEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*TargetsSummaryPayload)
		res, err := s.TargetsSummary(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedTargetSummaryCollection(res, "default")
		return vres, nil
	}
}

// NewGetTargetEndpoint returns an endpoint function that calls the method "Get
// target" of service "targets".
func NewGetTargetEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetTargetPayload)
		res, err := s.GetTarget(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedTarget(res, "default")
		return vres, nil
	}
}

// NewCreateTargetEndpoint returns an endpoint function that calls the method
// "Create target" of service "targets".
func NewCreateTargetEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*CreateTargetPayload)
		res, err := s.CreateTarget(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedTarget(res, "default")
		return vres, nil
	}
}

// NewListFindingsByTargetEndpoint returns an endpoint function that calls the
// method "List findings by target" of service "targets".
func NewListFindingsByTargetEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ListFindingsByTargetPayload)
		res, err := s.ListFindingsByTarget(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedFindingCollection(res, "default")
		return vres, nil
	}
}

// NewGetFindingByTargetIssueAndAffectedResourceEndpoint returns an endpoint
// function that calls the method "Get finding by target, issue and affected
// resource" of service "targets".
func NewGetFindingByTargetIssueAndAffectedResourceEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetFindingByTargetIssueAndAffectedResourcePayload)
		res, err := s.GetFindingByTargetIssueAndAffectedResource(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedFinding(res, "default")
		return vres, nil
	}
}

// NewGetTargetMTTREndpoint returns an endpoint function that calls the method
// "Get target MTTR" of service "targets".
func NewGetTargetMTTREndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetTargetMTTRPayload)
		return s.GetTargetMTTR(ctx, p)
	}
}

// NewDeleteTargetTeamEndpoint returns an endpoint function that calls the
// method "Delete target team" of service "targets".
func NewDeleteTargetTeamEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeleteTargetTeamPayload)
		return nil, s.DeleteTargetTeam(ctx, p)
	}
}

// NewDeleteTeamEndpoint returns an endpoint function that calls the method
// "Delete team" of service "targets".
func NewDeleteTeamEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*DeleteTeamPayload)
		return nil, s.DeleteTeam(ctx, p)
	}
}
