// Code generated by goa v3.0.6, DO NOT EDIT.
//
// targets endpoints
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package targets

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "targets" service endpoints.
type Endpoints struct {
	ListTargets                  goa.Endpoint
	TargetsSummary               goa.Endpoint
	GetTarget                    goa.Endpoint
	ListFindingsByTarget         goa.Endpoint
	ListFindingsByTargetAndIssue goa.Endpoint
	GetTargetMTTR                goa.Endpoint
}

// NewEndpoints wraps the methods of the "targets" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		ListTargets:                  NewListTargetsEndpoint(s),
		TargetsSummary:               NewTargetsSummaryEndpoint(s),
		GetTarget:                    NewGetTargetEndpoint(s),
		ListFindingsByTarget:         NewListFindingsByTargetEndpoint(s),
		ListFindingsByTargetAndIssue: NewListFindingsByTargetAndIssueEndpoint(s),
		GetTargetMTTR:                NewGetTargetMTTREndpoint(s),
	}
}

// Use applies the given middleware to all the "targets" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.ListTargets = m(e.ListTargets)
	e.TargetsSummary = m(e.TargetsSummary)
	e.GetTarget = m(e.GetTarget)
	e.ListFindingsByTarget = m(e.ListFindingsByTarget)
	e.ListFindingsByTargetAndIssue = m(e.ListFindingsByTargetAndIssue)
	e.GetTargetMTTR = m(e.GetTargetMTTR)
}

// NewListTargetsEndpoint returns an endpoint function that calls the method
// "List targets" of service "targets".
func NewListTargetsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ListTargetsPayload)
		res, err := s.ListTargets(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedTargetCollection(res, "default")
		return vres, nil
	}
}

// NewTargetsSummaryEndpoint returns an endpoint function that calls the method
// "Targets summary" of service "targets".
func NewTargetsSummaryEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*TargetsSummaryPayload)
		res, err := s.TargetsSummary(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedTargetSummaryCollection(res, "default")
		return vres, nil
	}
}

// NewGetTargetEndpoint returns an endpoint function that calls the method "Get
// target" of service "targets".
func NewGetTargetEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetTargetPayload)
		res, err := s.GetTarget(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedTarget(res, "default")
		return vres, nil
	}
}

// NewListFindingsByTargetEndpoint returns an endpoint function that calls the
// method "List findings by target" of service "targets".
func NewListFindingsByTargetEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ListFindingsByTargetPayload)
		res, err := s.ListFindingsByTarget(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedFindingCollection(res, "default")
		return vres, nil
	}
}

// NewListFindingsByTargetAndIssueEndpoint returns an endpoint function that
// calls the method "List findings by target and issue" of service "targets".
func NewListFindingsByTargetAndIssueEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*ListFindingsByTargetAndIssuePayload)
		res, err := s.ListFindingsByTargetAndIssue(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedFinding(res, "default")
		return vres, nil
	}
}

// NewGetTargetMTTREndpoint returns an endpoint function that calls the method
// "Get target MTTR" of service "targets".
func NewGetTargetMTTREndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetTargetMTTRPayload)
		return s.GetTargetMTTR(ctx, p)
	}
}
