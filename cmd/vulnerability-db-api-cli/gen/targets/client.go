// Code generated by goa v3.0.6, DO NOT EDIT.
//
// targets client
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package targets

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "targets" service client.
type Client struct {
	ListTargetsEndpoint                                goa.Endpoint
	TargetsSummaryEndpoint                             goa.Endpoint
	GetTargetEndpoint                                  goa.Endpoint
	CreateTargetEndpoint                               goa.Endpoint
	ListFindingsByTargetEndpoint                       goa.Endpoint
	GetFindingByTargetIssueAndAffectedResourceEndpoint goa.Endpoint
	GetTargetMTTREndpoint                              goa.Endpoint
	DeleteTargetTagEndpoint                            goa.Endpoint
	DeleteTagEndpoint                                  goa.Endpoint
}

// NewClient initializes a "targets" service client given the endpoints.
func NewClient(listTargets, targetsSummary, getTarget, createTarget, listFindingsByTarget, getFindingByTargetIssueAndAffectedResource, getTargetMTTR, deleteTargetTag, deleteTag goa.Endpoint) *Client {
	return &Client{
		ListTargetsEndpoint:                                listTargets,
		TargetsSummaryEndpoint:                             targetsSummary,
		GetTargetEndpoint:                                  getTarget,
		CreateTargetEndpoint:                               createTarget,
		ListFindingsByTargetEndpoint:                       listFindingsByTarget,
		GetFindingByTargetIssueAndAffectedResourceEndpoint: getFindingByTargetIssueAndAffectedResource,
		GetTargetMTTREndpoint:                              getTargetMTTR,
		DeleteTargetTagEndpoint:                            deleteTargetTag,
		DeleteTagEndpoint:                                  deleteTag,
	}
}

// ListTargets calls the "List targets" endpoint of the "targets" service.
func (c *Client) ListTargets(ctx context.Context, p *ListTargetsPayload) (res TargetCollection, err error) {
	var ires interface{}
	ires, err = c.ListTargetsEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(TargetCollection), nil
}

// TargetsSummary calls the "Targets summary" endpoint of the "targets" service.
func (c *Client) TargetsSummary(ctx context.Context, p *TargetsSummaryPayload) (res TargetSummaryCollection, err error) {
	var ires interface{}
	ires, err = c.TargetsSummaryEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(TargetSummaryCollection), nil
}

// GetTarget calls the "Get target" endpoint of the "targets" service.
func (c *Client) GetTarget(ctx context.Context, p *GetTargetPayload) (res *Target, err error) {
	var ires interface{}
	ires, err = c.GetTargetEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Target), nil
}

// CreateTarget calls the "Create target" endpoint of the "targets" service.
func (c *Client) CreateTarget(ctx context.Context, p *CreateTargetPayload) (res *Target, err error) {
	var ires interface{}
	ires, err = c.CreateTargetEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Target), nil
}

// ListFindingsByTarget calls the "List findings by target" endpoint of the
// "targets" service.
func (c *Client) ListFindingsByTarget(ctx context.Context, p *ListFindingsByTargetPayload) (res FindingCollection, err error) {
	var ires interface{}
	ires, err = c.ListFindingsByTargetEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(FindingCollection), nil
}

// GetFindingByTargetIssueAndAffectedResource calls the "Get finding by target,
// issue and affected resource" endpoint of the "targets" service.
func (c *Client) GetFindingByTargetIssueAndAffectedResource(ctx context.Context, p *GetFindingByTargetIssueAndAffectedResourcePayload) (res *Finding, err error) {
	var ires interface{}
	ires, err = c.GetFindingByTargetIssueAndAffectedResourceEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Finding), nil
}

// GetTargetMTTR calls the "Get target MTTR" endpoint of the "targets" service.
func (c *Client) GetTargetMTTR(ctx context.Context, p *GetTargetMTTRPayload) (res float32, err error) {
	var ires interface{}
	ires, err = c.GetTargetMTTREndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(float32), nil
}

// DeleteTargetTag calls the "Delete target tag" endpoint of the "targets"
// service.
func (c *Client) DeleteTargetTag(ctx context.Context, p *DeleteTargetTagPayload) (err error) {
	_, err = c.DeleteTargetTagEndpoint(ctx, p)
	return
}

// DeleteTag calls the "Delete tag" endpoint of the "targets" service.
func (c *Client) DeleteTag(ctx context.Context, p *DeleteTagPayload) (err error) {
	_, err = c.DeleteTagEndpoint(ctx, p)
	return
}
