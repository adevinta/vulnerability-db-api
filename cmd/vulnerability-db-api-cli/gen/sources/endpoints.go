// Code generated by goa v3.14.0, DO NOT EDIT.
//
// sources endpoints
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package sources

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "sources" service endpoints.
type Endpoints struct {
	ListSources          goa.Endpoint
	GetSource            goa.Endpoint
	ListFindingsBySource goa.Endpoint
	GetSourceMTTR        goa.Endpoint
}

// NewEndpoints wraps the methods of the "sources" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		ListSources:          NewListSourcesEndpoint(s),
		GetSource:            NewGetSourceEndpoint(s),
		ListFindingsBySource: NewListFindingsBySourceEndpoint(s),
		GetSourceMTTR:        NewGetSourceMTTREndpoint(s),
	}
}

// Use applies the given middleware to all the "sources" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.ListSources = m(e.ListSources)
	e.GetSource = m(e.GetSource)
	e.ListFindingsBySource = m(e.ListFindingsBySource)
	e.GetSourceMTTR = m(e.GetSourceMTTR)
}

// NewListSourcesEndpoint returns an endpoint function that calls the method
// "List sources" of service "sources".
func NewListSourcesEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ListSourcesPayload)
		res, err := s.ListSources(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedSourceCollection(res, "default")
		return vres, nil
	}
}

// NewGetSourceEndpoint returns an endpoint function that calls the method "Get
// source" of service "sources".
func NewGetSourceEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetSourcePayload)
		res, err := s.GetSource(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedSource(res, "default")
		return vres, nil
	}
}

// NewListFindingsBySourceEndpoint returns an endpoint function that calls the
// method "List findings by source" of service "sources".
func NewListFindingsBySourceEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*ListFindingsBySourcePayload)
		res, err := s.ListFindingsBySource(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedFindingCollection(res, "default")
		return vres, nil
	}
}

// NewGetSourceMTTREndpoint returns an endpoint function that calls the method
// "Get source MTTR" of service "sources".
func NewGetSourceMTTREndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req any) (any, error) {
		p := req.(*GetSourceMTTRPayload)
		return s.GetSourceMTTR(ctx, p)
	}
}
