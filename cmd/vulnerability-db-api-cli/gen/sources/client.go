// Code generated by goa v3.0.6, DO NOT EDIT.
//
// sources client
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package sources

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Client is the "sources" service client.
type Client struct {
	ListSourcesEndpoint          goa.Endpoint
	GetSourceEndpoint            goa.Endpoint
	ListFindingsBySourceEndpoint goa.Endpoint
	GetSourceMTTREndpoint        goa.Endpoint
}

// NewClient initializes a "sources" service client given the endpoints.
func NewClient(listSources, getSource, listFindingsBySource, getSourceMTTR goa.Endpoint) *Client {
	return &Client{
		ListSourcesEndpoint:          listSources,
		GetSourceEndpoint:            getSource,
		ListFindingsBySourceEndpoint: listFindingsBySource,
		GetSourceMTTREndpoint:        getSourceMTTR,
	}
}

// ListSources calls the "List sources" endpoint of the "sources" service.
func (c *Client) ListSources(ctx context.Context, p *ListSourcesPayload) (res SourceCollection, err error) {
	var ires interface{}
	ires, err = c.ListSourcesEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(SourceCollection), nil
}

// GetSource calls the "Get source" endpoint of the "sources" service.
func (c *Client) GetSource(ctx context.Context, p *GetSourcePayload) (res *Source, err error) {
	var ires interface{}
	ires, err = c.GetSourceEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(*Source), nil
}

// ListFindingsBySource calls the "List findings by source" endpoint of the
// "sources" service.
func (c *Client) ListFindingsBySource(ctx context.Context, p *ListFindingsBySourcePayload) (res FindingCollection, err error) {
	var ires interface{}
	ires, err = c.ListFindingsBySourceEndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(FindingCollection), nil
}

// GetSourceMTTR calls the "Get source MTTR" endpoint of the "sources" service.
func (c *Client) GetSourceMTTR(ctx context.Context, p *GetSourceMTTRPayload) (res float32, err error) {
	var ires interface{}
	ires, err = c.GetSourceMTTREndpoint(ctx, p)
	if err != nil {
		return
	}
	return ires.(float32), nil
}
