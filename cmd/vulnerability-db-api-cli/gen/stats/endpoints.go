// Code generated by goa v3.0.6, DO NOT EDIT.
//
// stats endpoints
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package stats

import (
	"context"

	goa "goa.design/goa/v3/pkg"
)

// Endpoints wraps the "stats" service endpoints.
type Endpoints struct {
	GetSizeStats        goa.Endpoint
	GetOpenIssuesStats  goa.Endpoint
	GetFixedIssuesStats goa.Endpoint
	GetIssuesStats      goa.Endpoint
	GetStatsMTTR        goa.Endpoint
}

// NewEndpoints wraps the methods of the "stats" service with endpoints.
func NewEndpoints(s Service) *Endpoints {
	return &Endpoints{
		GetSizeStats:        NewGetSizeStatsEndpoint(s),
		GetOpenIssuesStats:  NewGetOpenIssuesStatsEndpoint(s),
		GetFixedIssuesStats: NewGetFixedIssuesStatsEndpoint(s),
		GetIssuesStats:      NewGetIssuesStatsEndpoint(s),
		GetStatsMTTR:        NewGetStatsMTTREndpoint(s),
	}
}

// Use applies the given middleware to all the "stats" service endpoints.
func (e *Endpoints) Use(m func(goa.Endpoint) goa.Endpoint) {
	e.GetSizeStats = m(e.GetSizeStats)
	e.GetOpenIssuesStats = m(e.GetOpenIssuesStats)
	e.GetFixedIssuesStats = m(e.GetFixedIssuesStats)
	e.GetIssuesStats = m(e.GetIssuesStats)
	e.GetStatsMTTR = m(e.GetStatsMTTR)
}

// NewGetSizeStatsEndpoint returns an endpoint function that calls the method
// "Get size stats" of service "stats".
func NewGetSizeStatsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		res, err := s.GetSizeStats(ctx)
		if err != nil {
			return nil, err
		}
		vres := NewViewedSize(res, "default")
		return vres, nil
	}
}

// NewGetOpenIssuesStatsEndpoint returns an endpoint function that calls the
// method "Get open issues stats" of service "stats".
func NewGetOpenIssuesStatsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetOpenIssuesStatsPayload)
		res, err := s.GetOpenIssuesStats(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedSeverity(res, "default")
		return vres, nil
	}
}

// NewGetFixedIssuesStatsEndpoint returns an endpoint function that calls the
// method "Get fixed issues stats" of service "stats".
func NewGetFixedIssuesStatsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetFixedIssuesStatsPayload)
		res, err := s.GetFixedIssuesStats(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedSeverity(res, "default")
		return vres, nil
	}
}

// NewGetIssuesStatsEndpoint returns an endpoint function that calls the method
// "Get issues stats" of service "stats".
func NewGetIssuesStatsEndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetIssuesStatsPayload)
		res, err := s.GetIssuesStats(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedIssueStatsCollection(res, "default")
		return vres, nil
	}
}

// NewGetStatsMTTREndpoint returns an endpoint function that calls the method
// "Get stats MTTR" of service "stats".
func NewGetStatsMTTREndpoint(s Service) goa.Endpoint {
	return func(ctx context.Context, req interface{}) (interface{}, error) {
		p := req.(*GetStatsMTTRPayload)
		res, err := s.GetStatsMTTR(ctx, p)
		if err != nil {
			return nil, err
		}
		vres := NewViewedSeverity(res, "default")
		return vres, nil
	}
}
