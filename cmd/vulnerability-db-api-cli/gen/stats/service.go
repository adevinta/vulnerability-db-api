// Code generated by goa v3.5.2, DO NOT EDIT.
//
// stats service
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package stats

import (
	"context"

	statsviews "github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/gen/stats/views"
)

// Stats endpoint.
type Service interface {
	// GetSizeStats implements Get size stats.
	GetSizeStats(context.Context) (res *Size, err error)
	// This method gets statistics for open findings by using different filters.
	// When querying for a specific time range, it returns every finding that has
	// been found in that time, regardless if that finding has also been fixed in
	// that span of time.
	GetOpenIssuesStats(context.Context, *GetOpenIssuesStatsPayload) (res *Severity, err error)
	// This method gets statistics for fixed findings by using different filters.
	// When querying for a specific time range, it returns every finding that has
	// been fixed in that time and it's fixed at the end of the time range
	// specified, so a finding that is fixed and then reopened in that range of
	// time will not be counted.
	GetFixedIssuesStats(context.Context, *GetFixedIssuesStatsPayload) (res *Severity, err error)
	// GetStatsAssetsPerSeverity implements Get stats assets per severity.
	GetStatsAssetsPerSeverity(context.Context, *GetStatsAssetsPerSeverityPayload) (res *SeverityAndTotal, err error)
	// GetIssuesStats implements Get issues stats.
	GetIssuesStats(context.Context, *GetIssuesStatsPayload) (res IssueStatsCollection, err error)
	// GetStatsMTTR implements Get stats MTTR.
	GetStatsMTTR(context.Context, *GetStatsMTTRPayload) (res *SeverityAndTotal, err error)
	// GetStatsExposure implements Get stats exposure.
	GetStatsExposure(context.Context, *GetStatsExposurePayload) (res *Exposure, err error)
	// GetStatsCurrentExposure implements Get stats current exposure.
	GetStatsCurrentExposure(context.Context, *GetStatsCurrentExposurePayload) (res *CurrentExposure, err error)
}

// ServiceName is the name of the service as defined in the design. This is the
// same value that is set in the endpoint request contexts under the ServiceKey
// key.
const ServiceName = "stats"

// MethodNames lists the service method names as defined in the design. These
// are the same values that are set in the endpoint request contexts under the
// MethodKey key.
var MethodNames = [8]string{"Get size stats", "Get open issues stats", "Get fixed issues stats", "Get stats assets per severity", "Get issues stats", "Get stats MTTR", "Get stats exposure", "Get stats current exposure"}

// Size is the result type of the stats service Get size stats method.
type Size struct {
	// Number of sources
	Sources *int
	// Number of targets
	Targets *int
	// Number of issues
	Issues *int
	// Number of findings
	Findings *int
	// Number of finding events
	FindingEvents *int
}

// GetOpenIssuesStatsPayload is the payload type of the stats service Get open
// issues stats method.
type GetOpenIssuesStatsPayload struct {
	// Target's tag filter
	Tag *string
	// Comma separated list of target tags to filter by
	Tags *string
	// Minimum date filter (YYY-MM-DD)
	MinDate *string
	// Maximum date filter (YYY-MM-DD)
	MaxDate *string
	// Allows to get stats for open findings at a specific date (YYY-MM-DD). This
	// filter has preference over minDate and maxDate.
	AtDate *string
	// A comma separated list of asset identifiers
	Identifiers *string
	// A comma separated list of associated labels
	Labels *string
}

// Severity is the result type of the stats service Get open issues stats
// method.
type Severity struct {
	// Number of critial issues
	Critical *int
	// Number of high issues
	High *int
	// Number of medium issues
	Medium *int
	// Number of low issues
	Low *int
	// Number of informational issues
	Informational *int
}

// GetFixedIssuesStatsPayload is the payload type of the stats service Get
// fixed issues stats method.
type GetFixedIssuesStatsPayload struct {
	// Target's tag filter
	Tag *string
	// Comma separated list of target tags to filter by
	Tags *string
	// Minimum date filter (YYY-MM-DD)
	MinDate *string
	// Maximum date filter (YYY-MM-DD)
	MaxDate *string
	// Allows to get stats for fixed findings at a specific date (YYY-MM-DD). This
	// filter has preference over minDate and maxDate.
	AtDate *string
	// A comma separated list of asset identifiers
	Identifiers *string
	// A comma separated list of associated labels
	Labels *string
}

// GetStatsAssetsPerSeverityPayload is the payload type of the stats service
// Get stats assets per severity method.
type GetStatsAssetsPerSeverityPayload struct {
	// Target's tag filter
	Tag *string
	// Comma separated list of target tags to filter by
	Tags *string
	// A comma separated list of asset identifiers
	Identifiers *string
	// A comma separated list of associated labels
	Labels *string
}

// SeverityAndTotal is the result type of the stats service Get stats assets
// per severity method.
type SeverityAndTotal struct {
	// Value for critical severity
	Critical *int
	// Value for high severity
	High *int
	// Value for medium severity
	Medium *int
	// Value for low severity
	Low *int
	// Value for informational severity
	Informational *int
	// Total number of issues
	Total *int
}

// GetIssuesStatsPayload is the payload type of the stats service Get issues
// stats method.
type GetIssuesStatsPayload struct {
	// Minimum date filter (YYY-MM-DD)
	MinDate *string
	// Maximum date filter (YYY-MM-DD)
	MaxDate *string
	// Minimum issues score filter
	MinScore *int
	// Maximum issues score filter
	MaxScore *int
}

// IssueStatsCollection is the result type of the stats service Get issues
// stats method.
type IssueStatsCollection []*IssueStats

// GetStatsMTTRPayload is the payload type of the stats service Get stats MTTR
// method.
type GetStatsMTTRPayload struct {
	// Target's tag filter
	Tag *string
	// Comma separated list of target tags to filter by
	Tags *string
	// Minimum date filter (YYY-MM-DD)
	MinDate *string
	// Maximum date filter (YYY-MM-DD)
	MaxDate *string
}

// GetStatsExposurePayload is the payload type of the stats service Get stats
// exposure method.
type GetStatsExposurePayload struct {
	// Target's tag filter
	Tag *string
	// Comma separated list of target tags to filter by
	Tags *string
	// Allows to get stats at a specific date (YYY-MM-DD)
	AtDate *string
	// Minimum issues score filter
	MinScore *int
	// Maximum issues score filter
	MaxScore *int
}

// Exposure is the result type of the stats service Get stats exposure method.
type Exposure struct {
	// Percentile 10 of exposure
	Percentile10 *float32
	// Percentile 25 of exposure or first quartile
	Percentile25 *float32
	// Percentile 50 of exposure or median
	Percentile50 *float32
	// Percentile 75 of exposure or third quartile
	Percentile75 *float32
	// Percentile 90 of exposure
	Percentile90 *float32
	// Mean exposure
	Mean *float32
}

// GetStatsCurrentExposurePayload is the payload type of the stats service Get
// stats current exposure method.
type GetStatsCurrentExposurePayload struct {
	// Target's tag filter
	Tag *string
	// Comma separated list of target tags to filter by
	Tags *string
	// Minimum issues score filter
	MinScore *int
	// Maximum issues score filter
	MaxScore *int
}

// CurrentExposure is the result type of the stats service Get stats current
// exposure method.
type CurrentExposure struct {
	// Percentile 10 of exposure
	Percentile10 *float32
	// Percentile 25 of exposure or first quartile
	Percentile25 *float32
	// Percentile 50 of exposure or median
	Percentile50 *float32
	// Percentile 75 of exposure or third quartile
	Percentile75 *float32
	// Percentile 90 of exposure
	Percentile90 *float32
	// Mean exposure
	Mean *float32
}

type IssueStats struct {
	// Issue ID
	ID *string
	// Issue summary
	Summary *string
	// Common Weakness Enumeration ID
	CweID *int
	// Issue description
	Description *string
	// Recommendations to fix the issue
	Recommendations []string
	// Documentation reference for the issue
	ReferenceLinks []string
	// Number of OPEN findings for this issue
	Open *int
	// Number of FIXED findings for this issue
	Fixed *int
}

// NewSize initializes result type Size from viewed result type Size.
func NewSize(vres *statsviews.Size) *Size {
	return newSize(vres.Projected)
}

// NewViewedSize initializes viewed result type Size from result type Size
// using the given view.
func NewViewedSize(res *Size, view string) *statsviews.Size {
	p := newSizeView(res)
	return &statsviews.Size{Projected: p, View: "default"}
}

// NewSeverity initializes result type Severity from viewed result type
// Severity.
func NewSeverity(vres *statsviews.Severity) *Severity {
	return newSeverity(vres.Projected)
}

// NewViewedSeverity initializes viewed result type Severity from result type
// Severity using the given view.
func NewViewedSeverity(res *Severity, view string) *statsviews.Severity {
	p := newSeverityView(res)
	return &statsviews.Severity{Projected: p, View: "default"}
}

// NewSeverityAndTotal initializes result type SeverityAndTotal from viewed
// result type SeverityAndTotal.
func NewSeverityAndTotal(vres *statsviews.SeverityAndTotal) *SeverityAndTotal {
	return newSeverityAndTotal(vres.Projected)
}

// NewViewedSeverityAndTotal initializes viewed result type SeverityAndTotal
// from result type SeverityAndTotal using the given view.
func NewViewedSeverityAndTotal(res *SeverityAndTotal, view string) *statsviews.SeverityAndTotal {
	p := newSeverityAndTotalView(res)
	return &statsviews.SeverityAndTotal{Projected: p, View: "default"}
}

// NewIssueStatsCollection initializes result type IssueStatsCollection from
// viewed result type IssueStatsCollection.
func NewIssueStatsCollection(vres statsviews.IssueStatsCollection) IssueStatsCollection {
	return newIssueStatsCollection(vres.Projected)
}

// NewViewedIssueStatsCollection initializes viewed result type
// IssueStatsCollection from result type IssueStatsCollection using the given
// view.
func NewViewedIssueStatsCollection(res IssueStatsCollection, view string) statsviews.IssueStatsCollection {
	p := newIssueStatsCollectionView(res)
	return statsviews.IssueStatsCollection{Projected: p, View: "default"}
}

// NewExposure initializes result type Exposure from viewed result type
// Exposure.
func NewExposure(vres *statsviews.Exposure) *Exposure {
	return newExposure(vres.Projected)
}

// NewViewedExposure initializes viewed result type Exposure from result type
// Exposure using the given view.
func NewViewedExposure(res *Exposure, view string) *statsviews.Exposure {
	p := newExposureView(res)
	return &statsviews.Exposure{Projected: p, View: "default"}
}

// NewCurrentExposure initializes result type CurrentExposure from viewed
// result type CurrentExposure.
func NewCurrentExposure(vres *statsviews.CurrentExposure) *CurrentExposure {
	return newCurrentExposure(vres.Projected)
}

// NewViewedCurrentExposure initializes viewed result type CurrentExposure from
// result type CurrentExposure using the given view.
func NewViewedCurrentExposure(res *CurrentExposure, view string) *statsviews.CurrentExposure {
	p := newCurrentExposureView(res)
	return &statsviews.CurrentExposure{Projected: p, View: "default"}
}

// newSize converts projected type Size to service type Size.
func newSize(vres *statsviews.SizeView) *Size {
	res := &Size{
		Sources:       vres.Sources,
		Targets:       vres.Targets,
		Issues:        vres.Issues,
		Findings:      vres.Findings,
		FindingEvents: vres.FindingEvents,
	}
	return res
}

// newSizeView projects result type Size to projected type SizeView using the
// "default" view.
func newSizeView(res *Size) *statsviews.SizeView {
	vres := &statsviews.SizeView{
		Sources:       res.Sources,
		Targets:       res.Targets,
		Issues:        res.Issues,
		Findings:      res.Findings,
		FindingEvents: res.FindingEvents,
	}
	return vres
}

// newSeverity converts projected type Severity to service type Severity.
func newSeverity(vres *statsviews.SeverityView) *Severity {
	res := &Severity{
		Critical:      vres.Critical,
		High:          vres.High,
		Medium:        vres.Medium,
		Low:           vres.Low,
		Informational: vres.Informational,
	}
	return res
}

// newSeverityView projects result type Severity to projected type SeverityView
// using the "default" view.
func newSeverityView(res *Severity) *statsviews.SeverityView {
	vres := &statsviews.SeverityView{
		Critical:      res.Critical,
		High:          res.High,
		Medium:        res.Medium,
		Low:           res.Low,
		Informational: res.Informational,
	}
	return vres
}

// newSeverityAndTotal converts projected type SeverityAndTotal to service type
// SeverityAndTotal.
func newSeverityAndTotal(vres *statsviews.SeverityAndTotalView) *SeverityAndTotal {
	res := &SeverityAndTotal{
		Critical:      vres.Critical,
		High:          vres.High,
		Medium:        vres.Medium,
		Low:           vres.Low,
		Informational: vres.Informational,
		Total:         vres.Total,
	}
	return res
}

// newSeverityAndTotalView projects result type SeverityAndTotal to projected
// type SeverityAndTotalView using the "default" view.
func newSeverityAndTotalView(res *SeverityAndTotal) *statsviews.SeverityAndTotalView {
	vres := &statsviews.SeverityAndTotalView{
		Critical:      res.Critical,
		High:          res.High,
		Medium:        res.Medium,
		Low:           res.Low,
		Informational: res.Informational,
		Total:         res.Total,
	}
	return vres
}

// newIssueStatsCollection converts projected type IssueStatsCollection to
// service type IssueStatsCollection.
func newIssueStatsCollection(vres statsviews.IssueStatsCollectionView) IssueStatsCollection {
	res := make(IssueStatsCollection, len(vres))
	for i, n := range vres {
		res[i] = newIssueStats(n)
	}
	return res
}

// newIssueStatsCollectionView projects result type IssueStatsCollection to
// projected type IssueStatsCollectionView using the "default" view.
func newIssueStatsCollectionView(res IssueStatsCollection) statsviews.IssueStatsCollectionView {
	vres := make(statsviews.IssueStatsCollectionView, len(res))
	for i, n := range res {
		vres[i] = newIssueStatsView(n)
	}
	return vres
}

// newIssueStats converts projected type IssueStats to service type IssueStats.
func newIssueStats(vres *statsviews.IssueStatsView) *IssueStats {
	res := &IssueStats{
		ID:          vres.ID,
		Summary:     vres.Summary,
		CweID:       vres.CweID,
		Description: vres.Description,
		Open:        vres.Open,
		Fixed:       vres.Fixed,
	}
	if vres.Recommendations != nil {
		res.Recommendations = make([]string, len(vres.Recommendations))
		for i, val := range vres.Recommendations {
			res.Recommendations[i] = val
		}
	}
	if vres.ReferenceLinks != nil {
		res.ReferenceLinks = make([]string, len(vres.ReferenceLinks))
		for i, val := range vres.ReferenceLinks {
			res.ReferenceLinks[i] = val
		}
	}
	return res
}

// newIssueStatsView projects result type IssueStats to projected type
// IssueStatsView using the "default" view.
func newIssueStatsView(res *IssueStats) *statsviews.IssueStatsView {
	vres := &statsviews.IssueStatsView{
		ID:          res.ID,
		Summary:     res.Summary,
		CweID:       res.CweID,
		Description: res.Description,
		Open:        res.Open,
		Fixed:       res.Fixed,
	}
	if res.Recommendations != nil {
		vres.Recommendations = make([]string, len(res.Recommendations))
		for i, val := range res.Recommendations {
			vres.Recommendations[i] = val
		}
	}
	if res.ReferenceLinks != nil {
		vres.ReferenceLinks = make([]string, len(res.ReferenceLinks))
		for i, val := range res.ReferenceLinks {
			vres.ReferenceLinks[i] = val
		}
	}
	return vres
}

// newExposure converts projected type Exposure to service type Exposure.
func newExposure(vres *statsviews.ExposureView) *Exposure {
	res := &Exposure{
		Percentile10: vres.Percentile10,
		Percentile25: vres.Percentile25,
		Percentile50: vres.Percentile50,
		Percentile75: vres.Percentile75,
		Percentile90: vres.Percentile90,
		Mean:         vres.Mean,
	}
	return res
}

// newExposureView projects result type Exposure to projected type ExposureView
// using the "default" view.
func newExposureView(res *Exposure) *statsviews.ExposureView {
	vres := &statsviews.ExposureView{
		Percentile10: res.Percentile10,
		Percentile25: res.Percentile25,
		Percentile50: res.Percentile50,
		Percentile75: res.Percentile75,
		Percentile90: res.Percentile90,
		Mean:         res.Mean,
	}
	return vres
}

// newCurrentExposure converts projected type CurrentExposure to service type
// CurrentExposure.
func newCurrentExposure(vres *statsviews.CurrentExposureView) *CurrentExposure {
	res := &CurrentExposure{
		Percentile10: vres.Percentile10,
		Percentile25: vres.Percentile25,
		Percentile50: vres.Percentile50,
		Percentile75: vres.Percentile75,
		Percentile90: vres.Percentile90,
		Mean:         vres.Mean,
	}
	return res
}

// newCurrentExposureView projects result type CurrentExposure to projected
// type CurrentExposureView using the "default" view.
func newCurrentExposureView(res *CurrentExposure) *statsviews.CurrentExposureView {
	vres := &statsviews.CurrentExposureView{
		Percentile10: res.Percentile10,
		Percentile25: res.Percentile25,
		Percentile50: res.Percentile50,
		Percentile75: res.Percentile75,
		Percentile90: res.Percentile90,
		Mean:         res.Mean,
	}
	return vres
}
