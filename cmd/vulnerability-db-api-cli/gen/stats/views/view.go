/*
Copyright 2021 Adevinta
*/

// Code generated by goa v3.0.6, DO NOT EDIT.
//
// stats views
//
// Command:
// $ goa gen
// github.com/adevinta/vulnerability-db-api/cmd/vulnerability-db-api-cli/design

package views

import (
	goa "goa.design/goa/v3/pkg"
)

// Size is the viewed result type that is projected based on a view.
type Size struct {
	// Type to project
	Projected *SizeView
	// View to render
	View string
}

// Severity is the viewed result type that is projected based on a view.
type Severity struct {
	// Type to project
	Projected *SeverityView
	// View to render
	View string
}

// IssueStatsCollection is the viewed result type that is projected based on a
// view.
type IssueStatsCollection struct {
	// Type to project
	Projected IssueStatsCollectionView
	// View to render
	View string
}

// SizeView is a type that runs validations on a projected type.
type SizeView struct {
	// Number of sources
	Sources *int
	// Number of targets
	Targets *int
	// Number of issues
	Issues *int
	// Number of findings
	Findings *int
	// Number of finding events
	FindingEvents *int
}

// SeverityView is a type that runs validations on a projected type.
type SeverityView struct {
	// Number of critial issues
	Critical *int
	// Number of high issues
	High *int
	// Number of medium issues
	Medium *int
	// Number of low issues
	Low *int
	// Number of informational issues
	Informational *int
}

// IssueStatsCollectionView is a type that runs validations on a projected type.
type IssueStatsCollectionView []*IssueStatsView

// IssueStatsView is a type that runs validations on a projected type.
type IssueStatsView struct {
	// Issue ID
	ID *string
	// Issue summary
	Summary *string
	// Common Weakness Enumeration ID
	CweID *int
	// Issue description
	Description *string
	// Recommendations to fix the issue
	Recommendations []string
	// Documentation reference for the issue
	ReferenceLinks []string
	// Number of OPEN findings for this issue
	Open *int
	// Number of FIXED findings for this issue
	Fixed *int
}

var (
	// SizeMap is a map of attribute names in result type Size indexed by view name.
	SizeMap = map[string][]string{
		"default": []string{
			"sources",
			"targets",
			"issues",
			"findings",
			"finding_events",
		},
	}
	// SeverityMap is a map of attribute names in result type Severity indexed by
	// view name.
	SeverityMap = map[string][]string{
		"default": []string{
			"critical",
			"high",
			"medium",
			"low",
			"informational",
		},
	}
	// IssueStatsCollectionMap is a map of attribute names in result type
	// IssueStatsCollection indexed by view name.
	IssueStatsCollectionMap = map[string][]string{
		"default": []string{
			"id",
			"summary",
			"cwe_id",
			"description",
			"recommendations",
			"reference_links",
			"open",
			"fixed",
		},
	}
	// IssueStatsMap is a map of attribute names in result type IssueStats indexed
	// by view name.
	IssueStatsMap = map[string][]string{
		"default": []string{
			"id",
			"summary",
			"cwe_id",
			"description",
			"recommendations",
			"reference_links",
			"open",
			"fixed",
		},
	}
)

// ValidateSize runs the validations defined on the viewed result type Size.
func ValidateSize(result *Size) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateSizeView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateSeverity runs the validations defined on the viewed result type
// Severity.
func ValidateSeverity(result *Severity) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateSeverityView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateIssueStatsCollection runs the validations defined on the viewed
// result type IssueStatsCollection.
func ValidateIssueStatsCollection(result IssueStatsCollection) (err error) {
	switch result.View {
	case "default", "":
		err = ValidateIssueStatsCollectionView(result.Projected)
	default:
		err = goa.InvalidEnumValueError("view", result.View, []interface{}{"default"})
	}
	return
}

// ValidateSizeView runs the validations defined on SizeView using the
// "default" view.
func ValidateSizeView(result *SizeView) (err error) {

	return
}

// ValidateSeverityView runs the validations defined on SeverityView using the
// "default" view.
func ValidateSeverityView(result *SeverityView) (err error) {

	return
}

// ValidateIssueStatsCollectionView runs the validations defined on
// IssueStatsCollectionView using the "default" view.
func ValidateIssueStatsCollectionView(result IssueStatsCollectionView) (err error) {
	for _, item := range result {
		if err2 := ValidateIssueStatsView(item); err2 != nil {
			err = goa.MergeErrors(err, err2)
		}
	}
	return
}

// ValidateIssueStatsView runs the validations defined on IssueStatsView using
// the "default" view.
func ValidateIssueStatsView(result *IssueStatsView) (err error) {

	return
}
