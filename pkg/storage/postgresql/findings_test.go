/*
Copyright 2020 Adevinta
*/

package postgresql

import (
	"testing"
	"time"

	"github.com/adevinta/vulnerability-db-api/pkg/model"
)

func TestFillFindingExposures(t *testing.T) {
	type input struct {
		foundAt   []string
		fixedAt   []string
		expiredAt []string
		atTime    string
	}

	testCases := []struct {
		in              input
		expectedStatus  string
		expectedTotal   int64
		expectedCurrent int64
	}{
		{
			in: input{
				foundAt: []string{
					"2020-01-01 01:00:00",
				},
				fixedAt: []string{
					"2020-01-02 01:00:00",
				},
				expiredAt: []string{
					"NULL",
				},
				atTime: "2020-01-01 02:00:00",
			},
			expectedStatus:  "OPEN",
			expectedTotal:   1,
			expectedCurrent: 1,
		},
		{
			in: input{
				foundAt: []string{
					"2020-01-01 01:00:00",
					"2020-01-03 01:00:00",
				},
				fixedAt: []string{
					"2020-01-02 01:00:00",
					"2020-01-04 01:00:00",
				},
				expiredAt: []string{
					"NULL",
					"NULL",
				},
				atTime: "2020-01-05 02:00:00",
			},
			expectedStatus:  "FIXED",
			expectedTotal:   48,
			expectedCurrent: -1, // No current exposure info should be shown.
		},
		{
			in: input{
				foundAt: []string{
					"2020-01-01 01:00:00",
					"2020-01-03 01:00:00",
					"2020-01-05 01:00:00",
				},
				fixedAt: []string{
					"2020-01-02 01:00:00",
					"2020-01-04 01:00:00",
					"NULL",
				},
				expiredAt: []string{
					"NULL",
					"NULL",
					"NULL",
				},
				atTime: "2020-01-03 02:00:00",
			},
			expectedStatus:  "OPEN",
			expectedTotal:   25,
			expectedCurrent: 1,
		},
		{
			in: input{
				foundAt: []string{
					"2020-01-01 01:00:00",
					"2020-01-03 01:00:00",
					"2020-01-05 01:00:00",
				},
				fixedAt: []string{
					"2020-01-02 01:00:00",
					"2020-01-04 01:00:00",
					"NULL",
				},
				expiredAt: []string{
					"NULL",
					"NULL",
					"2020-01-06 01:00:00",
				},
				atTime: "2020-01-05 02:00:00",
			},
			expectedStatus:  "OPEN",
			expectedTotal:   49,
			expectedCurrent: 1,
		},
		{
			in: input{
				foundAt: []string{
					"2020-01-01 01:00:00",
					"2020-01-03 01:00:00",
					"2020-01-05 01:00:00",
				},
				fixedAt: []string{
					"2020-01-02 01:00:00",
					"2020-01-04 01:00:00",
					"NULL",
				},
				expiredAt: []string{
					"NULL",
					"NULL",
					"2020-01-06 01:00:00",
				},
				atTime: "2020-01-06 02:00:00",
			},
			expectedStatus:  "EXPIRED",
			expectedTotal:   48,
			expectedCurrent: -1, // No current exposure info should be shown.
		},
	}

	for _, tc := range testCases {
		// given
		f := &model.FindingExpanded{}
		atTime, err := time.Parse(dateTimeFmt, tc.in.atTime)
		if err != nil {
			t.Fatalf("Unexpected error parsing atTime input param: %v", err)
		}

		// when
		err = fillFindingExposures(f, tc.in.foundAt, tc.in.fixedAt, tc.in.expiredAt, atTime)
		if err != nil {
			t.Fatalf("Expected no error, but got: %v", err)
		}

		// then
		if tc.expectedStatus != f.Status {
			t.Fatalf("Expected status to be: %s\nBut got: %s", tc.expectedStatus, f.Status)
		}
		if tc.expectedTotal != f.TotalExposure {
			t.Fatalf("Expected total exposure to be: %d\nBut got: %d",
				tc.expectedTotal, f.TotalExposure)
		}
		if tc.expectedCurrent >= 0 {
			if tc.expectedCurrent != f.CurrentExposure {
				t.Fatalf("Expected current exposure to be: %d\nBut got: %d",
					tc.expectedCurrent, f.CurrentExposure)
			}
		} else {
			if f.OpenFinding != nil {
				t.Fatalf("Expected open finding info to be 'nil' but it's not")
			}
		}
	}
}
