/*
Copyright 2021 Adevinta
*/

package postgresql

import (
	"database/sql"

	"github.com/adevinta/vulnerability-db-api/pkg/model"
	"github.com/adevinta/vulnerability-db-api/pkg/storage"
)

// ListSources returns a paginated list of sources.
func (db DB) ListSources(filter storage.Filter) ([]model.Source, storage.Pagination, error) {
	offset := storage.Offset(filter.Page, filter.Size)

	sources := []model.Source{}
	query := "SELECT * FROM sources  LIMIT $1 OFFSET $2"
	logQuery(db.Logger, "ListSources", query, filter.Size, offset)
	err := db.DB.Select(&sources, query, filter.Size, offset)
	if err != nil {
		return []model.Source{}, storage.Pagination{}, err
	}

	var size int
	err = db.DB.Get(&size, "SELECT COUNT(id) FROM sources")
	if err != nil {
		return []model.Source{}, storage.Pagination{}, err
	}

	return sources, storage.Pagination{Limit: filter.Size, Offset: offset, Total: size}, nil
}

// GetSource returns a specifc source.
func (db DB) GetSource(id string) (model.Source, error) {
	var source model.Source
	query := "SELECT * FROM sources WHERE id = $1"
	logQuery(db.Logger, "GetSource", query, id)
	err := db.DB.Get(&source, query, id)
	if err == sql.ErrNoRows {
		return model.Source{}, nil
	}
	if err != nil {
		return model.Source{}, err
	}

	return source, nil
}

// GetSourceMTTR returns the mean time to remedite among all the sources with
// the same name, component and options as the given source ID.
func (db DB) GetSourceMTTR(id string) (float32, error) {
	var mttr float32
	query := `
	WITH relevant_sources AS (
		SELECT name, component, options from sources 
		WHERE id = $1 
	)
	SELECT COALESCE(AVG(ttr), 0)
	FROM (
		SELECT fexp.ttr 
		FROM finding_exposures fexp
		INNER JOIN finding_events fe ON fexp.finding_id = fe.finding_id
		INNER JOIN sources s ON fe.source_id=s.id
		INNER JOIN relevant_sources rs 
		ON rs.name=s.name 
		AND rs.component = s.component 
		AND rs.options = s.options
		WHERE fexp.ttr IS NOT NULL
		GROUP BY fexp.finding_id, fexp.found_at
	) AS exposures
	`
	logQuery(db.Logger, "GetSourceMTTR", query, id)
	err := db.DB.Get(&mttr, query, id)
	if err == sql.ErrNoRows {
		return 0, nil
	}
	if err != nil {
		return 0, err
	}

	return mttr, nil
}
