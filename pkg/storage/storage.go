/*
Copyright 2020 Adevinta
*/

package storage

import (
	"errors"

	"github.com/adevinta/vulnerability-db-api/pkg/model"
)

var (
	// ErrInvalidData is returned when a method in Storage finds inconsistent
	// data in the db, for instance, a Finding without a target.
	ErrInvalidData = errors.New("inconsistent data found")
)

// Filter holds query filtering information.
type Filter struct {
	Status          string
	Tag             string
	Identifier      string
	Identifiers     string
	IdentifierMatch bool
	MinScore        float32
	MaxScore        float32
	MinDate         string
	MaxDate         string
	AtDate          string
	Page            int
	Size            int
	SortBy          SortBy
	IssueID         string
	TargetID        string
	SourceID        string
}

// SortBy holds information for the
// query sorting criteria.
type SortBy struct {
	Field string
	Order string
}

// Pagination holds database pagination information.
type Pagination struct {
	Limit  int `json:"limit"`
	Offset int `json:"offset"`
	Total  int `json:"total"`
}

// Storage defines the API for querying data from storage.
type Storage interface {
	ListSources(filter Filter) ([]model.Source, Pagination, error)
	GetSource(id string) (model.Source, error)
	GetSourceMTTR(id string) (float32, error)

	ListTargets(filter Filter) ([]model.Target, Pagination, error)
	TargetsSummary(filter Filter) ([]model.TargetSummary, Pagination, error)
	GetTarget(id string) (model.Target, error)
	GetTargetMTTR(id string) (float32, error)
	CreateTarget(target model.Target) (model.Target, error)
	DeleteTargetTag(targetID, tag string) error
	DeleteTag(tag string) error

	ListIssues(filter Filter) ([]model.Issue, Pagination, error)
	IssuesSummary(filter Filter) ([]model.IssueSummary, Pagination, error)
	GetIssue(id string) (model.Issue, error)
	GetIssueMTTR(id string) (float32, error)

	ListFindings(filter Filter) ([]model.FindingExpanded, Pagination, error)
	GetFinding(id string) (model.FindingExpanded, error)
	GetFindingFromTargetIssue(targetID, affectedResource, issueID string) (model.FindingExpanded, error)
	ListFindingsByTarget(id string, filter Filter) ([]model.FindingExpanded, Pagination, error)
	ListFindingsByIssue(id string, filter Filter) ([]model.FindingExpanded, Pagination, error)
	ListFindingsBySource(id string, filter Filter) ([]model.FindingExpanded, Pagination, error)
	ListFindingEventsByFinding(id string, filter Filter) ([]model.FindingEvent, Pagination, error)
	GetFindingMTTR(id string) (float32, error)
	PatchFinding(id string, payload model.PatchFindingPayload) error

	ListFindingEvents(filter Filter) ([]model.FindingEvent, Pagination, error)

	StatsSize() (model.StatsSize, error)
	StatsOpenIssues(filter Filter) (model.StatsIssueSeverity, error)
	StatsFixedIssues(filter Filter) (model.StatsIssueSeverity, error)
	StatsIssues(filter Filter) ([]model.Issue, Pagination, error)
	StatsMTTR(filter Filter) (model.StatsMTTRSeverity, error)
	StatsExposure(filter Filter) (model.StatsExposure, error)
}

// Offset calculates the offset required for a given page and limit.
func Offset(page int, limit int) int {
	return (page - 1) * limit
}
