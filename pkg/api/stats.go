/*
Copyright 2020 Adevinta
*/

package api

import (
	"net/http"

	"github.com/labstack/echo/v4"
)

// StatsSize returns statistics about the size of each data set.
func (api *API) StatsSize(c echo.Context) error {
	stats, err := api.storage.StatsSize()
	if err != nil {
		return err
	}

	return response(c, http.StatusOK, stats, "size")
}

// StatsOpenIssues returns statistics about the number of OPEN findings for each issue severity.
func (api *API) StatsOpenIssues(c echo.Context) error {
	filter, err := api.parseFilter(c)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	stats, err := api.storage.StatsOpenIssues(filter)
	if err != nil {
		return err
	}

	return response(c, http.StatusOK, stats, "open_issues")
}

// StatsFixedIssues returns statistics about the number of FIXED findings for each issue severity.
func (api *API) StatsFixedIssues(c echo.Context) error {
	filter, err := api.parseFilter(c)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	stats, err := api.storage.StatsFixedIssues(filter)
	if err != nil {
		return err
	}

	return response(c, http.StatusOK, stats, "fixed_issues")
}

// StatsIssues returns a paginated JSON containing issues from a set of finding events.
func (api *API) StatsIssues(c echo.Context) error {
	filter, err := api.parseFilter(c)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	issues, pagination, err := api.storage.StatsIssues(filter)
	if err != nil {
		return err
	}

	return response(c, http.StatusOK, issues, "issues", pagination)
}

// StatsMTTR returns statistics about the mean time to remediate for each issue severity.
func (api *API) StatsMTTR(c echo.Context) error {
	filter, err := api.parseFilter(c)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	stats, err := api.storage.StatsMTTR(filter)
	if err != nil {
		return err
	}

	return response(c, http.StatusOK, stats, "mttr")
}

// StastExposure returns statistics about the exposure times matching specific filters.
func (api *API) StatsExposure(c echo.Context) error {
	filter, err := api.parseFilter(c)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	stats, err := api.storage.StatsExposure(filter)
	if err != nil {
		return err
	}

	return response(c, http.StatusOK, stats, "exposure")
}
