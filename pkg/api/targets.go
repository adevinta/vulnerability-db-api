package api

import (
	"net/http"

	"github.com/labstack/echo"
)

// ListTargets returns a paginated JSON containing targets.
func (api *API) ListTargets(c echo.Context) error {
	filter, err := api.parseFilter(c)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	targets, pagination, err := api.storage.ListTargets(filter)
	if err != nil {
		return err
	}

	return response(c, targets, "targets", pagination)
}

// TargetsSummary returns a summary of findings count and score by target.
func (api *API) TargetsSummary(c echo.Context) error {
	filter, err := api.parseFilter(c)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	assets, pagination, err := api.storage.TargetsSummary(filter)
	if err != nil {
		return err
	}

	return response(c, assets, "targets", pagination)
}

// GetTarget returns a JSON containing a specific target.
func (api *API) GetTarget(c echo.Context) error {
	id := c.Param("id")

	target, err := api.storage.GetTarget(id)
	if err != nil {
		return err
	}

	if target.ID == "" {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	return response(c, target, "target")
}

// GetTargetMTTR returns a JSON containing the mean time to remediate findings in a target.
func (api *API) GetTargetMTTR(c echo.Context) error {
	id := c.Param("id")

	mttr, err := api.storage.GetTargetMTTR(id)
	if err != nil {
		return err
	}

	if mttr == 0 {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	return response(c, mttr, "mttr")
}

// DeleteTargetTag deletes the association between a target and a tag.
func (api *API) DeleteTargetTag(c echo.Context) error {
	targetID := c.Param("target_id")
	tag := c.Param("tag")

	err := api.storage.DeleteTargetTag(targetID, tag)
	if err != nil {
		return err
	}

	return response(c, nil, "")
}

// DeleteTag deletes all target associations for a tag.
func (api *API) DeleteTag(c echo.Context) error {
	tag := c.Param("tag")

	err := api.storage.DeleteTag(tag)
	if err != nil {
		return err
	}

	return response(c, nil, "")
}
