/*
Copyright 2020 Adevinta
*/

package api

import (
	"database/sql"
	"errors"
	"net/http"

	"github.com/adevinta/vulnerability-db-api/pkg/model"
	"github.com/labstack/echo/v4"
)

// ListTargets returns a paginated JSON containing targets.
func (api *API) ListTargets(c echo.Context) error {
	filter, err := api.parseFilter(c)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	targets, pagination, err := api.storage.ListTargets(filter)
	if err != nil {
		return err
	}

	return response(c, http.StatusOK, targets, "targets", pagination)
}

// CreateTarget creates a new target or, if the target already exists,
// associates the given teams and tags to it.
func (api *API) CreateTarget(c echo.Context) error {
	payload := new(model.Target)
	if err := c.Bind(payload); err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	if payload.Identifier == "" {
		return echo.NewHTTPError(http.StatusUnprocessableEntity, "identifier can not be void")
	}
	if payload.Tags == nil {
		payload.Tags = []string{}
	}
	if payload.Teams == nil {
		payload.Teams = []string{}
	}

	target, err := api.storage.CreateTarget(*payload)
	if err != nil {
		return err
	}

	return response(c, http.StatusCreated, target, "target")
}

// TargetsSummary returns a summary of findings count and score by target.
func (api *API) TargetsSummary(c echo.Context) error {
	filter, err := api.parseFilter(c)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, err.Error())
	}

	assets, pagination, err := api.storage.TargetsSummary(filter)
	if err != nil {
		return err
	}

	return response(c, http.StatusOK, assets, "targets", pagination)
}

// GetTarget returns a JSON containing a specific target.
func (api *API) GetTarget(c echo.Context) error {
	id := c.Param("id")

	target, err := api.storage.GetTarget(id)
	if err != nil {
		return err
	}

	if target.ID == "" {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	return response(c, http.StatusOK, target, "target")
}

// GetTargetMTTR returns a JSON containing the mean time to remediate findings in a target.
func (api *API) GetTargetMTTR(c echo.Context) error {
	id := c.Param("id")

	mttr, err := api.storage.GetTargetMTTR(id)
	if err != nil {
		return err
	}

	if mttr == 0 {
		return echo.NewHTTPError(http.StatusNotFound)
	}

	return response(c, http.StatusOK, mttr, "mttr")
}

// DeleteTargetTeam deletes the association between a target and a team.
func (api *API) DeleteTargetTeam(c echo.Context) error {
	targetID := c.Param("target_id")
	teamID := c.Param("team")

	err := api.storage.DeleteTargetTeam(targetID, teamID)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return echo.NewHTTPError(http.StatusNotFound)
		}
		return err
	}

	return response(c, http.StatusOK, nil, "")
}

// DeleteTeam deletes all target associations for a team.
func (api *API) DeleteTeam(c echo.Context) error {
	teamID := c.Param("team")

	err := api.storage.DeleteTeam(teamID)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return echo.NewHTTPError(http.StatusNotFound)
		}
		return err
	}

	return response(c, http.StatusOK, nil, "")
}

// DeleteTargetTag deletes the association between a target and a tag.
func (api *API) DeleteTargetTag(c echo.Context) error {
	targetID := c.Param("target_id")
	tag := c.Param("tag")

	err := api.storage.DeleteTargetTag(targetID, tag)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return echo.NewHTTPError(http.StatusNotFound)
		}
		return err
	}

	return response(c, http.StatusOK, nil, "")
}

// DeleteTag deletes all target associations for a tag.
func (api *API) DeleteTag(c echo.Context) error {
	tag := c.Param("tag")

	err := api.storage.DeleteTag(tag)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return echo.NewHTTPError(http.StatusNotFound)
		}
		return err
	}

	return response(c, http.StatusOK, nil, "")
}

// DeleteTeamTag deletes all target associations for a tag only for a specific team.
func (api *API) DeleteTeamTag(c echo.Context) error {
	teamID := c.Param("team")
	tag := c.Param("tag")

	err := api.storage.DeleteTeamTag(teamID, tag)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return echo.NewHTTPError(http.StatusNotFound)
		}
		return err
	}

	return response(c, http.StatusOK, nil, "")
}
