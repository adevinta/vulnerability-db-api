package test

import (
	"bytes"
	"encoding/json"
	"io/ioutil"
	"net/http/httptest"
	"testing"

	"github.com/adevinta/vulnerability-db-api/pkg/storage/postgresql"
)

// MockDB composes on top of PosgreSQL to avoid implementing untested methods.
type MockDB struct {
	postgresql.DB
}

const (
	// MaxSize defines a maximum result size for tests.
	MaxSize = 100
	// DefaultSize defines a default result size for tests.
	DefaultSize = 20
	// NonExistingID represents a ID that does not exist.
	NonExistingID = "00000000-0000-0000-0000-000000000000"
)

// Options holds test configuration options for the API.
var Options = struct {
	MaxSize     int
	DefaultSize int
}{
	MaxSize:     MaxSize,
	DefaultSize: DefaultSize,
}

// Case represents a sub-test case for the API.
type Case struct {
	Name       string
	RequestURI string
	Test       func(*testing.T, *httptest.ResponseRecorder)
}

// JSONObject retrieves a JSON object from a ResponseRecorder into a struct or fails the test.
func JSONObject(t *testing.T, rec *httptest.ResponseRecorder, field string, element interface{}) {
	body, err := ioutil.ReadAll(rec.Body)
	if err != nil {
		t.Error(err)
	}
	rec.Body = bytes.NewBuffer(body)

	var data map[string]json.RawMessage
	json.Unmarshal(body, &data)

	json.Unmarshal(data[field], &element)
}
