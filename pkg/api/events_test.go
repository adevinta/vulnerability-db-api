/*
Copyright 2020 Adevinta
*/

package api

import (
	"net/http"
	"net/http/httptest"
	"testing"

	"github.com/adevinta/vulnerability-db-api/pkg/api/test"
	"github.com/adevinta/vulnerability-db-api/pkg/model"
	"github.com/adevinta/vulnerability-db-api/pkg/storage"
	"github.com/labstack/echo/v4"
	"github.com/stretchr/testify/assert"
)

type eventsDB test.MockDB

func (db eventsDB) ListFindingEvents(filter storage.Filter) ([]model.FindingEvent, storage.Pagination, error) {
	var events []model.FindingEvent

	for _, e := range test.FindingEvents {
		if filter.Status == "" {
			events = append(events, e)
		}
	}
	offset := storage.Offset(filter.Page, filter.Size)
	return test.FindingEvents, storage.Pagination{Limit: filter.Size, Offset: offset, Total: len(test.FindingEvents)}, nil
}

func TestListFindingEvents(t *testing.T) {
	tcs := []test.Case{
		{
			Name:       "ListFindingEvents",
			RequestURI: "/events",
			Test: func(tc *testing.T, rec *httptest.ResponseRecorder) {
				var events []model.FindingEvent
				test.JSONObject(tc, rec, "events", &events)

				assert.Equal(tc, http.StatusOK, rec.Code)
				assert.Equal(tc, test.FindingEvents, events)
			},
		},
		{
			Name:       "ListFindingEventsWithPagination",
			RequestURI: "/events?page=1",
			Test: func(tc *testing.T, rec *httptest.ResponseRecorder) {
				var events []model.FindingEvent
				test.JSONObject(tc, rec, "events", &events)
				var pagination Pagination
				test.JSONObject(tc, rec, "pagination", &pagination)

				assert.Equal(tc, http.StatusOK, rec.Code)
				assert.Equal(tc, test.FindingEvents, events)
				assert.Equal(tc, false, pagination.More)
				assert.Equal(tc, test.DefaultSize, pagination.Limit)
			},
		},
		{
			Name:       "ListFindingEventsWithPaginationZero",
			RequestURI: "/events?page=0",
			Test: func(tc *testing.T, rec *httptest.ResponseRecorder) {
				var events []model.FindingEvent
				test.JSONObject(tc, rec, "events", &events)
				var pagination Pagination
				test.JSONObject(tc, rec, "pagination", &pagination)

				assert.Equal(tc, http.StatusBadRequest, rec.Code)
				assert.Equal(tc, 0, len(events))
				assert.Equal(tc, false, pagination.More)
				assert.Equal(tc, 0, pagination.Limit)
			},
		},
		{
			Name:       "ListFindingEventsWithPaginationOverflown",
			RequestURI: "/events?page=100",
			Test: func(tc *testing.T, rec *httptest.ResponseRecorder) {
				var events []model.FindingEvent
				test.JSONObject(tc, rec, "events", &events)
				var pagination Pagination
				test.JSONObject(tc, rec, "pagination", &pagination)

				assert.Equal(tc, http.StatusNotFound, rec.Code)
				assert.Equal(tc, 0, len(events))
				assert.Equal(tc, false, pagination.More)
				assert.Equal(tc, 0, pagination.Limit)
			},
		},
		{
			Name:       "ListFindingEventsWithPaginationMalformed",
			RequestURI: "/events?page=malformed",
			Test: func(tc *testing.T, rec *httptest.ResponseRecorder) {
				var events []model.FindingEvent
				test.JSONObject(tc, rec, "events", &events)
				var pagination Pagination
				test.JSONObject(tc, rec, "pagination", &pagination)

				assert.Equal(tc, http.StatusBadRequest, rec.Code)
				assert.Equal(tc, 0, len(events))
				assert.Equal(tc, false, pagination.More)
				assert.Equal(tc, 0, pagination.Limit)
			},
		},
	}

	e := echo.New()
	a := New(eventsDB{}, test.Options)
	e.GET("/events", a.ListFindingEvents)

	for _, tc := range tcs {
		t.Run(tc.Name, func(t *testing.T) {
			req := httptest.NewRequest(http.MethodGet, tc.RequestURI, nil)
			rec := httptest.NewRecorder()
			e.ServeHTTP(rec, req)
			tc.Test(t, rec)
		})
	}
}
