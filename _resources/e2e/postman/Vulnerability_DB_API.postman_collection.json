{
	"info": {
		"_postman_id": "29f9e56c-d595-4ba0-839e-fa84ac15ffe0",
		"name": "Vulnerability DB API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Issues",
			"item": [
				{
					"name": "List issues",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fa3b9a2e-b41e-44a1-a8b1-503015bffe89",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(20, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(24, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "List issues - page 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba54ed13-c95f-44ae-bf6b-72b057f35550",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(20, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(24, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues?page=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List issues - page 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d5ab00e2-b8ac-4f3c-83f2-1dae891decf6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(4, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(20,'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(24,'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues?page=2",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List issues - size 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b5aa337e-2858-4e55-a514-7c76d6250e15",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(5, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(5, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(24, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues?size=5",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues"
							],
							"query": [
								{
									"key": "size",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List issues - size 5, page 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4358a289-a13a-4fb2-a1bd-e3c767f995e4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(5, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(5, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(24, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues?size=5&page=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues"
							],
							"query": [
								{
									"key": "size",
									"value": "5"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List issues - size 5, page 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2444a8ae-1fa6-4646-a004-bd4a6843a09e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(4, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(5, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(20, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(24, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues?size=5&page=5",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues"
							],
							"query": [
								{
									"key": "size",
									"value": "5"
								},
								{
									"key": "page",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "539e8b50-1b4f-487a-a33a-78000cb66a93",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(20, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(24, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary - Order by max_score desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7f94c721-4b41-45e1-8f29-62c5317b91f3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(20, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(24, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?sortBy=-max_score",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "-max_score"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary - Order by targets count asc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b6ae04a2-1cee-450f-bfcf-ba7ed34aa29f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(20, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousCount = 0;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].targets_count).to.be.gte(previousCount, 'Order is not correct');",
									"        previousCount = jsonData.issues[i].targets_count;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(24, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?sortBy=targets_count",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "targets_count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary - OPEN, atDate: 2019-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9dd8203d-87cc-4238-bafe-123461edd172",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(0, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?tag=sdrn:adevinta:team:cori&atDate=2019-01-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:cori"
								},
								{
									"key": "atDate",
									"value": "2019-01-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary - OPEN, atDate: 2019-04-11",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "758d5348-4546-41f8-b616-edef44452e72",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(2, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(2, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?tag=sdrn:adevinta:team:cori&atDate=2019-04-11&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:cori"
								},
								{
									"key": "atDate",
									"value": "2019-04-11"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary - FIXED, atDate: 2019-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c772aad7-763b-44e2-93fd-e598a234d694",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(0, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?tag=sdrn:adevinta:team:cori&atDate=2019-01-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:cori"
								},
								{
									"key": "atDate",
									"value": "2019-01-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary - FIXED, atDate: 2019-04-11",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a330feaf-4d92-454e-b9c5-5a248272bd70",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(0, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?tag=sdrn:adevinta:team:cori&atDate=2019-04-11&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:cori"
								},
								{
									"key": "atDate",
									"value": "2019-04-11"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary - OPEN, minDate: 2019-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d913fbfa-b0ab-4cc3-a72c-32b033623dd0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(2, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(2, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?tag=sdrn:adevinta:team:cori&minDate=2019-01-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:cori"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary - FIXED, minDate: 2019-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2a7a536e-7b43-4ea2-8f76-2cf4e91d3489",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(0, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?tag=sdrn:adevinta:team:cori&minDate=2019-01-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:cori"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary - OPEN, minDate: 2019-01-01, maxDate: 2019-01-30",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0c5cbd85-9564-4eb1-9d1a-ad7302be487a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(0, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?tag=sdrn:adevinta:team:cori&minDate=2019-01-01&maxDate=2019-01-30&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:cori"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "maxDate",
									"value": "2019-01-30"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary - OPEN, minDate: 2019-01-01, maxDate: 2019-11-30",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a0d2349e-68ba-4916-9139-f09245b9ff91",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(2, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(2, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?tag=sdrn:adevinta:team:cori&minDate=2019-01-01&maxDate=2019-11-30&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:cori"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "maxDate",
									"value": "2019-11-30"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary - FIXED, minDate: 2019-01-01, maxDate: 2019-01-30",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f7559030-32f2-4188-9f01-44d2e779b998",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(0, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?tag=sdrn:adevinta:team:cori&minDate=2019-01-01&maxDate=2019-01-30&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:cori"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "maxDate",
									"value": "2019-01-30"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary - FIXED, minDate: 2019-01-01, maxDate: 2019-11-30",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4e61839b-6d1a-450e-8a2b-e2dd43a6b3ce",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(0, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?tag=sdrn:adevinta:team:cori&minDate=2019-01-01&maxDate=2019-11-30&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:cori"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "maxDate",
									"value": "2019-11-30"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary - OPEN, maxDate: 2019-11-30",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "66ca6d06-c14c-44c9-a065-b39e96c2a82a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(2, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(2, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?tag=sdrn:adevinta:team:cori&maxDate=2019-11-30&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:cori"
								},
								{
									"key": "maxDate",
									"value": "2019-11-30"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary - FIXED, maxDate: 2019-11-30",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a708caea-505d-4dda-98da-b30fe2652cb7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(0, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?tag=sdrn:adevinta:team:cori&maxDate=2019-11-30&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:cori"
								},
								{
									"key": "maxDate",
									"value": "2019-11-30"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary - for tag kemp",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "03cff207-e3e4-4abb-aeb9-184deb13c178",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(1, 'Wrong issues array length');",
									"",
									"    pm.expect(jsonData.issues[0].issue_id).to.eql('36bc8869-45be-4abb-876f-965d21ee9976', 'Wrong issue_id');",
									"    pm.expect(jsonData.issues[0].summary).to.eql('Certificate Signed With Weak Algorithm', 'Wrong summary');",
									"    pm.expect(jsonData.issues[0].targets_count).to.eql(1, 'Wrong targets count');",
									"    pm.expect(jsonData.issues[0].max_score).to.eql(5, 'max_score');",
									"",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?tag=sdrn:adevinta:team:kemp",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:kemp"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "51e8d7ad-4ee1-4f99-aff9-3666adffbda9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issue data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issue).to.be.an('object');",
									"    pm.expect(jsonData.issue).to.have.property('id');",
									"    pm.expect(jsonData.issue).to.have.property('summary').to.be.not.empty;",
									"    pm.expect(jsonData.issue).to.have.property('cwe_id');",
									"    pm.expect(jsonData.issue).to.have.property('description');",
									"    pm.expect(jsonData.issue).to.have.property('recommendations');",
									"    pm.expect(jsonData.issue).to.have.property('reference_links');",
									"",
									"    pm.expect(jsonData.issue.id).to.be.eql('c10c3b0b-2dca-4b1d-a9b5-766bc0414e35', 'id');",
									"    pm.expect(jsonData.issue.summary).to.be.eql('HTTP Content Security Policy Not Implemented', 'summary');",
									"    pm.expect(jsonData.issue.cwe_id).to.be.eql(358, 'cwe_id');",
									"    pm.expect(jsonData.issue.description).to.contains('Content Security Policy (CSP) is an HTTP header', 'description');",
									"",
									"    pm.expect(jsonData.issue.recommendations).to.be.an('array', 'recommendations')",
									"    pm.expect(jsonData.issue.recommendations).to.have.lengthOf(3, 'recommendations')",
									"    pm.expect(jsonData.issue.recommendations).to.include('Implement a well-formed and correct CSP policy for this site.', 'recommendations');",
									"",
									"    pm.expect(jsonData.issue.reference_links).to.be.an('array', 'reference_links')",
									"    pm.expect(jsonData.issue.reference_links).to.have.lengthOf(4, 'reference_links')",
									"    pm.expect(jsonData.issue.reference_links).to.include('https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP', 'reference_links');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/c10c3b0b-2dca-4b1d-a9b5-766bc0414e35",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"c10c3b0b-2dca-4b1d-a9b5-766bc0414e35"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get issue - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc766c07-6834-423e-aa0d-5f00645a2f34",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.be.eql('Not Found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/aaaaa",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"aaaaa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get MTTR for an issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bbdf0d7b-7be0-4726-b28c-6c3d73575f5e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"MTTR data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('mttr').to.be.eql(744);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/c6a1099c-6141-415c-8fd8-30d68aedb90c/mttr",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"c6a1099c-6141-415c-8fd8-30d68aedb90c",
								"mttr"
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ba2aafa7-7c0d-4ecb-ba77-e4e52cfd30d1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(3, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(3, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/c6a1099c-6141-415c-8fd8-30d68aedb90c/findings",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"c6a1099c-6141-415c-8fd8-30d68aedb90c",
								"findings"
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by issue - OPEN",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f31a782e-b622-4d85-a603-78eefd363d9e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(3, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(3, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/c6a1099c-6141-415c-8fd8-30d68aedb90c/findings?status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"c6a1099c-6141-415c-8fd8-30d68aedb90c",
								"findings"
							],
							"query": [
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by issue - FIXED",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "80dbe39c-3710-4d74-bc28-afc7d2757fee",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/c6a1099c-6141-415c-8fd8-30d68aedb90c/findings?status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"c6a1099c-6141-415c-8fd8-30d68aedb90c",
								"findings"
							],
							"query": [
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by issue 2 - OPEN",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ac6c70f0-a53c-4404-8b2b-aa869259c5c9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/de46679a-b767-4dbd-909a-9b2bc5d647f9/findings?status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"de46679a-b767-4dbd-909a-9b2bc5d647f9",
								"findings"
							],
							"query": [
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by issue 2 - FIXED",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "acbe2747-bee3-4cb3-b551-24d16746fabf",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/de46679a-b767-4dbd-909a-9b2bc5d647f9/findings?status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"de46679a-b767-4dbd-909a-9b2bc5d647f9",
								"findings"
							],
							"query": [
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by issue - Sort by score asc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "593906d1-b135-4ed1-ba25-63b8da43cc74",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(3, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings order is correct\", function () {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.findings[0].score).to.eql(1, 'test_order');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(3, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/6a553190-9e12-4df8-9af2-090186f12c34/findings?sortBy=score",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"6a553190-9e12-4df8-9af2-090186f12c34",
								"findings"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "score"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by issue - Sort by score desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cf240b3f-c188-451a-9286-558370a13026",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(2, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings order is correct\", function () {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.findings[0].score).to.eql(5, 'test_order');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(2, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/36bc8869-45be-4abb-876f-965d21ee9976/findings?sortBy=-score",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"36bc8869-45be-4abb-876f-965d21ee9976",
								"findings"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "-score"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by issue and target",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e847f098-342a-4af8-8cbd-0be5928ead9a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.finding).to.be.an('Object');",
									"    pm.expect(jsonData.finding).to.have.property('id');",
									"    pm.expect(jsonData.finding).to.have.property('details');",
									"    pm.expect(jsonData.finding).to.have.property('impact_details');",
									"    pm.expect(jsonData.finding).to.have.property('status');",
									"    pm.expect(jsonData.finding).to.have.property('score');",
									"    pm.expect(jsonData.finding).to.have.property('total_exposure');",
									"    if (jsonData.finding.status===\"OPEN\"){",
									"        pm.expect(jsonData.finding).to.have.property('current_exposure');",
									"    }",
									"        pm.expect(jsonData.finding).to.have.property('resources');",
									"        pm.expect(jsonData.finding.resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.finding).to.have.property('issue');",
									"        pm.expect(jsonData.finding.issue).to.be.an('Object');",
									"        pm.expect(jsonData.finding.issue).to.have.property('id');",
									"        pm.expect(jsonData.finding.issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.finding.issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.finding.issue).to.have.property('description');",
									"        pm.expect(jsonData.finding.issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.finding.issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.finding).to.have.property('target');",
									"        pm.expect(jsonData.finding.target).to.be.an('Object');",
									"        pm.expect(jsonData.finding.target).to.have.property('id');",
									"        pm.expect(jsonData.finding.target).to.have.property('identifier');",
									"        pm.expect(jsonData.finding.target).to.have.property('tags');",
									"        pm.expect(jsonData.finding.target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.finding.target.tags.length;j++){",
									"            pm.expect(jsonData.finding.target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.finding).to.have.property('source');",
									"        pm.expect(jsonData.finding.source).to.be.an('Object');",
									"        pm.expect(jsonData.finding.source).to.have.property('id');",
									"        pm.expect(jsonData.finding.source).to.have.property('name');",
									"        pm.expect(jsonData.finding.source).to.have.property('component');",
									"        pm.expect(jsonData.finding.source).to.have.property('instance');",
									"        pm.expect(jsonData.finding.source).to.have.property('options');",
									"        pm.expect(jsonData.finding.source).to.have.property('time');",
									"        ",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.finding).to.have.property('id').to.be.eql('3c54f23c-8749-45c2-81c2-50dbb7b6e19a');",
									"    pm.expect(jsonData.finding).to.have.property('details').to.contains('Global score given by Mozilla Observatory');",
									"    pm.expect(jsonData.finding).to.have.property('issue').to.have.property('summary').to.contains('Mozilla HTTP Observatory');",
									"    pm.expect(jsonData.finding).to.have.property('target').to.have.property('identifier').to.contains('sweet.khayyam.adevinta.com');",
									"    pm.expect(jsonData.finding).to.have.property('source').to.have.property('instance').to.be.eql('0edf04e8-554b-4905-80b4-985492a8ff71');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/c6a1099c-6141-415c-8fd8-30d68aedb90c/targets/dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"c6a1099c-6141-415c-8fd8-30d68aedb90c",
								"targets",
								"dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Targets",
			"item": [
				{
					"name": "List targets",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1264ea73-0675-4caa-ac35-87ea9421b497",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(20, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('tags');",
									"        pm.expect(jsonData.targets[i].tags).to.be.an('array');",
									"        for (j=0; j<jsonData.targets[i].tags.length;j++){",
									"            pm.expect(jsonData.targets[i].tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.targets[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(25, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets"
							]
						}
					},
					"response": []
				},
				{
					"name": "List targets - matching identifier",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e623f706-ac11-4941-8d72-79472a243d91",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('tags');",
									"        pm.expect(jsonData.targets[i].tags).to.be.an('array');",
									"        for (j=0; j<jsonData.targets[i].tags.length;j++){",
									"            pm.expect(jsonData.targets[i].tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.targets[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets?identifier=cool.galileo.adevinta.com&identifiermatch=true",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets"
							],
							"query": [
								{
									"key": "identifier",
									"value": "cool.galileo.adevinta.com"
								},
								{
									"key": "identifiermatch",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List All findings - like identifier",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(31, 'Wrong array length');",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(31, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?identifier=adevinta.com",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "identifier",
									"value": "adevinta.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List targets - page 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3dae142d-42ac-4676-9479-b924076130ef",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(20, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('tags');",
									"        pm.expect(jsonData.targets[i].tags).to.be.an('array');",
									"        for (j=0; j<jsonData.targets[i].tags.length;j++){",
									"            pm.expect(jsonData.targets[i].tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.targets[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(25, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets?page=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List targets - page 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb4581f9-7a3c-40da-a64a-7e6da18d2290",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(5, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('tags');",
									"        pm.expect(jsonData.targets[i].tags).to.be.an('array');",
									"        for (j=0; j<jsonData.targets[i].tags.length;j++){",
									"            pm.expect(jsonData.targets[i].tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.targets[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(20,'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(25,'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets?page=2",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List targets - size 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fb586f42-8a8f-45a7-8395-cf2885446f4d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(5, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('tags');",
									"        pm.expect(jsonData.targets[i].tags).to.be.an('array');",
									"        for (j=0; j<jsonData.targets[i].tags.length;j++){",
									"            pm.expect(jsonData.targets[i].tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.targets[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(5, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(25, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets?size=5",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets"
							],
							"query": [
								{
									"key": "size",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List targets - size 5, page 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3cf860c4-3e70-48c5-af16-4d84051f1d31",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(5, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('tags');",
									"        pm.expect(jsonData.targets[i].tags).to.be.an('array');",
									"        for (j=0; j<jsonData.targets[i].tags.length;j++){",
									"            pm.expect(jsonData.targets[i].tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.targets[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(5, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(25, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets?size=5&page=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets"
							],
							"query": [
								{
									"key": "size",
									"value": "5"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List targets - size 5, page 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1826a0d8-f6e9-44b9-881f-e90d5b1bb4d1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(5, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('tags');",
									"        pm.expect(jsonData.targets[i].tags).to.be.an('array');",
									"        for (j=0; j<jsonData.targets[i].tags.length;j++){",
									"            pm.expect(jsonData.targets[i].tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.targets[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(5, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(20, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(25, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets?size=5&page=5",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets"
							],
							"query": [
								{
									"key": "size",
									"value": "5"
								},
								{
									"key": "page",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List targets by tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c1e629c7-d8a8-41bd-ab25-caaed3f67214",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('id').to.be.eql('dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier').to.be.eql('sweet.khayyam.adevinta.com');",
									"        pm.expect(jsonData.targets[i]).to.have.property('tags');",
									"        pm.expect(jsonData.targets[i].tags).to.be.an('array');",
									"        for (j=0; j<jsonData.targets[i].tags.length;j++){",
									"            pm.expect(jsonData.targets[i].tags[j]).to.be.an('string').to.be.eql('sdrn:adevinta:team:jang');",
									"        }",
									"        ",
									"        pm.expect(jsonData.targets[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1);",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets?tag=sdrn:adevinta:team:jang",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:jang"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List targets by tag - Not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3ffb2550-ff5d-437e-8b1e-483a80536d1c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0);",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets?tag=aaaaa",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets"
							],
							"query": [
								{
									"key": "tag",
									"value": "aaaaa"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List targets by identifier",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b881e1a1-2aa7-46ca-9bd1-99cfc5bb9fbf",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(1, 'Wrong array length');",
									"",
									"    pm.expect(jsonData.targets[0]).to.have.property('id').to.be.eql('e49b1b46-fb19-409f-b40d-9c2721b7b7bd');",
									"    pm.expect(jsonData.targets[0]).to.have.property('identifier').to.be.eql('magical.almeida.adevinta.com');",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1);",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets?identifier=magical",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets"
							],
							"query": [
								{
									"key": "identifier",
									"value": "magical"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List targets by identifier - Not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1a06e690-0797-4255-bc55-81f41d35ccdb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0);",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets?identifier=aaaaa",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets"
							],
							"query": [
								{
									"key": "identifier",
									"value": "aaaaa"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4d3acae7-f5a8-4f5e-91d0-5b3b3c96431d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(20, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(25, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary - Order by max_score desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a34c4b30-b4e1-4be6-bd87-42f1d77fd419",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(20, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(25, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?sortBy=-max_score",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "-max_score"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary - Order by findings_count asc page 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed349440-c913-4f75-8b40-726d3c53edf6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(5, 'Wrong array length');",
									"    previousID = '';",
									"    previousCount = 0;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].findings_count).to.be.gte(previousCount, 'Order is not correct');",
									"        previousCount = jsonData.targets[i].findings_count;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(20, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(25, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?sortBy=findings_count&page=2",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "findings_count"
								},
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary - OPEN, atDate: 2019-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2cb24edf-09f1-4bfd-b6ab-73bdddcff85c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?tag=sdrn:adevinta:team:cori&atDate=2019-01-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:cori"
								},
								{
									"key": "atDate",
									"value": "2019-01-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary - OPEN, atDate: 2019-04-11",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2d66ef9-21ae-4154-93d9-c5f1fa5bfbb5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?tag=sdrn:adevinta:team:cori&atDate=2019-04-11&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:cori"
								},
								{
									"key": "atDate",
									"value": "2019-04-11"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary - FIXED, atDate: 2019-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ca584040-e692-44fe-a835-1c2eb03342f5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?tag=sdrn:adevinta:team:cori&atDate=2019-01-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:cori"
								},
								{
									"key": "atDate",
									"value": "2019-01-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary - FIXED, atDate: 2019-04-11",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ae89deec-27fc-4dd5-b6ed-e8e35ccd7fa2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?tag=sdrn:adevinta:team:cori&atDate=2019-04-11&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:cori"
								},
								{
									"key": "atDate",
									"value": "2019-04-11"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary - OPEN, minDate: 2019-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2546d20a-7389-4372-9064-3702aa0967ed",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?tag=sdrn:adevinta:team:cori&minDate=2019-01-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:cori"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary - FIXED, minDate: 2019-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5f4f5dee-466f-4691-9175-6d281de1d024",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?tag=sdrn:adevinta:team:cori&minDate=2019-01-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:cori"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary - OPEN, minDate: 2019-01-01, maxDate: 2019-01-30",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d29d6a8b-563b-4be2-9d3f-1fbc70b8c616",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?tag=sdrn:adevinta:team:cori&minDate=2019-01-01&maxDate=2019-01-30&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:cori"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "maxDate",
									"value": "2019-01-30"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary - OPEN, minDate: 2019-01-01, maxDate: 2019-11-30",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f6c7d99f-7cb0-4ec1-bc94-2f98e2291b47",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?tag=sdrn:adevinta:team:cori&minDate=2019-01-01&maxDate=2019-11-30&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:cori"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "maxDate",
									"value": "2019-11-30"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary - FIXED, minDate: 2019-01-01, maxDate: 2019-01-30",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7fbd8b52-438a-4b0a-8b4e-32bbc6ef44f0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?tag=sdrn:adevinta:team:cori&minDate=2019-01-01&maxDate=2019-01-30&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:cori"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "maxDate",
									"value": "2019-01-30"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary - FIXED, minDate: 2019-01-01, maxDate: 2019-11-30",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b18fa473-90ae-436c-bde8-13cc377a38a4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?tag=sdrn:adevinta:team:cori&minDate=2019-01-01&maxDate=2019-11-30&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:cori"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "maxDate",
									"value": "2019-11-30"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary - OPEN, maxDate: 2019-11-30",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "40d7d3ea-77b5-4ae9-ae3b-4629ce5cec73",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?tag=sdrn:adevinta:team:cori&maxDate=2019-11-30&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:cori"
								},
								{
									"key": "maxDate",
									"value": "2019-11-30"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary - FIXED, maxDate: 2019-11-30",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "eb50e1ae-361f-493b-ac68-be86b4d79e1f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?tag=sdrn:adevinta:team:cori&maxDate=2019-11-30&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:cori"
								},
								{
									"key": "maxDate",
									"value": "2019-11-30"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary - for tag kemp",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f7d9c718-6c15-4fd8-b18b-b8c06eba9eff",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(1, 'Wrong array length');",
									"",
									"    pm.expect(jsonData.targets[0].target_id).to.eql('bd5db9d0-1f05-40ea-bb4c-2e8288b90d13', 'Wrong target_id');",
									"    pm.expect(jsonData.targets[0].identifier).to.eql('adventurous.marky.adevinta.com', 'Wrong identifier');",
									"    pm.expect(jsonData.targets[0].findings_count).to.eql(1, 'Wrong findings_count');",
									"    pm.expect(jsonData.targets[0].max_score).to.eql(5, 'Wrong max_score');",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(00, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?tag=sdrn:adevinta:team:kemp",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:kemp"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get target",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "69d3beba-b09a-408f-9781-25430f461028",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Target data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.target).to.have.property('id').to.be.eql('dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352');",
									"    pm.expect(jsonData.target).to.have.property('identifier').to.be.eql('sweet.khayyam.adevinta.com');",
									"    pm.expect(jsonData.target).to.have.property('tags');",
									"    pm.expect(jsonData.target.tags).to.be.an('array');",
									"    pm.expect(jsonData.target.tags.length).to.be.eql(1)",
									"    pm.expect(jsonData.target.tags[0]).to.be.eql('sdrn:adevinta:team:jang')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get target - Not Foud",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "27a198b4-6b09-41db-8b71-9dc635e5d34e",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.be.eql('Not Found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/aaaaa",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"aaaaa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get MTTR for a target",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b3086aec-8570-490a-91c7-2d62ecad152c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"MTTR data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('mttr').to.be.eql(1465);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/f26e803e-d03f-4329-a056-6451ba053c6b/mttr",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"f26e803e-d03f-4329-a056-6451ba053c6b",
								"mttr"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get MTTR for a target - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a7944ec1-818a-49ac-abd5-7b639b48dc99",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.be.eql('Not Found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352/mttr",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352",
								"mttr"
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by target",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "36269f55-db46-4f52-aea0-a5daed6bd9be",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352/findings",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352",
								"findings"
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by target - OPEN",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "adb17c22-590d-4adb-98a1-8f8c4f41446b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352/findings?status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352",
								"findings"
							],
							"query": [
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by target - FIXED",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "404a183d-ed8f-4f01-92fa-40ed7bcb5c9d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352/findings?status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352",
								"findings"
							],
							"query": [
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by target 2 - OPEN",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "85596ccc-eb1b-44a3-936b-c8372ceecca1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/f26e803e-d03f-4329-a056-6451ba053c6b/findings?status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"f26e803e-d03f-4329-a056-6451ba053c6b",
								"findings"
							],
							"query": [
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by target 2 - FIXED",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7da2dea3-8823-4ac2-9d99-0b6b93617e82",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/f26e803e-d03f-4329-a056-6451ba053c6b/findings?status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"f26e803e-d03f-4329-a056-6451ba053c6b",
								"findings"
							],
							"query": [
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by target - Sort by score asc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "20d2307d-1a7c-45ea-9812-d6438e8c6be1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(2, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings order is correct\", function () {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.findings[0].score).to.eql(1, 'test_order');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(2, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/e516f505-6e76-46b2-b05e-91aa05b96af2/findings?sortBy=score",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"e516f505-6e76-46b2-b05e-91aa05b96af2",
								"findings"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "score"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by target - Sort by score desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "af1e7637-a265-40dd-92c3-00935cdb0ffc",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(2, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings order is correct\", function () {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.findings[0].score).to.eql(2, 'test_order');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(2, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/e516f505-6e76-46b2-b05e-91aa05b96af2/findings?sortBy=-score",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"e516f505-6e76-46b2-b05e-91aa05b96af2",
								"findings"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "-score"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by target and issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b944377b-cc0b-4998-b465-d7022bcfabb4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.finding).to.be.an('Object');",
									"    pm.expect(jsonData.finding).to.have.property('id');",
									"    pm.expect(jsonData.finding).to.have.property('details');",
									"    pm.expect(jsonData.finding).to.have.property('impact_details');",
									"    pm.expect(jsonData.finding).to.have.property('status');",
									"    pm.expect(jsonData.finding).to.have.property('score');",
									"    pm.expect(jsonData.finding).to.have.property('total_exposure');",
									"    if (jsonData.finding.status===\"OPEN\"){",
									"        pm.expect(jsonData.finding).to.have.property('current_exposure');",
									"    }",
									"        pm.expect(jsonData.finding).to.have.property('resources');",
									"        pm.expect(jsonData.finding.resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.finding).to.have.property('issue');",
									"        pm.expect(jsonData.finding.issue).to.be.an('Object');",
									"        pm.expect(jsonData.finding.issue).to.have.property('id');",
									"        pm.expect(jsonData.finding.issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.finding.issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.finding.issue).to.have.property('description');",
									"        pm.expect(jsonData.finding.issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.finding.issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.finding).to.have.property('target');",
									"        pm.expect(jsonData.finding.target).to.be.an('Object');",
									"        pm.expect(jsonData.finding.target).to.have.property('id');",
									"        pm.expect(jsonData.finding.target).to.have.property('identifier');",
									"        pm.expect(jsonData.finding.target).to.have.property('tags');",
									"        pm.expect(jsonData.finding.target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.finding.target.tags.length;j++){",
									"            pm.expect(jsonData.finding.target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.finding).to.have.property('source');",
									"        pm.expect(jsonData.finding.source).to.be.an('Object');",
									"        pm.expect(jsonData.finding.source).to.have.property('id');",
									"        pm.expect(jsonData.finding.source).to.have.property('name');",
									"        pm.expect(jsonData.finding.source).to.have.property('component');",
									"        pm.expect(jsonData.finding.source).to.have.property('instance');",
									"        pm.expect(jsonData.finding.source).to.have.property('options');",
									"        pm.expect(jsonData.finding.source).to.have.property('time');",
									"        ",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.finding).to.have.property('id').to.be.eql('3c54f23c-8749-45c2-81c2-50dbb7b6e19a');",
									"    pm.expect(jsonData.finding).to.have.property('details').to.contains('Global score given by Mozilla Observatory');",
									"    pm.expect(jsonData.finding).to.have.property('issue').to.have.property('summary').to.contains('Mozilla HTTP Observatory');",
									"    pm.expect(jsonData.finding).to.have.property('target').to.have.property('identifier').to.contains('sweet.khayyam.adevinta.com');",
									"    pm.expect(jsonData.finding).to.have.property('source').to.have.property('instance').to.be.eql('0edf04e8-554b-4905-80b4-985492a8ff71');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352/issues/c6a1099c-6141-415c-8fd8-30d68aedb90c",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352",
								"issues",
								"c6a1099c-6141-415c-8fd8-30d68aedb90c"
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by target and issue - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c7ccee3-5450-4669-b774-5310619e995c",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.be.eql('Not Found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352/issues/aaaa",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352",
								"issues",
								"aaaa"
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Sources",
			"item": [
				{
					"name": "List sources",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "307f6634-57a0-4259-b504-8057460d832a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Sources data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.sources).to.be.an('array');",
									"    pm.expect(jsonData.sources.length).to.be.eql(20, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.sources.length;i++){",
									"        pm.expect(jsonData.sources[i]).to.have.property('id');",
									"        pm.expect(jsonData.sources[i]).to.have.property('name');",
									"        pm.expect(jsonData.sources[i]).to.have.property('component');",
									"        pm.expect(jsonData.sources[i]).to.have.property('instance');",
									"        pm.expect(jsonData.sources[i]).to.have.property('options');",
									"        pm.expect(jsonData.sources[i]).to.have.property('time');",
									"        pm.expect(jsonData.sources[i]).to.have.property('target_id');",
									"",
									"        pm.expect(jsonData.sources[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.sources[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Sources Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(218, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/sources",
							"host": [
								"{{host}}"
							],
							"path": [
								"sources"
							]
						}
					},
					"response": []
				},
				{
					"name": "List sources - page 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8f232c7e-e6ca-40f8-974f-0b55a14b1baa",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Sources data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.sources).to.be.an('array');",
									"    pm.expect(jsonData.sources.length).to.be.eql(20, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.sources.length;i++){",
									"        pm.expect(jsonData.sources[i]).to.have.property('id');",
									"        pm.expect(jsonData.sources[i]).to.have.property('name');",
									"        pm.expect(jsonData.sources[i]).to.have.property('component');",
									"        pm.expect(jsonData.sources[i]).to.have.property('instance');",
									"        pm.expect(jsonData.sources[i]).to.have.property('options');",
									"        pm.expect(jsonData.sources[i]).to.have.property('time');",
									"        pm.expect(jsonData.sources[i]).to.have.property('target_id');",
									"",
									"        pm.expect(jsonData.sources[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.sources[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Sources Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(218, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/sources?page=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"sources"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List sources - page 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3c7e0a07-9932-4b3b-ad4d-724c012baa91",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Sources data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.sources).to.be.an('array');",
									"    pm.expect(jsonData.sources.length).to.be.eql(18, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.sources.length;i++){",
									"        pm.expect(jsonData.sources[i]).to.have.property('id');",
									"        pm.expect(jsonData.sources[i]).to.have.property('name');",
									"        pm.expect(jsonData.sources[i]).to.have.property('component');",
									"        pm.expect(jsonData.sources[i]).to.have.property('instance');",
									"        pm.expect(jsonData.sources[i]).to.have.property('options');",
									"        pm.expect(jsonData.sources[i]).to.have.property('time');",
									"        pm.expect(jsonData.sources[i]).to.have.property('target_id');",
									"",
									"        pm.expect(jsonData.sources[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.sources[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Sources Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(200,'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(218,'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/sources?page=11",
							"host": [
								"{{host}}"
							],
							"path": [
								"sources"
							],
							"query": [
								{
									"key": "page",
									"value": "11"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List sources - size 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c940a201-b57d-4489-a4be-aa7137fdae07",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Sources data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.sources).to.be.an('array');",
									"    pm.expect(jsonData.sources.length).to.be.eql(5, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.sources.length;i++){",
									"        pm.expect(jsonData.sources[i]).to.have.property('id');",
									"        pm.expect(jsonData.sources[i]).to.have.property('name');",
									"        pm.expect(jsonData.sources[i]).to.have.property('component');",
									"        pm.expect(jsonData.sources[i]).to.have.property('instance');",
									"        pm.expect(jsonData.sources[i]).to.have.property('options');",
									"        pm.expect(jsonData.sources[i]).to.have.property('time');",
									"        pm.expect(jsonData.sources[i]).to.have.property('target_id');",
									"",
									"        pm.expect(jsonData.sources[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.sources[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Sources Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(5, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(218, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/sources?size=5",
							"host": [
								"{{host}}"
							],
							"path": [
								"sources"
							],
							"query": [
								{
									"key": "size",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List sources - size 5, page 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1466dee1-a8ec-4f1d-9b1f-8d537a303507",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Sources data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.sources).to.be.an('array');",
									"    pm.expect(jsonData.sources.length).to.be.eql(5, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.sources.length;i++){",
									"        pm.expect(jsonData.sources[i]).to.have.property('id');",
									"        pm.expect(jsonData.sources[i]).to.have.property('name');",
									"        pm.expect(jsonData.sources[i]).to.have.property('component');",
									"        pm.expect(jsonData.sources[i]).to.have.property('instance');",
									"        pm.expect(jsonData.sources[i]).to.have.property('options');",
									"        pm.expect(jsonData.sources[i]).to.have.property('time');",
									"        pm.expect(jsonData.sources[i]).to.have.property('target_id');",
									"",
									"        pm.expect(jsonData.sources[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.sources[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Sources Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(5, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(218, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/sources?size=5&page=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"sources"
							],
							"query": [
								{
									"key": "size",
									"value": "5"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List sources - size 5, page 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ae7d1068-8cae-49df-9746-9d50c3866b45",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Sources data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.sources).to.be.an('array');",
									"    pm.expect(jsonData.sources.length).to.be.eql(3, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.sources.length;i++){",
									"        pm.expect(jsonData.sources[i]).to.have.property('id');",
									"        pm.expect(jsonData.sources[i]).to.have.property('name');",
									"        pm.expect(jsonData.sources[i]).to.have.property('component');",
									"        pm.expect(jsonData.sources[i]).to.have.property('instance');",
									"        pm.expect(jsonData.sources[i]).to.have.property('options');",
									"        pm.expect(jsonData.sources[i]).to.have.property('time');",
									"        pm.expect(jsonData.sources[i]).to.have.property('target_id');",
									"",
									"        pm.expect(jsonData.sources[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.sources[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Sources Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(5, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(215, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(218, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/sources?size=5&page=44",
							"host": [
								"{{host}}"
							],
							"path": [
								"sources"
							],
							"query": [
								{
									"key": "size",
									"value": "5"
								},
								{
									"key": "page",
									"value": "44"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get source",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "779f5d99-7679-4ba3-aa60-7ae5e0d70a83",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Source data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.source).to.have.property('id').to.be.eql('06cd03ee-f50b-4cb4-b78b-bc283399b8d5');",
									"    pm.expect(jsonData.source).to.have.property('name').to.be.eql('vulcan');",
									"    pm.expect(jsonData.source).to.have.property('component').to.be.eql('vulcan-http-headers');",
									"    pm.expect(jsonData.source).to.have.property('instance').to.be.eql('78cb00e2-bf60-4172-b89f-0cef56451380');",
									"    pm.expect(jsonData.source).to.have.property('options').to.be.eql('{}');",
									"    pm.expect(jsonData.source).to.have.property('time').to.be.eql('2019-09-08T08:30:09Z');",
									"    pm.expect(jsonData.source).to.have.property('target_id').to.be.eql('dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/sources/06cd03ee-f50b-4cb4-b78b-bc283399b8d5",
							"host": [
								"{{host}}"
							],
							"path": [
								"sources",
								"06cd03ee-f50b-4cb4-b78b-bc283399b8d5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get source - Not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8e9485a7-ca2c-4746-bbad-4530fb1950cd",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.be.eql('Not Found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/sources/aaaaa",
							"host": [
								"{{host}}"
							],
							"path": [
								"sources",
								"aaaaa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get MTTR for a source",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1589e2b1-b690-49c8-a9b9-28e994524889",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"MTTR data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('mttr').to.be.eql(1104.5);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/sources/05a5d3fb-12e8-48e1-ac23-e85070d56143/mttr",
							"host": [
								"{{host}}"
							],
							"path": [
								"sources",
								"05a5d3fb-12e8-48e1-ac23-e85070d56143",
								"mttr"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get MTTR for a source - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3b215e21-2174-4265-8ec5-de0e9b698fb3",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.be.eql('Not Found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/sources/05a5d3fb-12e8-48e1-ac23-e85070dxxxxx/mttr",
							"host": [
								"{{host}}"
							],
							"path": [
								"sources",
								"05a5d3fb-12e8-48e1-ac23-e85070dxxxxx",
								"mttr"
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by source",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9fc59eaf-a194-4d8a-a898-b1e851c53d2a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/sources/06cd03ee-f50b-4cb4-b78b-bc283399b8d5/findings",
							"host": [
								"{{host}}"
							],
							"path": [
								"sources",
								"06cd03ee-f50b-4cb4-b78b-bc283399b8d5",
								"findings"
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by source - OPEN",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "62b64737-fc81-4963-b420-b5090628f15c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/sources/06cd03ee-f50b-4cb4-b78b-bc283399b8d5/findings?status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"sources",
								"06cd03ee-f50b-4cb4-b78b-bc283399b8d5",
								"findings"
							],
							"query": [
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by source - FIXED",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a12f39ea-7851-43ca-903e-b997797cfd07",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/sources/06cd03ee-f50b-4cb4-b78b-bc283399b8d5/findings?status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"sources",
								"06cd03ee-f50b-4cb4-b78b-bc283399b8d5",
								"findings"
							],
							"query": [
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by source 2 - OPEN",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0919908a-48c1-40b2-926d-ff4f45d9e6fb",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/sources/05a5d3fb-12e8-48e1-ac23-e85070d56143/findings?status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"sources",
								"05a5d3fb-12e8-48e1-ac23-e85070d56143",
								"findings"
							],
							"query": [
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by source 2 - FIXED",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3e4ad7eb-e731-4180-91a9-3355ff43b90b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/sources/05a5d3fb-12e8-48e1-ac23-e85070d56143/findings?status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"sources",
								"05a5d3fb-12e8-48e1-ac23-e85070d56143",
								"findings"
							],
							"query": [
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by source - Sort by score asc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a5367a65-f140-46a4-b7e8-a3f5c1e6a62e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(3, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings order is correct\", function () {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.findings[0].score).to.eql(1, 'test_order');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(3, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/sources/f5673fa6-d3d9-4338-b07d-a2c03a4533e0/findings?sortBy=score",
							"host": [
								"{{host}}"
							],
							"path": [
								"sources",
								"f5673fa6-d3d9-4338-b07d-a2c03a4533e0",
								"findings"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "score"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by source - Sort by score desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bb7b11f1-3c4d-4ab1-a309-7b31643e8554",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(3, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings order is correct\", function () {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.findings[0].score).to.eql(3.9, 'test_order');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(3, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/sources/f5673fa6-d3d9-4338-b07d-a2c03a4533e0/findings?sortBy=-score",
							"host": [
								"{{host}}"
							],
							"path": [
								"sources",
								"f5673fa6-d3d9-4338-b07d-a2c03a4533e0",
								"findings"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "-score"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "98f2f909-3e27-433c-9eb7-99056eae5138",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b4f17547-fe88-48b8-a441-52ee0380046e",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Findings",
			"item": [
				{
					"name": "List All findings",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "78ccb8ba-3464-4c94-97c2-ec4f051f32dd",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(20, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(31, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							]
						}
					},
					"response": []
				},
				{
					"name": "List All findings - matching identifier",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    pm.expect(jsonData.findings[0]).to.have.property('target');",
									"    pm.expect(jsonData.findings[0].target).to.be.an('Object');",
									"    pm.expect(jsonData.findings[0].target).to.have.property('id');",
									"    pm.expect(jsonData.findings[0].target).to.have.property('identifier');",
									"    pm.expect(jsonData.findings[0].target.id).to.be.eql('1fe8fa6e-8214-4fa7-b404-e5d7563d3ab3', 'Target ID does not match');",
									"    pm.expect(jsonData.findings[0].target.identifier).to.be.eql('cool.galileo.adevinta.com', 'Target identifier does not match');",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?identifier=cool.galileo.adevinta.com&identifiermatch=true",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "identifier",
									"value": "cool.galileo.adevinta.com"
								},
								{
									"key": "identifiermatch",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - OPEN",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d492eb2b-4529-4002-8ce3-85b827a20892",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(20, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status').to.be.eql(\"OPEN\");",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(27, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - FIXED",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c34f611-d3bd-40d1-be42-660dc42ffd02",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(3, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status').to.be.eql(\"FIXED\");",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(3, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7366f777-367c-4625-99bc-66404ef303e3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:jang",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:jang"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by tag, OPEN",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9746f8f7-337a-455b-b17a-0e6bb9c89894",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id').to.be.eql('3c54f23c-8749-45c2-81c2-50dbb7b6e19a');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:jang&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:jang"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by tag, FIXED",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0ab81072-58c9-4453-a273-d3c7e31b7d39",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id').to.be.eql('f4e6e3db-8a86-4737-b384-f02f99556cf8');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:torvalds&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:torvalds"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings with minScore=5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6567497a-1dd6-4d67-99b3-d39918302896",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(3, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(3, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?minScore=5",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "minScore",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings with maxScore=2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f358bcf5-67fa-409a-b949-ee49d1108806",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(20, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(21, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?maxScore=2",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "maxScore",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - OPEN, minDate=2019-10-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "62ecf1bb-2020-4e9a-8fff-e7b047c482e3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(8, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        ",
									"        if (jsonData.findings[i].id=='bd35cc2f-183e-4170-8a1a-ef20b7cb299b') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(4163+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(4167+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(2027+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(2031+offset, 'test_current_exposure');",
									"        }",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(8, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?minDate=2019-10-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "minDate",
									"value": "2019-10-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - OPEN, maxDate=2019-10-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8514e06f-38b6-45a0-a354-adeac33c4877",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(20, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        ",
									"        if (jsonData.findings[i].id=='eedfdae5-87a9-4f15-b85c-c13ce762a300') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(5623+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(5627+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(2737+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(2741+offset, 'test_current_exposure');",
									"        }",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(26, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?maxDate=2019-10-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "maxDate",
									"value": "2019-10-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - FIXED, minDate=2019-10-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fd5458b7-0b04-4bb2-a041-02f143304c4c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(2, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        ",
									"        if (jsonData.findings[i].id=='8d9027d1-1b05-459e-bb10-353dfb57bdf4') {",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.eql(4586, 'test_total_exposure');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(2, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?minDate=2019-10-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "minDate",
									"value": "2019-10-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - FIXED, maxDate=2019-10-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ec6cfebe-43bb-4d54-aacf-9187ad26c0db",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(3, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        ",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        ",
									"        if (jsonData.findings[i].id=='05915447-2d85-4b8a-9a79-5ba6f5b55946') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(4157+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(4161+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(2027+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(2031+offset, 'test_current_exposure');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(3, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?maxDate=2019-10-02&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "maxDate",
									"value": "2019-10-02"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - OPEN, atDate=2019-08-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "adcd9fb2-54d2-4c34-96e0-5d3783b5988d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(19, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status').to.be.eql('OPEN');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"",
									"        if (jsonData.findings[i].id=='61078ebe-13f1-4eaa-be38-170a1fa976b6') {",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.eql(2702, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.eql(2702, 'test_current_exposure');",
									"        }",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(19, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?atDate=2019-08-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "atDate",
									"value": "2019-08-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - FIXED, atDate=2019-08-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "49ff2b43-fd71-45ce-8cb6-01cb34899716",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(5, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status').to.be.eql('FIXED');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        ",
									"        if (jsonData.findings[i].id=='eb95d2ae-540b-46ef-a36c-72c2da4e9252') {",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.eql(2639, 'test_total_exposure');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.not.have.property('current_exposure');",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(5, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?atDate=2019-08-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "atDate",
									"value": "2019-08-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - Sort by score asc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9258cb8f-0c43-47e4-9406-1c572e2e68f7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(20, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings order is correct\", function () {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.findings[0].score).to.eql(0, 'test_order');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(31, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?sortBy=score",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "score"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - Sort by score desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "66826853-1735-4623-9965-9fe22f2ce104",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(20, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings order is correct\", function () {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.findings[0].score).to.eql(6.9, 'test_order');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(31, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?sortBy=-score",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "-score"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - page 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96a2e7e7-cd17-4a06-a7e2-1284e1782a32",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(20, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(31, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?page=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - page 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1924f5fb-0e62-42ea-9b26-de4531beb8b7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(11, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(20, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(31, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?page=2",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - size 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1b1305e6-ac16-43b9-88ec-ddefc38d014b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(5, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(5, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(31, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?size=5",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "size",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - size 5, page 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c553dff2-9fef-40b7-8100-e545f39a4152",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(5, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(5, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(31, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?size=5&page=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "size",
									"value": "5"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - size 5, page 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6a2ccc55-d802-4ec9-b0d9-6a070c2feb58",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(5, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(5, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(25, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(31, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?size=5&page=6",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "size",
									"value": "5"
								},
								{
									"key": "page",
									"value": "6"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get finding",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1ad688c9-56f5-4892-8dfa-73af94081ee0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.finding).to.be.an('Object');",
									"    pm.expect(jsonData.finding).to.have.property('id');",
									"    pm.expect(jsonData.finding).to.have.property('details');",
									"    pm.expect(jsonData.finding).to.have.property('impact_details');",
									"    pm.expect(jsonData.finding).to.have.property('status');",
									"    pm.expect(jsonData.finding).to.have.property('score');",
									"    pm.expect(jsonData.finding).to.have.property('total_exposure');",
									"    if (jsonData.finding.status===\"OPEN\"){",
									"        pm.expect(jsonData.finding).to.have.property('current_exposure');",
									"    }",
									"        pm.expect(jsonData.finding).to.have.property('resources');",
									"        pm.expect(jsonData.finding.resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.finding).to.have.property('issue');",
									"        pm.expect(jsonData.finding.issue).to.be.an('Object');",
									"        pm.expect(jsonData.finding.issue).to.have.property('id');",
									"        pm.expect(jsonData.finding.issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.finding.issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.finding.issue).to.have.property('description');",
									"        pm.expect(jsonData.finding.issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.finding.issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.finding).to.have.property('target');",
									"        pm.expect(jsonData.finding.target).to.be.an('Object');",
									"        pm.expect(jsonData.finding.target).to.have.property('id');",
									"        pm.expect(jsonData.finding.target).to.have.property('identifier');",
									"        pm.expect(jsonData.finding.target).to.have.property('tags');",
									"        pm.expect(jsonData.finding.target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.finding.target.tags.length;j++){",
									"            pm.expect(jsonData.finding.target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.finding).to.have.property('source');",
									"        pm.expect(jsonData.finding.source).to.be.an('Object');",
									"        pm.expect(jsonData.finding.source).to.have.property('id');",
									"        pm.expect(jsonData.finding.source).to.have.property('name');",
									"        pm.expect(jsonData.finding.source).to.have.property('component');",
									"        pm.expect(jsonData.finding.source).to.have.property('instance');",
									"        pm.expect(jsonData.finding.source).to.have.property('options');",
									"        pm.expect(jsonData.finding.source).to.have.property('time');",
									"        ",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.finding).to.have.property('id').to.be.eql('3c54f23c-8749-45c2-81c2-50dbb7b6e19a');",
									"    pm.expect(jsonData.finding).to.have.property('details').to.contains('Global score given by Mozilla Observatory');",
									"    pm.expect(jsonData.finding).to.have.property('issue').to.have.property('summary').to.contains('Mozilla HTTP Observatory');",
									"    pm.expect(jsonData.finding).to.have.property('target').to.have.property('identifier').to.contains('sweet.khayyam.adevinta.com');",
									"    pm.expect(jsonData.finding).to.have.property('source').to.have.property('instance').to.be.eql('0edf04e8-554b-4905-80b4-985492a8ff71');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings/3c54f23c-8749-45c2-81c2-50dbb7b6e19a",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings",
								"3c54f23c-8749-45c2-81c2-50dbb7b6e19a"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get finding - Not Foud",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed9a1eeb-92a0-4e96-889d-6fcdf49ee399",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.be.eql('Not Found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings/aaaaa",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings",
								"aaaaa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get MTTR for a finding",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ce787f60-bb85-4b50-87de-dab753e2ef3d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"MTTR data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('mttr').to.be.eql(744);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings/89ca61bb-a234-4588-9b13-fe6ddaf1d082/mttr",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings",
								"89ca61bb-a234-4588-9b13-fe6ddaf1d082",
								"mttr"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get MTTR for a finding - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7cffbb40-d622-4c50-8566-9131479121c2",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.be.eql('Not Found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings/3c54f23c-8749-45c2-81c2-50dbb7b6e19a/mttr",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings",
								"3c54f23c-8749-45c2-81c2-50dbb7b6e19a",
								"mttr"
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings events",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d24ba7f4-9b31-4497-be73-955d51451a32",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Events data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.events).to.be.an('array');",
									"    pm.expect(jsonData.events.length).to.be.eql(11, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.events.length;i++){",
									"        pm.expect(jsonData.events[i]).to.have.property('id');",
									"        pm.expect(jsonData.events[i]).to.have.property('finding_id');",
									"        pm.expect(jsonData.events[i]).to.have.property('source_id');",
									"        pm.expect(jsonData.events[i]).to.have.property('score');",
									"        pm.expect(jsonData.events[i]).to.have.property('time');",
									"",
									"        pm.expect(jsonData.events[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.events[i].id;",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(11);",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings/3c54f23c-8749-45c2-81c2-50dbb7b6e19a/events",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings",
								"3c54f23c-8749-45c2-81c2-50dbb7b6e19a",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get finding - Total Exposure",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2bd86ebd-e9a5-4d14-b063-9d6d8c2a5139",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.finding).to.have.property('id').to.be.eql('3c54f23c-8749-45c2-81c2-50dbb7b6e19a');",
									"    pm.expect(jsonData.finding).to.have.property('total_exposure');",
									"    pm.expect(jsonData.finding).to.have.property('current_exposure');",
									"    ",
									"    offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"    pm.expect(jsonData.finding.total_exposure).to.be.gte(6370+offset, 'total_exposure');",
									"    pm.expect(jsonData.finding.total_exposure).to.be.lte(6374+offset, 'total_exposure');",
									"    pm.expect(jsonData.finding.current_exposure).to.be.gte(6370+offset, 'current_exposure');",
									"    pm.expect(jsonData.finding.current_exposure).to.be.lte(6374+offset, 'current_exposure');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings/3c54f23c-8749-45c2-81c2-50dbb7b6e19a",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings",
								"3c54f23c-8749-45c2-81c2-50dbb7b6e19a"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get finding - Total Exposure FIXED",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f4835a10-6eed-4a37-8430-b7ea99a80724",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.finding).to.have.property('id').to.be.eql('f4e6e3db-8a86-4737-b384-f02f99556cf8');",
									"    pm.expect(jsonData.finding).to.have.property('total_exposure').to.be.eql(1465, 'total exposure');",
									"    pm.expect(jsonData.finding).to.not.have.property('current_exposure');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings/f4e6e3db-8a86-4737-b384-f02f99556cf8",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings",
								"f4e6e3db-8a86-4737-b384-f02f99556cf8"
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - OPEN after 2019-04-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4f6fb891-dd2a-48e4-91ed-a94b8e78e2da",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"",
									"        if (jsonData.findings[i].id=='eb95d2ae-540b-46ef-a36c-72c2da4e9252') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(5406+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(5411+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(558+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(562+offset, 'test_current_exposure');",
									"        }",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:lumiere&minDate=2019-04-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lumiere"
								},
								{
									"key": "minDate",
									"value": "2019-04-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - OPEN after 2019-08-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a3f380be-d850-4dbb-a24c-2373c7dfea2b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"",
									"        if (jsonData.findings[i].id=='eb95d2ae-540b-46ef-a36c-72c2da4e9252') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(5406+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(5411+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(558+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(562+offset, 'test_current_exposure');",
									"        }",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:lumiere&minDate=2019-08-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lumiere"
								},
								{
									"key": "minDate",
									"value": "2019-08-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - OPEN after 2019-12-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cfa4c61e-e759-4230-9e6b-abaea3252850",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        ",
									"        if (jsonData.findings[i].id=='eb95d2ae-540b-46ef-a36c-72c2da4e9252') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(5406+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(5411+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(558+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(562+offset, 'test_current_exposure');",
									"        }",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:lumiere&minDate=2019-12-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lumiere"
								},
								{
									"key": "minDate",
									"value": "2019-12-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - OPEN after 2020-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "caadb718-554e-4706-b667-de5ab4686ef4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:lumiere&minDate=2020-01-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lumiere"
								},
								{
									"key": "minDate",
									"value": "2020-01-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - OPEN before 2019-04-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3881c809-580b-4506-8594-f1a15a06f729",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:lumiere&maxDate=2019-04-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lumiere"
								},
								{
									"key": "maxDate",
									"value": "2019-04-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - OPEN before 2019-08-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "818fbc80-e945-4721-a04e-b9608fca037d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        ",
									"        if (jsonData.findings[i].id=='eb95d2ae-540b-46ef-a36c-72c2da4e9252') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(5406+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(5411+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(558+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(562+offset, 'test_current_exposure');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:lumiere&maxDate=2019-08-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lumiere"
								},
								{
									"key": "maxDate",
									"value": "2019-08-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - OPEN before 2019-12-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "00ed7f1a-5932-451d-bbc3-a13d4c7a7517",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        ",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        ",
									"        if (jsonData.findings[i].id=='eb95d2ae-540b-46ef-a36c-72c2da4e9252') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(5406+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(5411+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(558+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(562+offset, 'test_current_exposure');",
									"        }",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:lumiere&maxDate=2019-12-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lumiere"
								},
								{
									"key": "maxDate",
									"value": "2019-12-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - OPEN before 2020-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c3c0824c-e933-47eb-ba1c-8c85daa98f8f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        ",
									"        if (jsonData.findings[i].id=='eb95d2ae-540b-46ef-a36c-72c2da4e9252') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(5406+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(5411+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(558+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(562+offset, 'test_current_exposure');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:lumiere&maxDate=2020-01-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lumiere"
								},
								{
									"key": "maxDate",
									"value": "2020-01-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - OPEN between 2019-07-01 and 2019-09-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "5cbb79f4-1336-4efa-915c-bce6278403e0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        ",
									"        if (jsonData.findings[i].id=='eb95d2ae-540b-46ef-a36c-72c2da4e9252') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(5406+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(5411+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(558+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(562+offset, 'test_current_exposure');",
									"        }",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:lumiere&minDate=2019-07-01&maxDate=2019-09-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lumiere"
								},
								{
									"key": "minDate",
									"value": "2019-07-01"
								},
								{
									"key": "maxDate",
									"value": "2019-09-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - OPEN between 2019-09-01 and 2019-10-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "23c22ef7-8c70-4d32-9f1d-9ce72bd079e1",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:lumiere&minDate=2019-09-01&maxDate=2019-10-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lumiere"
								},
								{
									"key": "minDate",
									"value": "2019-09-01"
								},
								{
									"key": "maxDate",
									"value": "2019-10-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - OPEN between 2019-08-02 and 2019-08-05",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f11bd543-b692-437a-8257-82d2a21a442e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:lumiere&minDate=2019-08-02&maxDate=2019-08-05&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lumiere"
								},
								{
									"key": "minDate",
									"value": "2019-08-02"
								},
								{
									"key": "maxDate",
									"value": "2019-08-05"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - FIXED after 2019-04-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "046374a5-3e1b-4a16-9c52-0ebd59d82bc3",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:lumiere&minDate=2019-04-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lumiere"
								},
								{
									"key": "minDate",
									"value": "2019-04-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - FIXED after 2019-08-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "22d6e775-8563-49e1-8004-80746b870780",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:lumiere&minDate=2019-08-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lumiere"
								},
								{
									"key": "minDate",
									"value": "2019-08-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - FIXED after 2019-12-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "2c66b9eb-c47d-4645-b1a4-0d7dba213aab",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:lumiere&minDate=2019-12-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lumiere"
								},
								{
									"key": "minDate",
									"value": "2019-12-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - FIXED after 2020-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d093fe4b-2b1e-4152-bcbb-618bf3de8407",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:lumiere&minDate=2020-01-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lumiere"
								},
								{
									"key": "minDate",
									"value": "2020-01-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - FIXED before 2019-04-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "fed1a205-57a4-4c2a-bda0-f69bcec1d309",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:lumiere&maxDate=2019-04-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lumiere"
								},
								{
									"key": "maxDate",
									"value": "2019-04-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - FIXED before 2019-08-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "121ab624-9242-4860-aa8e-93335f4bc230",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        ",
									"        if (jsonData.findings[i].id=='eb95d2ae-540b-46ef-a36c-72c2da4e9252') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(5406+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(5411+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(558+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(562+offset, 'test_current_exposure');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:lumiere&maxDate=2019-08-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lumiere"
								},
								{
									"key": "maxDate",
									"value": "2019-08-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - FIXED before 2019-12-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "34e8fafb-b879-43a4-a691-9d8a34e14908",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        ",
									"        if (jsonData.findings[i].id=='eb95d2ae-540b-46ef-a36c-72c2da4e9252') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(5406+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(5411+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(558+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(562+offset, 'test_current_exposure');",
									"        }",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:lumiere&maxDate=2019-12-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lumiere"
								},
								{
									"key": "maxDate",
									"value": "2019-12-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - FIXED before 2020-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "621e219b-6b95-4920-bd04-3f5fa6422a4f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:lumiere&maxDate=2020-01-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lumiere"
								},
								{
									"key": "maxDate",
									"value": "2020-01-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - FIXED between 2019-07-01 and 2019-09-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56d60dee-d3b6-4b76-ac7e-fa0d41268ac2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:lumiere&minDate=2019-07-01&maxDate=2019-09-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lumiere"
								},
								{
									"key": "minDate",
									"value": "2019-07-01"
								},
								{
									"key": "maxDate",
									"value": "2019-09-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - FIXED between 2019-07-01 and 2019-12-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f61e234b-809a-4b1a-8f1a-ece1b1919f76",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        ",
									"        if (jsonData.findings[i].id=='eb95d2ae-540b-46ef-a36c-72c2da4e9252') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(5406+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(5411+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(558+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(562+offset, 'test_current_exposure');",
									"        }",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:lumiere&minDate=2019-07-01&maxDate=2019-12-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lumiere"
								},
								{
									"key": "minDate",
									"value": "2019-07-01"
								},
								{
									"key": "maxDate",
									"value": "2019-12-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - FIXED between 2019-12-01 and 2020-12-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9537b3d3-1108-4581-8757-358d126978c0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:lumiere&minDate=2019-12-01&maxDate=2020-12-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lumiere"
								},
								{
									"key": "minDate",
									"value": "2019-12-01"
								},
								{
									"key": "maxDate",
									"value": "2020-12-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - FIXED at 2019-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b369d208-3be9-44e0-a27c-6aa254c27cf0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:lumiere&atDate=2019-01-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lumiere"
								},
								{
									"key": "atDate",
									"value": "2019-01-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - FIXED at 2019-12-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ade46e89-920a-405c-8cda-92f5d49a1115",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        sum_total_exposure =+ jsonData.findings[i].total_exposure;",
									"        pm.expect(jsonData.findings[i]).to.not.have.property('current_exposure');",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"    ",
									"    pm.expect(sum_total_exposure).to.be.eql(4848, 'sum_total_exposure');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:lumiere&atDate=2019-12-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lumiere"
								},
								{
									"key": "atDate",
									"value": "2019-12-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - FIXED at 2020-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3900af1c-d97d-4419-aa27-a88d635aa48a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:lumiere&atDate=2020-01-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lumiere"
								},
								{
									"key": "atDate",
									"value": "2020-01-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - OPEN at 2019-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "092de88f-5f63-42fc-aeed-fdb471d3ff7d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:lumiere&atDate=2019-01-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lumiere"
								},
								{
									"key": "atDate",
									"value": "2019-01-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - OPEN at 2019-06-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8fdeb56d-8cb6-40aa-bcd3-a99e984cf14b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    sum_total_exposure = 0;",
									"    sum_current_exposure = 0;",
									"",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        sum_total_exposure =+ jsonData.findings[i].total_exposure;",
									"        pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        sum_current_exposure =+ jsonData.findings[i].current_exposure;",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"    ",
									"    pm.expect(sum_total_exposure).to.be.eql(1238, 'sum_total_exposure');",
									"    pm.expect(sum_current_exposure).to.be.eql(1238, 'sum_current_exposure');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:lumiere&atDate=2019-06-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lumiere"
								},
								{
									"key": "atDate",
									"value": "2019-06-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - OPEN at 2019-12-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6620df6e-6a8d-415c-ae77-8f27319e4a13",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:lumiere&atDate=2019-12-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lumiere"
								},
								{
									"key": "atDate",
									"value": "2019-12-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - OPEN at 2020-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf53bfc9-bf78-4603-bb91-f72c72643078",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    sum_total_exposure = 0;",
									"    sum_current_exposure = 0;",
									"",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        sum_total_exposure =+ jsonData.findings[i].total_exposure;",
									"        pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        sum_current_exposure =+ jsonData.findings[i].current_exposure;",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"    ",
									"    pm.expect(sum_total_exposure).to.be.eql(5410, 'sum_total_exposure');",
									"    pm.expect(sum_current_exposure).to.be.eql(561, 'sum_current_exposure');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:lumiere&atDate=2020-01-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lumiere"
								},
								{
									"key": "atDate",
									"value": "2020-01-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Should return currently expired finding - kemp - at 2019-11-08 as OPEN",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "87dec958-9218-4dce-b35b-8e5d533d50cd",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    sum_total_exposure = 0;",
									"    sum_current_exposure = 0;",
									"",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status').to.be.eql('OPEN');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        sum_total_exposure =+ jsonData.findings[i].total_exposure;",
									"        pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        sum_current_exposure =+ jsonData.findings[i].current_exposure;",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"    ",
									"    pm.expect(sum_total_exposure).to.be.eql(735, 'sum_total_exposure');",
									"    pm.expect(sum_current_exposure).to.be.eql(735, 'sum_current_exposure');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:kemp&atDate=2019-11-08",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:kemp"
								},
								{
									"key": "atDate",
									"value": "2019-11-08"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Should return currently expired finding - kemp - OPEN at 2019-10-10",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "3270d846-f44f-454b-9c6f-7c8b50d1739d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    sum_total_exposure = 0;",
									"    sum_current_exposure = 0;",
									"",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status').to.be.eql('OPEN');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        sum_total_exposure =+ jsonData.findings[i].total_exposure;",
									"        pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        sum_current_exposure =+ jsonData.findings[i].current_exposure;",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"    ",
									"    pm.expect(sum_total_exposure).to.be.eql(39, 'sum_total_exposure');",
									"    pm.expect(sum_current_exposure).to.be.eql(39, 'sum_current_exposure');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:kemp&atDate=2019-10-10&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:kemp"
								},
								{
									"key": "atDate",
									"value": "2019-10-10"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Should NOT return currently expired finding - kemp - FIXED at 2020-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9360bcf9-09a3-486e-84b5-6742d121729a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:kemp&atDate=2020-01-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:kemp"
								},
								{
									"key": "atDate",
									"value": "2020-01-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Should NOT return currently expired finding - kemp - OPEN at 2020-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ac0083d5-2f24-48f7-8d58-fde75b96d185",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:kemp&atDate=2020-01-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:kemp"
								},
								{
									"key": "atDate",
									"value": "2020-01-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Should return currently expired finding - kemp - at 2020-01-01 as EXPIRED",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "316ae54a-41d5-439f-9bb7-c6cf40fbaae7",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    sum_current_exposure = 0;",
									"",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status').to.be.eql('EXPIRED');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        sum_total_exposure =+ jsonData.findings[i].total_exposure;",
									"        pm.expect(jsonData.findings[i]).to.not.have.property('current_exposure');",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"    ",
									"    pm.expect(sum_total_exposure).to.be.eql(0, 'sum_total_exposure');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=sdrn:adevinta:team:kemp&atDate=2020-01-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:kemp"
								},
								{
									"key": "atDate",
									"value": "2020-01-01"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Stats",
			"item": [
				{
					"name": "Size",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "03458a9f-fc2e-413d-8d19-d128432127a6",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('size');",
									"    pm.expect(jsonData.size).to.be.an('object');",
									"    pm.expect(jsonData.size).to.have.property('sources').to.be.eql(218);",
									"    pm.expect(jsonData.size).to.have.property('targets').to.be.eql(25);",
									"    pm.expect(jsonData.size).to.have.property('issues').to.be.eql(24);",
									"    pm.expect(jsonData.size).to.have.property('findings').to.be.eql(31);",
									"    pm.expect(jsonData.size).to.have.property('finding_events').to.be.eql(265);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/size",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"size"
							]
						}
					},
					"response": []
				},
				{
					"name": "Open",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "86f89894-f387-496c-a828-cb009ca0de69",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(2);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(12);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(13);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - lederberg",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bf24723a-8480-4adf-9df9-3c918a6bfd51",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(3);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(1);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?tag=sdrn:adevinta:team:lederberg",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lederberg"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - lederberg - minDate: April 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b57b13e0-a884-4f40-bd1c-683d24eaca69",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(3);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(1);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?tag=sdrn:adevinta:team:lederberg&minDate=2019-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lederberg"
								},
								{
									"key": "minDate",
									"value": "2019-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - lederberg - minDate: May 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bc44655f-0531-45f5-886f-2208046ec4b5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?tag=sdrn:adevinta:team:lederberg&minDate=2019-05-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lederberg"
								},
								{
									"key": "minDate",
									"value": "2019-05-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - lederberg - maxDate: April 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d6f0cba9-cadf-4fde-80fb-ad899309aeb0",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?tag=sdrn:adevinta:team:lederberg&maxDate=2019-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lederberg"
								},
								{
									"key": "maxDate",
									"value": "2019-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - lederberg - maxDate: May 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ddf53d4b-6780-4b24-8910-f759c429e804",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(3);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(1);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?tag=sdrn:adevinta:team:lederberg&maxDate=2019-05-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lederberg"
								},
								{
									"key": "maxDate",
									"value": "2019-05-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - lederberg - minDate: April 2019 & maxDate: May 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "74941d33-ad9f-4444-adb6-116d442c579b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(3);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(1);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?tag=sdrn:adevinta:team:lederberg&minDate=2019-04-01&maxDate=2019-05-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lederberg"
								},
								{
									"key": "minDate",
									"value": "2019-04-01"
								},
								{
									"key": "maxDate",
									"value": "2019-05-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - lederberg - minDate: May 2019 & maxDate: Jun 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "227fc66e-b173-4c23-beae-38abcf7da022",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?tag=sdrn:adevinta:team:lederberg&minDate=2019-05-01&maxDate=2019-06-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lederberg"
								},
								{
									"key": "minDate",
									"value": "2019-05-01"
								},
								{
									"key": "maxDate",
									"value": "2019-06-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - lederberg - atDate: Apr 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "67ed4ab6-bc9a-43ac-9410-bb272b348157",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?tag=sdrn:adevinta:team:lederberg&atDate=2019-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lederberg"
								},
								{
									"key": "atDate",
									"value": "2019-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - lederberg - atDate: May 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f6e0555f-f48c-4b46-8ea2-b9272a64ca22",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(3);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(1);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?tag=sdrn:adevinta:team:lederberg&atDate=2019-05-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:lederberg"
								},
								{
									"key": "atDate",
									"value": "2019-05-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - kemp - atDate 2019-11-08 - should count expired",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "32737c31-e3c9-453b-8294-6c81b6e1ac72",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(1);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?tag=sdrn:adevinta:team:kemp&atDate=2019-11-08",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:kemp"
								},
								{
									"key": "atDate",
									"value": "2019-11-08"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - kemp - atDate 2020-01-08 - should not count expired",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c619a8d8-b1b2-45bc-91c9-5c11983be234",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?tag=sdrn:adevinta:team:kemp&atDate=2020-01-08",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:kemp"
								},
								{
									"key": "atDate",
									"value": "2020-01-08"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fixed",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "bfc559c9-4c9f-4bd4-8157-e482bca5378d",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fixed_issues');",
									"    pm.expect(jsonData.fixed_issues).to.be.an('object');",
									"    pm.expect(jsonData.fixed_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('low').to.be.eql(1);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('informational').to.be.eql(2);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/fixed",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"fixed"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fixed - torvalds",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ed9e44bb-80cd-461c-a82f-37e4e5550744",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fixed_issues');",
									"    pm.expect(jsonData.fixed_issues).to.be.an('object');",
									"    pm.expect(jsonData.fixed_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('low').to.be.eql(1);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/fixed?tag=sdrn:adevinta:team:torvalds",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"fixed"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:torvalds"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fixed - torvalds - minDate: Apr 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b6fbdb29-01eb-4169-b827-3176cd53978e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fixed_issues');",
									"    pm.expect(jsonData.fixed_issues).to.be.an('object');",
									"    pm.expect(jsonData.fixed_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('low').to.be.eql(1);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/fixed?tag=sdrn:adevinta:team:torvalds&minDate=2019-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"fixed"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:torvalds"
								},
								{
									"key": "minDate",
									"value": "2019-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fixed - torvalds - minDate: April 2020",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cd9c1a06-31fc-4a99-b031-8d777a3bb43f",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fixed_issues');",
									"    pm.expect(jsonData.fixed_issues).to.be.an('object');",
									"    pm.expect(jsonData.fixed_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/fixed?tag=sdrn:adevinta:team:torvalds&minDate=2020-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"fixed"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:torvalds"
								},
								{
									"key": "minDate",
									"value": "2020-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fixed - torvalds - maxDate: Apr 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6fad6306-12ce-48a8-a795-f3a0be838417",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fixed_issues');",
									"    pm.expect(jsonData.fixed_issues).to.be.an('object');",
									"    pm.expect(jsonData.fixed_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/fixed?tag=sdrn:adevinta:team:torvalds&maxDate=2019-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"fixed"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:torvalds"
								},
								{
									"key": "maxDate",
									"value": "2019-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fixed - torvalds - maxDate: Apr 2020",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43d878ba-a09b-40bb-8ee5-d06308f7b40a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fixed_issues');",
									"    pm.expect(jsonData.fixed_issues).to.be.an('object');",
									"    pm.expect(jsonData.fixed_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('low').to.be.eql(1);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/fixed?tag=sdrn:adevinta:team:torvalds&maxDate=2020-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"fixed"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:torvalds"
								},
								{
									"key": "maxDate",
									"value": "2020-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fixed - torvalds - minDate: Dec 2019 - maxDate: Dec 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "cc626547-d5d6-4487-ba9f-0f7a31b30197",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fixed_issues');",
									"    pm.expect(jsonData.fixed_issues).to.be.an('object');",
									"    pm.expect(jsonData.fixed_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/fixed?tag=sdrn:adevinta:team:torvalds&minDate=2019-12-01&maxDate=2019-12-31",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"fixed"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:torvalds"
								},
								{
									"key": "minDate",
									"value": "2019-12-01"
								},
								{
									"key": "maxDate",
									"value": "2019-12-31"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fixed - torvalds - minDate: Jan 2020 - maxDate: Jan 2020",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "17b42047-74d1-475c-a1de-f5bfdfac192e",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fixed_issues');",
									"    pm.expect(jsonData.fixed_issues).to.be.an('object');",
									"    pm.expect(jsonData.fixed_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('low').to.be.eql(1);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/fixed?tag=sdrn:adevinta:team:torvalds&minDate=2020-01-01&maxDate=2020-01-31",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"fixed"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:torvalds"
								},
								{
									"key": "minDate",
									"value": "2020-01-01"
								},
								{
									"key": "maxDate",
									"value": "2020-01-31"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fixed - torvalds - atDate: Dec 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "263553c0-d6bb-4de7-84fc-bef0ce408736",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fixed_issues');",
									"    pm.expect(jsonData.fixed_issues).to.be.an('object');",
									"    pm.expect(jsonData.fixed_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/fixed?tag=sdrn:adevinta:team:torvalds&atDate=2019-12-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"fixed"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:torvalds"
								},
								{
									"key": "atDate",
									"value": "2019-12-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fixed - torvalds - atDate: Feb 2020",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e4bae547-4795-4e79-bbb1-d77577d2e82b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fixed_issues');",
									"    pm.expect(jsonData.fixed_issues).to.be.an('object');",
									"    pm.expect(jsonData.fixed_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('low').to.be.eql(1);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/fixed?tag=sdrn:adevinta:team:torvalds&atDate=2020-02-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"fixed"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:torvalds"
								},
								{
									"key": "atDate",
									"value": "2020-02-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fixed - kemp - atDate: 2020-01-01 - should not count expired",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e6e8a2ba-19be-42e2-b12d-cc2193519d48",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fixed_issues');",
									"    pm.expect(jsonData.fixed_issues).to.be.an('object');",
									"    pm.expect(jsonData.fixed_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/fixed?tag=sdrn:adevinta:team:kemp&atDate=2020-01-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"fixed"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:kemp"
								},
								{
									"key": "atDate",
									"value": "2020-01-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "e2f5bd95-38f9-4c20-925a-e98ff24c01a9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(20, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(24, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "List issues - page 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b77daff-9f75-4372-bdb3-5eddf5d7dcb4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(20, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(24, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues?page=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List issues - page 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "244cf215-63fd-4f69-8375-97e77e89c024",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(4, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(20,'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(24,'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues?page=2",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List issues - size 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "37bf734c-65af-4c52-a275-659c8d2f85f5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(5, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(5, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(24, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues?size=5",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							],
							"query": [
								{
									"key": "size",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List issues - size 5, page 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1c235d38-f007-45ec-ad0b-f131b038ea61",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(5, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(5, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(24, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues?size=5&page=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							],
							"query": [
								{
									"key": "size",
									"value": "5"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List issues - size 5, page 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "79c02f2f-0c2e-42d6-9631-9a65b4ad9c0a",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(4, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(5, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(20, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(24, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues?size=5&page=5",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							],
							"query": [
								{
									"key": "size",
									"value": "5"
								},
								{
									"key": "page",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues - minDate: Apr 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "75b840b7-3206-4f50-b9bd-3a250138ded8",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(20, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(24, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues?minDate=2019-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							],
							"query": [
								{
									"key": "minDate",
									"value": "2019-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues - minDate: Jan 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "095638fe-4067-462c-87fc-2c73def2da9c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(19, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(19, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues?minDate=2020-01-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							],
							"query": [
								{
									"key": "minDate",
									"value": "2020-01-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues - minDate: Jun 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0dce117a-589b-43a3-92ec-16c02cd98367",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(17, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(17, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues?maxDate=2019-06-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							],
							"query": [
								{
									"key": "maxDate",
									"value": "2019-06-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues - minDate: Feb 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "6a28bf8e-f790-4407-9a5a-2889a2052620",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(20, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(24, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues?maxDate=2020-02-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							],
							"query": [
								{
									"key": "maxDate",
									"value": "2020-02-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues - minDate: Jun 2019 - maxDate: Jul 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4875f3f6-2cdc-46e2-a4b4-0cf3cde392ac",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(17, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(17, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues?minDate=2019-06-01&maxDate=2019-07-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							],
							"query": [
								{
									"key": "minDate",
									"value": "2019-06-01"
								},
								{
									"key": "maxDate",
									"value": "2019-07-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues - minDate: Jun 2020 - maxDate: Jul 2020",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "834886ba-dcf3-4578-9bf9-0ae9ad6fa270",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(0, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues?minDate=2020-06-01&maxDate=2020-07-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							],
							"query": [
								{
									"key": "minDate",
									"value": "2020-06-01"
								},
								{
									"key": "maxDate",
									"value": "2020-07-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues - minDate: Jun 2019 - maxDate: Jul 2019 - minScore: 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "56cb0c40-40e9-46af-a53b-4b68656adf79",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(4, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(4, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues?minDate=2019-06-01&maxDate=2019-07-01&minScore=3",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							],
							"query": [
								{
									"key": "minDate",
									"value": "2019-06-01"
								},
								{
									"key": "maxDate",
									"value": "2019-07-01"
								},
								{
									"key": "minScore",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues - minDate: Jun 2019 - maxDate: Jul 2019 - minScore: 3 - maxScore: 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1795421b-0a22-49dd-930f-99734fbdcb51",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(3, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(3, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues?minDate=2019-06-01&maxDate=2019-07-01&minScore=3&maxScore=4",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							],
							"query": [
								{
									"key": "minDate",
									"value": "2019-06-01"
								},
								{
									"key": "maxDate",
									"value": "2019-07-01"
								},
								{
									"key": "minScore",
									"value": "3"
								},
								{
									"key": "maxScore",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues - minDate: Jun 2019 - maxDate: Jul 2019 - maxScore: 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "28f8d9e8-a6f3-474e-8dbd-60f84ee98405",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(16, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(16, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues?minDate=2019-06-01&maxDate=2019-07-01&maxScore=4",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							],
							"query": [
								{
									"key": "minDate",
									"value": "2019-06-01"
								},
								{
									"key": "maxDate",
									"value": "2019-07-01"
								},
								{
									"key": "maxScore",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues - minScore: 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a683eef0-3bee-4515-a77c-e6658cb0b352",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(8, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(8, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues?minScore=3",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							],
							"query": [
								{
									"key": "minScore",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues - minScore: 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "43e78c19-4508-4bc4-b3f4-22437b3c37c2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(20, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(22, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues?maxScore=4",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							],
							"query": [
								{
									"key": "maxScore",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues - minScore: 3 & maxScore: 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f1e24294-54e0-49cc-a0fe-33428dd088a2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(6, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(6, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues?minScore=3&maxScore=4",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							],
							"query": [
								{
									"key": "minScore",
									"value": "3"
								},
								{
									"key": "maxScore",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MTTR",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "15cb5e59-c737-4569-a7a5-dfe11a99d35c",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('mttr');",
									"    pm.expect(jsonData.mttr).to.be.an('object');",
									"    pm.expect(jsonData.mttr).to.have.property('total').to.be.eql(2021.1);",
									"    pm.expect(jsonData.mttr).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('low').to.be.eql(1910.3334);",
									"    pm.expect(jsonData.mttr).to.have.property('informational').to.be.eql(2068.5715);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/mttr",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"mttr"
							]
						}
					},
					"response": []
				},
				{
					"name": "MTTR - Torvalds",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7dd813b8-5570-4d68-aadf-ddcdd0d8cdc4",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('mttr');",
									"    pm.expect(jsonData.mttr).to.be.an('object');",
									"    pm.expect(jsonData.mttr).to.have.property('total').to.be.eql(1465);",
									"    pm.expect(jsonData.mttr).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('low').to.be.eql(1465);",
									"    pm.expect(jsonData.mttr).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/mttr?tag=sdrn:adevinta:team:torvalds",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"mttr"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:torvalds"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MTTR - Torvalds - minDate: Apr 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "077a4bc3-7bc4-4f6a-8b2d-e35622794dc9",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('mttr');",
									"    pm.expect(jsonData.mttr).to.be.an('object');",
									"    pm.expect(jsonData.mttr).to.have.property('total').to.be.eql(1465);",
									"    pm.expect(jsonData.mttr).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('low').to.be.eql(1465);",
									"    pm.expect(jsonData.mttr).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/mttr?tag=sdrn:adevinta:team:torvalds&minDate=2019-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"mttr"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:torvalds"
								},
								{
									"key": "minDate",
									"value": "2019-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MTTR - Torvalds - minDate: Apr 2020",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4be61ab5-a404-4e84-a479-9ffc217110b2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('mttr');",
									"    pm.expect(jsonData.mttr).to.be.an('object');",
									"    pm.expect(jsonData.mttr).to.have.property('total').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/mttr?tag=sdrn:adevinta:team:torvalds&minDate=2020-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"mttr"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:torvalds"
								},
								{
									"key": "minDate",
									"value": "2020-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MTTR - Torvalds - maxDate: Apr 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c2e2e5d1-e6d8-4744-a3bb-5c942f6406ad",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('mttr');",
									"    pm.expect(jsonData.mttr).to.be.an('object');",
									"    pm.expect(jsonData.mttr).to.have.property('total').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/mttr?tag=sdrn:adevinta:team:torvalds&maxDate=2019-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"mttr"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:torvalds"
								},
								{
									"key": "maxDate",
									"value": "2019-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MTTR - Torvalds - maxDate: Apr 2020",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "aff1fbc9-2bd5-4f9f-a103-02fb1d99342b",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('mttr');",
									"    pm.expect(jsonData.mttr).to.be.an('object');",
									"    pm.expect(jsonData.mttr).to.have.property('total').to.be.eql(1465);",
									"    pm.expect(jsonData.mttr).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('low').to.be.eql(1465);",
									"    pm.expect(jsonData.mttr).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/mttr?tag=sdrn:adevinta:team:torvalds&maxDate=2020-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"mttr"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:torvalds"
								},
								{
									"key": "maxDate",
									"value": "2020-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MTTR - Torvalds - minDate: Dec 2019 - maxDate: Dec 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "7496183a-2f5a-409e-82f3-3322896830c5",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('mttr');",
									"    pm.expect(jsonData.mttr).to.be.an('object');",
									"    pm.expect(jsonData.mttr).to.have.property('total').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/mttr?tag=sdrn:adevinta:team:torvalds&minDate=2019-12-01&maxDate=2019-12-31",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"mttr"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:torvalds"
								},
								{
									"key": "minDate",
									"value": "2019-12-01"
								},
								{
									"key": "maxDate",
									"value": "2019-12-31"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MTTR - Torvalds - minDate: Jan 2020 - maxDate: Jan 2020",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "1cfa3bcf-cdee-48ba-8b53-1ccb80c7b5e2",
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('mttr');",
									"    pm.expect(jsonData.mttr).to.be.an('object');",
									"    pm.expect(jsonData.mttr).to.have.property('total').to.be.eql(1465);",
									"    pm.expect(jsonData.mttr).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('low').to.be.eql(1465);",
									"    pm.expect(jsonData.mttr).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/mttr?tag=sdrn:adevinta:team:torvalds&minDate=2020-01-01&maxDate=2020-01-31",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"mttr"
							],
							"query": [
								{
									"key": "tag",
									"value": "sdrn:adevinta:team:torvalds"
								},
								{
									"key": "minDate",
									"value": "2020-01-01"
								},
								{
									"key": "maxDate",
									"value": "2020-01-31"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "Tags",
			"item": [
				{
					"name": "Delete target tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "a795e022-1eac-4d72-bfa6-16dbbcf0555a",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "TAG tag=sdrn:adevinta:team:sutherland"
							}
						],
						"url": {
							"raw": "{{host}}/targets/170725b3-dffd-4983-9a8e-cd3dfd55bc63/tags/sdrn:adevinta:team:sutherland",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"170725b3-dffd-4983-9a8e-cd3dfd55bc63",
								"tags",
								"sdrn:adevinta:team:sutherland"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete inexistent target tag should return 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "4a1803ba-63b6-4c46-ad85-2f861d64a8e0",
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "TAG tag=sdrn:adevinta:team:sutherland"
							}
						],
						"url": {
							"raw": "{{host}}/targets/170725b3-dffd-4983-9a8e-cd3dfd55bc63/tags/sdrn:adevinta:team:sutherland",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"170725b3-dffd-4983-9a8e-cd3dfd55bc63",
								"tags",
								"sdrn:adevinta:team:sutherland"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ab168d02-610b-4b73-b248-3e7333efe591",
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "TAG tag=sdrn:adevinta:team:spence"
							}
						],
						"url": {
							"raw": "{{host}}/targets/tags/sdrn:adevinta:team:spence",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"tags",
								"sdrn:adevinta:team:spence"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete inexistent tag should return 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b2f2912c-4c12-4324-b83c-86f4c7f298d5",
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "TAG tag=sdrn:adevinta:team:spence"
							}
						],
						"url": {
							"raw": "{{host}}/targets/tags/sdrn:adevinta:team:spence",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"tags",
								"sdrn:adevinta:team:spence"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "7f539eaa-8106-49a1-a43a-87c4dbdd4488",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "61067008-4d93-4552-b555-5fda7a717a18",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"id": "01a68e68-cf12-4a99-bdc8-8d6af8eb36b2",
			"key": "host",
			"value": "http://127.0.0.1:8080",
			"type": "string"
		}
	],
	"protocolProfileBehavior": {}
}
