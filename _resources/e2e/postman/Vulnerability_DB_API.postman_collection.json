{
	"info": {
		"_postman_id": "8f714823-6181-4252-a096-822ace5453dc",
		"name": "Vulnerability DB API",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Issues",
			"item": [
				{
					"name": "List issues",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(20, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(25, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "List issues - page 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(20, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(25, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues?page=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List issues - page 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(5, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(20,'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(25,'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues?page=2",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List issues - size 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(5, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(5, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(25, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues?size=5",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues"
							],
							"query": [
								{
									"key": "size",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List issues - size 5, page 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(5, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(5, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(25, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues?size=5&page=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues"
							],
							"query": [
								{
									"key": "size",
									"value": "5"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List issues - size 5, page 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(5, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(5, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(20, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(25, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues?size=5&page=5",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues"
							],
							"query": [
								{
									"key": "size",
									"value": "5"
								},
								{
									"key": "page",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(20, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(25, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary - Order by max_score desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(20, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(25, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?sortBy=-max_score",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "-max_score"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary - Order by targets count asc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(20, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousCount = 0;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].targets_count).to.be.gte(previousCount, 'Order is not correct');",
									"        previousCount = jsonData.issues[i].targets_count;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(25, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?sortBy=targets_count",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "targets_count"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary by tag - OPEN, atDate: 2019-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(0, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?tag=cori&atDate=2019-01-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "cori"
								},
								{
									"key": "atDate",
									"value": "2019-01-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary by team - OPEN, atDate: 2019-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(0, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?team=578c873a-f5b1-4959-986c-ef1421822433&atDate=2019-01-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "team",
									"value": "578c873a-f5b1-4959-986c-ef1421822433"
								},
								{
									"key": "atDate",
									"value": "2019-01-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary by tag - FALSE_POSITIVE, atDate: 2019-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(0, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?tag=kemp&atDate=2019-01-01&status=FALSE_POSITIVE",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "kemp"
								},
								{
									"key": "atDate",
									"value": "2019-01-01"
								},
								{
									"key": "status",
									"value": "FALSE_POSITIVE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary by team - FALSE_POSITIVE, atDate: 2019-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(0, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?eam=504b9ccd-5923-4e7a-bc7c-a142fb03de19&atDate=2019-01-01&status=FALSE_POSITIVE",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "eam",
									"value": "504b9ccd-5923-4e7a-bc7c-a142fb03de19"
								},
								{
									"key": "atDate",
									"value": "2019-01-01"
								},
								{
									"key": "status",
									"value": "FALSE_POSITIVE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary by tag - FALSE_POSITIVE, atDate: 2019-10-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(1, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?tag=kemp&atDate=2019-10-01&status=FALSE_POSITIVE",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "kemp"
								},
								{
									"key": "atDate",
									"value": "2019-10-01"
								},
								{
									"key": "status",
									"value": "FALSE_POSITIVE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary by team - FALSE_POSITIVE, atDate: 2019-10-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(1, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?team=504b9ccd-5923-4e7a-bc7c-a142fb03de19&atDate=2019-10-01&status=FALSE_POSITIVE",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "team",
									"value": "504b9ccd-5923-4e7a-bc7c-a142fb03de19"
								},
								{
									"key": "atDate",
									"value": "2019-10-01"
								},
								{
									"key": "status",
									"value": "FALSE_POSITIVE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary - atDate: 2019-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(0, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?atDate=2019-01-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "atDate",
									"value": "2019-01-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary - atDate: 2019-10-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(20, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(21, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?atDate=2019-10-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "atDate",
									"value": "2019-10-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary - FALSE_POSITIVE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(1, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?status=FALSE_POSITIVE",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "status",
									"value": "FALSE_POSITIVE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary by tag - OPEN, atDate: 2019-04-11",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(2, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(2, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?tag=cori&atDate=2019-04-11&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "cori"
								},
								{
									"key": "atDate",
									"value": "2019-04-11"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary by team - OPEN, atDate: 2019-04-11",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(2, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(2, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?team=578c873a-f5b1-4959-986c-ef1421822433&atDate=2019-04-11&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "team",
									"value": "578c873a-f5b1-4959-986c-ef1421822433"
								},
								{
									"key": "atDate",
									"value": "2019-04-11"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary by tag - FIXED, atDate: 2019-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(0, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?tag=cori&atDate=2019-01-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "cori"
								},
								{
									"key": "atDate",
									"value": "2019-01-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary by team - FIXED, atDate: 2019-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(0, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?team=578c873a-f5b1-4959-986c-ef1421822433&atDate=2019-01-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "team",
									"value": "578c873a-f5b1-4959-986c-ef1421822433"
								},
								{
									"key": "atDate",
									"value": "2019-01-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary by tag - FIXED, atDate: 2019-04-11",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(0, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?tag=cori&atDate=2019-04-11&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "cori"
								},
								{
									"key": "atDate",
									"value": "2019-04-11"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary by team - FIXED, atDate: 2019-04-11",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(0, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?team=578c873a-f5b1-4959-986c-ef1421822433&atDate=2019-04-11&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "team",
									"value": "578c873a-f5b1-4959-986c-ef1421822433"
								},
								{
									"key": "atDate",
									"value": "2019-04-11"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary by tag - OPEN, minDate: 2019-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(2, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(2, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?tag=cori&minDate=2019-01-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "cori"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary by team - OPEN, minDate: 2019-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(2, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(2, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?team=578c873a-f5b1-4959-986c-ef1421822433&minDate=2019-01-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "team",
									"value": "578c873a-f5b1-4959-986c-ef1421822433"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary by tag - FIXED, minDate: 2019-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(0, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?tag=cori&minDate=2019-01-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "cori"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary by team - FIXED, minDate: 2019-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(0, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?team=578c873a-f5b1-4959-986c-ef1421822433&minDate=2019-01-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "team",
									"value": "578c873a-f5b1-4959-986c-ef1421822433"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary by tag - OPEN, minDate: 2019-01-01, maxDate: 2019-01-30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(0, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?tag=cori&minDate=2019-01-01&maxDate=2019-01-30&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "cori"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "maxDate",
									"value": "2019-01-30"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary by team - OPEN, minDate: 2019-01-01, maxDate: 2019-01-30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(0, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?team=578c873a-f5b1-4959-986c-ef1421822433&minDate=2019-01-01&maxDate=2019-01-30&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "team",
									"value": "578c873a-f5b1-4959-986c-ef1421822433"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "maxDate",
									"value": "2019-01-30"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary by tag - OPEN, minDate: 2019-01-01, maxDate: 2019-11-30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(2, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(2, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?tag=cori&minDate=2019-01-01&maxDate=2019-11-30&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "cori"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "maxDate",
									"value": "2019-11-30"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary by team - OPEN, minDate: 2019-01-01, maxDate: 2019-11-30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(2, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(2, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?team=578c873a-f5b1-4959-986c-ef1421822433&minDate=2019-01-01&maxDate=2019-11-30&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "team",
									"value": "578c873a-f5b1-4959-986c-ef1421822433"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "maxDate",
									"value": "2019-11-30"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary by tag - FIXED, minDate: 2019-01-01, maxDate: 2019-01-30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(0, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?tag=cori&minDate=2019-01-01&maxDate=2019-01-30&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "cori"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "maxDate",
									"value": "2019-01-30"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary by team - FIXED, minDate: 2019-01-01, maxDate: 2019-01-30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(0, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?team=578c873a-f5b1-4959-986c-ef1421822433&minDate=2019-01-01&maxDate=2019-01-30&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "team",
									"value": "578c873a-f5b1-4959-986c-ef1421822433"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "maxDate",
									"value": "2019-01-30"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary by tag - FIXED, minDate: 2019-01-01, maxDate: 2019-11-30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(0, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?tag=cori&minDate=2019-01-01&maxDate=2019-11-30&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "cori"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "maxDate",
									"value": "2019-11-30"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary by team - FIXED, minDate: 2019-01-01, maxDate: 2019-11-30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(0, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?team=578c873a-f5b1-4959-986c-ef1421822433&minDate=2019-01-01&maxDate=2019-11-30&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "team",
									"value": "578c873a-f5b1-4959-986c-ef1421822433"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "maxDate",
									"value": "2019-11-30"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary by tag - OPEN, maxDate: 2019-11-30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(2, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(2, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?tag=cori&maxDate=2019-11-30&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "cori"
								},
								{
									"key": "maxDate",
									"value": "2019-11-30"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary by team - OPEN, maxDate: 2019-11-30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(2, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(2, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?team=578c873a-f5b1-4959-986c-ef1421822433&maxDate=2019-11-30&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "team",
									"value": "578c873a-f5b1-4959-986c-ef1421822433"
								},
								{
									"key": "maxDate",
									"value": "2019-11-30"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary by tag - FIXED, maxDate: 2019-11-30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(0, 'Wrong issues array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('issue_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('targets_count');",
									"        pm.expect(jsonData.issues[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.issues[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.issues[i].max_score;",
									"",
									"        pm.expect(jsonData.issues[i].issue_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].issue_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?team=578c873a-f5b1-4959-986c-ef1421822433&maxDate=2019-11-30&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "team",
									"value": "578c873a-f5b1-4959-986c-ef1421822433"
								},
								{
									"key": "maxDate",
									"value": "2019-11-30"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary - for tag kemp",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(2, 'Wrong issues array length');",
									"",
									"    pm.expect(jsonData.issues[0].issue_id).to.eql('36bc8869-45be-4abb-876f-965d21ee9976', 'Wrong issue_id');",
									"    pm.expect(jsonData.issues[0].summary).to.eql('Certificate Signed With Weak Algorithm', 'Wrong summary');",
									"    pm.expect(jsonData.issues[0].targets_count).to.eql(1, 'Wrong targets count');",
									"    pm.expect(jsonData.issues[0].max_score).to.eql(5, 'max_score');",
									"",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(2, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?tag=kemp",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "kemp"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary - for team 504b9ccd-5923-4e7a-bc7c-a142fb03de19",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(2, 'Wrong issues array length');",
									"",
									"    pm.expect(jsonData.issues[0].issue_id).to.eql('36bc8869-45be-4abb-876f-965d21ee9976', 'Wrong issue_id');",
									"    pm.expect(jsonData.issues[0].summary).to.eql('Certificate Signed With Weak Algorithm', 'Wrong summary');",
									"    pm.expect(jsonData.issues[0].targets_count).to.eql(1, 'Wrong targets count');",
									"    pm.expect(jsonData.issues[0].max_score).to.eql(5, 'max_score');",
									"",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(2, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?team=504b9ccd-5923-4e7a-bc7c-a142fb03de19",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "team",
									"value": "504b9ccd-5923-4e7a-bc7c-a142fb03de19"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary - Filter by label",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(1, 'Wrong issues array length');",
									"",
									"    pm.expect(jsonData.issues[0].issue_id).to.eql('52b71a0c-0431-4f98-a73f-9dd91c45706c', 'Wrong issue_id');",
									"    pm.expect(jsonData.issues[0].summary).to.eql('Cipher Suite Ordering Not Enforced', 'Wrong summary');",
									"    pm.expect(jsonData.issues[0].targets_count).to.eql(1, 'Wrong targets count');",
									"    pm.expect(jsonData.issues[0].max_score).to.eql(3.9, 'Wrong max_score');",
									"",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?labels=HTTP",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "labels",
									"value": "HTTP"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues summary - Filter by multiple labels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(2, 'Wrong issues array length');",
									"",
									"    pm.expect(jsonData.issues[0].issue_id).to.eql('52b71a0c-0431-4f98-a73f-9dd91c45706c', 'Wrong issue_id');",
									"    pm.expect(jsonData.issues[0].summary).to.eql('Cipher Suite Ordering Not Enforced', 'Wrong summary');",
									"    pm.expect(jsonData.issues[0].targets_count).to.eql(1, 'Wrong targets count');",
									"    pm.expect(jsonData.issues[0].max_score).to.eql(3.9, 'Wrong max_score');",
									"",
									"    pm.expect(jsonData.issues[1].issue_id).to.eql('0335fc86-582a-4710-8edc-3983611d3a12', 'Wrong issue_id');",
									"    pm.expect(jsonData.issues[1].summary).to.eql('TLS NPN Supported Protocol Enumeration', 'Wrong summary');",
									"    pm.expect(jsonData.issues[1].targets_count).to.eql(1, 'Wrong targets count');",
									"    pm.expect(jsonData.issues[1].max_score).to.eql(0, 'Wrong max_score');",
									"",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(2, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/summary?labels=HTTP,TLS,issue",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"summary"
							],
							"query": [
								{
									"key": "labels",
									"value": "HTTP,TLS,issue"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issue data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issue).to.be.an('object');",
									"    pm.expect(jsonData.issue).to.have.property('id');",
									"    pm.expect(jsonData.issue).to.have.property('summary').to.be.not.empty;",
									"    pm.expect(jsonData.issue).to.have.property('cwe_id');",
									"    pm.expect(jsonData.issue).to.have.property('description');",
									"    pm.expect(jsonData.issue).to.have.property('recommendations');",
									"    pm.expect(jsonData.issue).to.have.property('reference_links');",
									"",
									"    pm.expect(jsonData.issue.id).to.be.eql('c10c3b0b-2dca-4b1d-a9b5-766bc0414e35', 'id');",
									"    pm.expect(jsonData.issue.summary).to.be.eql('HTTP Content Security Policy Not Implemented', 'summary');",
									"    pm.expect(jsonData.issue.cwe_id).to.be.eql(358, 'cwe_id');",
									"    pm.expect(jsonData.issue.description).to.contains('Content Security Policy (CSP) is an HTTP header', 'description');",
									"",
									"    pm.expect(jsonData.issue.recommendations).to.be.an('array', 'recommendations')",
									"    pm.expect(jsonData.issue.recommendations).to.have.lengthOf(3, 'recommendations')",
									"    pm.expect(jsonData.issue.recommendations).to.include('Implement a well-formed and correct CSP policy for this site.', 'recommendations');",
									"",
									"    pm.expect(jsonData.issue.reference_links).to.be.an('array', 'reference_links')",
									"    pm.expect(jsonData.issue.reference_links).to.have.lengthOf(4, 'reference_links')",
									"    pm.expect(jsonData.issue.reference_links).to.include('https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP', 'reference_links');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/c10c3b0b-2dca-4b1d-a9b5-766bc0414e35",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"c10c3b0b-2dca-4b1d-a9b5-766bc0414e35"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get issue - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.be.eql('Not Found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/aaaaa",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"aaaaa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get MTTR for an issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"MTTR data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('mttr').to.be.eql(744);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/c6a1099c-6141-415c-8fd8-30d68aedb90c/mttr",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"c6a1099c-6141-415c-8fd8-30d68aedb90c",
								"mttr"
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by issue",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(4, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(4, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/c6a1099c-6141-415c-8fd8-30d68aedb90c/findings",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"c6a1099c-6141-415c-8fd8-30d68aedb90c",
								"findings"
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by issue - OPEN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(3, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(3, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/c6a1099c-6141-415c-8fd8-30d68aedb90c/findings?status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"c6a1099c-6141-415c-8fd8-30d68aedb90c",
								"findings"
							],
							"query": [
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by issue - FIXED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/c6a1099c-6141-415c-8fd8-30d68aedb90c/findings?status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"c6a1099c-6141-415c-8fd8-30d68aedb90c",
								"findings"
							],
							"query": [
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by issue - FALSE_POSITIVE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/c6a1099c-6141-415c-8fd8-30d68aedb90c/findings?status=FALSE_POSITIVE",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"c6a1099c-6141-415c-8fd8-30d68aedb90c",
								"findings"
							],
							"query": [
								{
									"key": "status",
									"value": "FALSE_POSITIVE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by issue 2 - OPEN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/de46679a-b767-4dbd-909a-9b2bc5d647f9/findings?status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"de46679a-b767-4dbd-909a-9b2bc5d647f9",
								"findings"
							],
							"query": [
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by issue 2 - FIXED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/de46679a-b767-4dbd-909a-9b2bc5d647f9/findings?status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"de46679a-b767-4dbd-909a-9b2bc5d647f9",
								"findings"
							],
							"query": [
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by issue - Sort by score asc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(3, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings order is correct\", function () {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.findings[0].score).to.eql(1, 'test_order');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(3, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/6a553190-9e12-4df8-9af2-090186f12c34/findings?sortBy=score",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"6a553190-9e12-4df8-9af2-090186f12c34",
								"findings"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "score"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by issue - Sort by score desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(2, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings order is correct\", function () {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.findings[0].score).to.eql(5, 'test_order');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(2, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/36bc8869-45be-4abb-876f-965d21ee9976/findings?sortBy=-score",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"36bc8869-45be-4abb-876f-965d21ee9976",
								"findings"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "-score"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Targets",
			"item": [
				{
					"name": "List targets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(20, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('teams');",
									"        pm.expect(jsonData.targets[i]).to.have.property('tags');",
									"        pm.expect(jsonData.targets[i].teams).to.be.an('array');",
									"        for (j=0; j<jsonData.targets[i].teams.length;j++){",
									"            pm.expect(jsonData.targets[i].teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.targets[i].tags).to.be.an('array');",
									"        for (j=0; j<jsonData.targets[i].tags.length;j++){",
									"            pm.expect(jsonData.targets[i].tags[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.targets[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(26, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets"
							]
						}
					},
					"response": []
				},
				{
					"name": "List targets - matching identifier",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('teams');",
									"        pm.expect(jsonData.targets[i]).to.have.property('tags');",
									"        pm.expect(jsonData.targets[i].teams).to.be.an('array');",
									"        for (j=0; j<jsonData.targets[i].teams.length;j++){",
									"            pm.expect(jsonData.targets[i].teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.targets[i].tags).to.be.an('array');",
									"        for (j=0; j<jsonData.targets[i].tags.length;j++){",
									"            pm.expect(jsonData.targets[i].tags[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.targets[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets?identifier=cool.galileo.adevinta.com&identifiermatch=true",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets"
							],
							"query": [
								{
									"key": "identifier",
									"value": "cool.galileo.adevinta.com"
								},
								{
									"key": "identifiermatch",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List All findings - like identifier",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.eql(20, 'Wrong array length');",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(33, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?identifier=adevinta.com",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "identifier",
									"value": "adevinta.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List targets - page 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(20, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('teams');",
									"        pm.expect(jsonData.targets[i]).to.have.property('tags');",
									"        pm.expect(jsonData.targets[i].teams).to.be.an('array');",
									"        for (j=0; j<jsonData.targets[i].teams.length;j++){",
									"            pm.expect(jsonData.targets[i].teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.targets[i].tags).to.be.an('array');",
									"        for (j=0; j<jsonData.targets[i].tags.length;j++){",
									"            pm.expect(jsonData.targets[i].tags[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.targets[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(26, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets?page=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List targets - page 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(6, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('teams');",
									"        pm.expect(jsonData.targets[i]).to.have.property('tags');",
									"        pm.expect(jsonData.targets[i].teams).to.be.an('array');",
									"        for (j=0; j<jsonData.targets[i].teams.length;j++){",
									"            pm.expect(jsonData.targets[i].teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.targets[i].tags).to.be.an('array');",
									"        for (j=0; j<jsonData.targets[i].tags.length;j++){",
									"            pm.expect(jsonData.targets[i].tags[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.targets[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(20,'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(26,'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets?page=2",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List targets - size 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(5, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('teams');",
									"        pm.expect(jsonData.targets[i]).to.have.property('tags');",
									"        pm.expect(jsonData.targets[i].teams).to.be.an('array');",
									"        for (j=0; j<jsonData.targets[i].teams.length;j++){",
									"            pm.expect(jsonData.targets[i].teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.targets[i].tags).to.be.an('array');",
									"        for (j=0; j<jsonData.targets[i].tags.length;j++){",
									"            pm.expect(jsonData.targets[i].tags[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.targets[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(5, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(26, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets?size=5",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets"
							],
							"query": [
								{
									"key": "size",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List targets - size 5, page 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(5, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('teams');",
									"        pm.expect(jsonData.targets[i]).to.have.property('tags');",
									"        pm.expect(jsonData.targets[i].teams).to.be.an('array');",
									"        for (j=0; j<jsonData.targets[i].teams.length;j++){",
									"            pm.expect(jsonData.targets[i].teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.targets[i].tags).to.be.an('array');",
									"        for (j=0; j<jsonData.targets[i].tags.length;j++){",
									"            pm.expect(jsonData.targets[i].tags[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.targets[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(5, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(26, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets?size=5&page=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets"
							],
							"query": [
								{
									"key": "size",
									"value": "5"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List targets - size 5, page 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(5, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('teams');",
									"        pm.expect(jsonData.targets[i]).to.have.property('tags');",
									"        pm.expect(jsonData.targets[i].teams).to.be.an('array');",
									"        for (j=0; j<jsonData.targets[i].teams.length;j++){",
									"            pm.expect(jsonData.targets[i].teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.targets[i].tags).to.be.an('array');",
									"        for (j=0; j<jsonData.targets[i].tags.length;j++){",
									"            pm.expect(jsonData.targets[i].tags[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.targets[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(5, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(20, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(26, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets?size=5&page=5",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets"
							],
							"query": [
								{
									"key": "size",
									"value": "5"
								},
								{
									"key": "page",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List targets by tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('id').to.be.eql('dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier').to.be.eql('sweet.khayyam.adevinta.com');",
									"        pm.expect(jsonData.targets[i]).to.have.property('teams');",
									"        pm.expect(jsonData.targets[i].teams).to.be.an('array');",
									"        for (j=0; j<jsonData.targets[i].teams.length;j++){",
									"            pm.expect(jsonData.targets[i].teams[j]).to.be.an('string').to.be.eql('e9250fc8-ee94-45aa-9e99-d7786fed9de2');",
									"        }",
									"        pm.expect(jsonData.targets[i]).to.have.property('tags');",
									"        pm.expect(jsonData.targets[i].tags).to.be.an('array');",
									"        for (j=0; j<jsonData.targets[i].tags.length;j++){",
									"            pm.expect(jsonData.targets[i].tags[j]).to.be.an('string').to.be.eql('jang');",
									"        }",
									"        pm.expect(jsonData.targets[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1);",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets?tag=jang",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets"
							],
							"query": [
								{
									"key": "tag",
									"value": "jang"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List targets by team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('id').to.be.eql('dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier').to.be.eql('sweet.khayyam.adevinta.com');",
									"        pm.expect(jsonData.targets[i]).to.have.property('teams');",
									"        pm.expect(jsonData.targets[i].teams).to.be.an('array');",
									"        for (j=0; j<jsonData.targets[i].teams.length;j++){",
									"            pm.expect(jsonData.targets[i].teams[j]).to.be.an('string').to.be.eql('e9250fc8-ee94-45aa-9e99-d7786fed9de2');",
									"        }",
									"        pm.expect(jsonData.targets[i]).to.have.property('tags');",
									"        pm.expect(jsonData.targets[i].tags).to.be.an('array');",
									"        for (j=0; j<jsonData.targets[i].tags.length;j++){",
									"            pm.expect(jsonData.targets[i].tags[j]).to.be.an('string').to.be.eql('jang');",
									"        }",
									"        pm.expect(jsonData.targets[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1);",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets?team=e9250fc8-ee94-45aa-9e99-d7786fed9de2",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets"
							],
							"query": [
								{
									"key": "team",
									"value": "e9250fc8-ee94-45aa-9e99-d7786fed9de2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List targets by tag - Not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0);",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets?tag=aaaaa",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets"
							],
							"query": [
								{
									"key": "tag",
									"value": "aaaaa"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List targets by team - Not found Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0);",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets?team=aaaaa",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets"
							],
							"query": [
								{
									"key": "team",
									"value": "aaaaa"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List targets by identifier",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(1, 'Wrong array length');",
									"",
									"    pm.expect(jsonData.targets[0]).to.have.property('id').to.be.eql('e49b1b46-fb19-409f-b40d-9c2721b7b7bd');",
									"    pm.expect(jsonData.targets[0]).to.have.property('identifier').to.be.eql('magical.almeida.adevinta.com');",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1);",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets?identifier=magical",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets"
							],
							"query": [
								{
									"key": "identifier",
									"value": "magical"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List targets by identifier - Not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0);",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets?identifier=aaaaa",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets"
							],
							"query": [
								{
									"key": "identifier",
									"value": "aaaaa"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Create target - new identifier",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.target).to.be.an('Object');",
									"    pm.expect(jsonData.target).to.have.property('id');",
									"    pm.expect(jsonData.target).to.have.property('identifier');",
									"    pm.expect(jsonData.target).to.have.property('tags');",
									"    pm.expect(jsonData.target.identifier).to.be.eql('thisissomegiberishtarget.com', 'Wrong identifier');",
									"    pm.expect(jsonData.target.tags).to.be.an('array');",
									"    pm.expect(jsonData.target.tags).to.be.empty;",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"identifier\": \"thisissomegiberishtarget.com\"}"
						},
						"url": {
							"raw": "{{host}}/targets",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create target - new identifier new tag and new team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.target).to.be.an('Object');",
									"    pm.expect(jsonData.target).to.have.property('id');",
									"    pm.expect(jsonData.target).to.have.property('identifier');",
									"    pm.expect(jsonData.target).to.have.property('tags');",
									"    pm.expect(jsonData.target.identifier).to.be.eql('thisissomegiberishtargetbis.com', 'Wrong identifier');",
									"    pm.expect(jsonData.target.tags).to.be.an('array');",
									"    pm.expect(jsonData.target.tags.length).to.be.eql(1, 'Wrong tags array length');",
									"    pm.expect(jsonData.target.tags[0]).to.be.eql('testtag', 'Wrong tag');",
									"    pm.expect(jsonData.target.teams).to.be.an('array');",
									"    pm.expect(jsonData.target.teams.length).to.be.eql(1, 'Wrong teams array length');",
									"    pm.expect(jsonData.target.teams[0]).to.be.eql('testteam', 'Wrong team');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"identifier\": \"thisissomegiberishtargetbis.com\", \"tags\":[\"testtag\"], \"teams\":[\"testteam\"]}"
						},
						"url": {
							"raw": "{{host}}/targets",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create target - existing target new tag and new team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.target.identifier).to.be.eql('thisissomegiberishtargetbis.com', 'Wrong identifier');",
									"    pm.expect(jsonData.target.tags).to.be.an('array');",
									"    pm.expect(jsonData.target.tags.length).to.be.eql(2, 'Wrong tags array length');",
									"    pm.expect(jsonData.target.teams).to.be.an('array');",
									"    pm.expect(jsonData.target.teams.length).to.be.eql(2, 'Wrong teams array length');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"identifier\": \"thisissomegiberishtargetbis.com\", \"tags\":[\"mytag\"], \"teams\":[\"myteam\"]}"
						},
						"url": {
							"raw": "{{host}}/targets",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Create target - 422 identifier can not be void",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\"identifier\": \"\"}"
						},
						"url": {
							"raw": "{{host}}/targets",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(20, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(26, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary - Order by max_score desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(20, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(26, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?sortBy=-max_score",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "-max_score"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary - Order by findings_count asc page 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(6, 'Wrong array length');",
									"    previousID = '';",
									"    previousCount = 0;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].findings_count).to.be.gte(previousCount, 'Order is not correct');",
									"        previousCount = jsonData.targets[i].findings_count;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(20, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(26, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?sortBy=findings_count&page=2",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "findings_count"
								},
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary - FALSE_POSITIVE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?status=FALSE_POSITIVE",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "status",
									"value": "FALSE_POSITIVE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary - FALSE_POSITIVE, atDate: 2019-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?atDate=2019-01-01&status=FALSE_POSITIVE",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "atDate",
									"value": "2019-01-01"
								},
								{
									"key": "status",
									"value": "FALSE_POSITIVE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary - atDate: 2019-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?atDate=2019-01-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "atDate",
									"value": "2019-01-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary - atDate: 2019-10-10",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(20, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(22, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?atDate=2019-10-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "atDate",
									"value": "2019-10-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary - FALSE_POSITIVE, atDate: 2019-10-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?atDate=2019-10-01&status=FALSE_POSITIVE",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "atDate",
									"value": "2019-10-01"
								},
								{
									"key": "status",
									"value": "FALSE_POSITIVE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary by tag - OPEN, atDate: 2019-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?tag=cori&atDate=2019-01-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "cori"
								},
								{
									"key": "atDate",
									"value": "2019-01-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary by team - OPEN, atDate: 2019-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?team=578c873a-f5b1-4959-986c-ef1421822433&atDate=2019-01-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "team",
									"value": "578c873a-f5b1-4959-986c-ef1421822433"
								},
								{
									"key": "atDate",
									"value": "2019-01-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary by tag - OPEN, atDate: 2019-04-11",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?tag=cori&atDate=2019-04-11&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "cori"
								},
								{
									"key": "atDate",
									"value": "2019-04-11"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary by team - OPEN, atDate: 2019-04-11",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?team=578c873a-f5b1-4959-986c-ef1421822433&atDate=2019-04-11&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "team",
									"value": "578c873a-f5b1-4959-986c-ef1421822433"
								},
								{
									"key": "atDate",
									"value": "2019-04-11"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary by tag - FIXED, atDate: 2019-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?tag=cori&atDate=2019-01-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "cori"
								},
								{
									"key": "atDate",
									"value": "2019-01-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary by team - FIXED, atDate: 2019-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?team=578c873a-f5b1-4959-986c-ef1421822433&atDate=2019-01-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "team",
									"value": "578c873a-f5b1-4959-986c-ef1421822433"
								},
								{
									"key": "atDate",
									"value": "2019-01-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary by tag - FIXED, atDate: 2019-04-11",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?tag=cori&atDate=2019-04-11&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "cori"
								},
								{
									"key": "atDate",
									"value": "2019-04-11"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary by team - FIXED, atDate: 2019-04-11",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?team=578c873a-f5b1-4959-986c-ef1421822433&atDate=2019-04-11&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "team",
									"value": "578c873a-f5b1-4959-986c-ef1421822433"
								},
								{
									"key": "atDate",
									"value": "2019-04-11"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary by tag - OPEN, minDate: 2019-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?tag=cori&minDate=2019-01-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "cori"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary by team - OPEN, minDate: 2019-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?team=578c873a-f5b1-4959-986c-ef1421822433&minDate=2019-01-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "team",
									"value": "578c873a-f5b1-4959-986c-ef1421822433"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary by tag - FIXED, minDate: 2019-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?tag=cori&minDate=2019-01-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "cori"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary by team - FIXED, minDate: 2019-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?team=578c873a-f5b1-4959-986c-ef1421822433&minDate=2019-01-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "team",
									"value": "578c873a-f5b1-4959-986c-ef1421822433"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary by tag - OPEN, minDate: 2019-01-01, maxDate: 2019-01-30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?tag=cori&minDate=2019-01-01&maxDate=2019-01-30&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "cori"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "maxDate",
									"value": "2019-01-30"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary by team - OPEN, minDate: 2019-01-01, maxDate: 2019-01-30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?team=578c873a-f5b1-4959-986c-ef1421822433&minDate=2019-01-01&maxDate=2019-01-30&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "team",
									"value": "578c873a-f5b1-4959-986c-ef1421822433"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "maxDate",
									"value": "2019-01-30"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary by tag - OPEN, minDate: 2019-01-01, maxDate: 2019-11-30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?tag=cori&minDate=2019-01-01&maxDate=2019-11-30&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "cori"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "maxDate",
									"value": "2019-11-30"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary by team - OPEN, minDate: 2019-01-01, maxDate: 2019-11-30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?team=578c873a-f5b1-4959-986c-ef1421822433&minDate=2019-01-01&maxDate=2019-11-30&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "team",
									"value": "578c873a-f5b1-4959-986c-ef1421822433"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "maxDate",
									"value": "2019-11-30"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary by tag - FIXED, minDate: 2019-01-01, maxDate: 2019-01-30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?tag=cori&minDate=2019-01-01&maxDate=2019-01-30&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "cori"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "maxDate",
									"value": "2019-01-30"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary by team - FIXED, minDate: 2019-01-01, maxDate: 2019-01-30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?team=578c873a-f5b1-4959-986c-ef1421822433&minDate=2019-01-01&maxDate=2019-01-30&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "team",
									"value": "578c873a-f5b1-4959-986c-ef1421822433"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "maxDate",
									"value": "2019-01-30"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary by tag - FIXED, minDate: 2019-01-01, maxDate: 2019-11-30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?tag=cori&minDate=2019-01-01&maxDate=2019-11-30&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "cori"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "maxDate",
									"value": "2019-11-30"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary by team - FIXED, minDate: 2019-01-01, maxDate: 2019-11-30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?team=578c873a-f5b1-4959-986c-ef1421822433&minDate=2019-01-01&maxDate=2019-11-30&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "team",
									"value": "578c873a-f5b1-4959-986c-ef1421822433"
								},
								{
									"key": "minDate",
									"value": "2019-01-01"
								},
								{
									"key": "maxDate",
									"value": "2019-11-30"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary by tag - OPEN, maxDate: 2019-11-30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?tag=cori&maxDate=2019-11-30&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "cori"
								},
								{
									"key": "maxDate",
									"value": "2019-11-30"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary by team - OPEN, maxDate: 2019-11-30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?team=578c873a-f5b1-4959-986c-ef1421822433&maxDate=2019-11-30&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "team",
									"value": "578c873a-f5b1-4959-986c-ef1421822433"
								},
								{
									"key": "maxDate",
									"value": "2019-11-30"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary by tag - FIXED, maxDate: 2019-11-30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?tag=cori&maxDate=2019-11-30&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "cori"
								},
								{
									"key": "maxDate",
									"value": "2019-11-30"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary by team - FIXED, maxDate: 2019-11-30",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = '';",
									"    previousScore = 11;",
									"    for (i=0; i<jsonData.targets.length;i++){",
									"        pm.expect(jsonData.targets[i]).to.have.property('target_id');",
									"        pm.expect(jsonData.targets[i]).to.have.property('identifier');",
									"        pm.expect(jsonData.targets[i]).to.have.property('findings_count');",
									"        pm.expect(jsonData.targets[i]).to.have.property('max_score');",
									"",
									"        pm.expect(jsonData.targets[i].max_score).to.be.lte(previousScore, 'Order is not correct');",
									"        previousScore = jsonData.targets[i].max_score;",
									"",
									"        pm.expect(jsonData.targets[i].target_id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.targets[i].target_id;",
									"    }",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?team=578c873a-f5b1-4959-986c-ef1421822433&maxDate=2019-11-30&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "team",
									"value": "578c873a-f5b1-4959-986c-ef1421822433"
								},
								{
									"key": "maxDate",
									"value": "2019-11-30"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary - for tag kemp",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(1, 'Wrong array length');",
									"",
									"    pm.expect(jsonData.targets[0].target_id).to.eql('bd5db9d0-1f05-40ea-bb4c-2e8288b90d13', 'Wrong target_id');",
									"    pm.expect(jsonData.targets[0].identifier).to.eql('adventurous.marky.adevinta.com', 'Wrong identifier');",
									"    pm.expect(jsonData.targets[0].findings_count).to.eql(2, 'Wrong findings_count');",
									"    pm.expect(jsonData.targets[0].max_score).to.eql(5, 'Wrong max_score');",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(00, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?tag=kemp",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "tag",
									"value": "kemp"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary - for team 504b9ccd-5923-4e7a-bc7c-a142fb03de19",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(1, 'Wrong array length');",
									"",
									"    pm.expect(jsonData.targets[0].target_id).to.eql('bd5db9d0-1f05-40ea-bb4c-2e8288b90d13', 'Wrong target_id');",
									"    pm.expect(jsonData.targets[0].identifier).to.eql('adventurous.marky.adevinta.com', 'Wrong identifier');",
									"    pm.expect(jsonData.targets[0].findings_count).to.eql(2, 'Wrong findings_count');",
									"    pm.expect(jsonData.targets[0].max_score).to.eql(5, 'Wrong max_score');",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(00, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?team=504b9ccd-5923-4e7a-bc7c-a142fb03de19",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "team",
									"value": "504b9ccd-5923-4e7a-bc7c-a142fb03de19"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary - Filter by label",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(1, 'Wrong array length');",
									"",
									"    pm.expect(jsonData.targets[0].target_id).to.eql('f26e803e-d03f-4329-a056-6451ba053c6b', 'Wrong target_id');",
									"    pm.expect(jsonData.targets[0].identifier).to.eql('unruffled.heyrovsky.adevinta.com', 'Wrong identifier');",
									"    pm.expect(jsonData.targets[0].findings_count).to.eql(1, 'Wrong findings_count');",
									"    pm.expect(jsonData.targets[0].max_score).to.eql(1.5, 'Wrong max_score');",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(00, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?labels=HSTS",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "labels",
									"value": "HSTS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Targets summary - Filter by multiple labels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Targets data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.targets).to.be.an('array');",
									"    pm.expect(jsonData.targets.length).to.be.eql(2, 'Wrong array length');",
									"",
									"    pm.expect(jsonData.targets[0].target_id).to.eql('f26e803e-d03f-4329-a056-6451ba053c6b', 'Wrong target_id');",
									"    pm.expect(jsonData.targets[0].identifier).to.eql('unruffled.heyrovsky.adevinta.com', 'Wrong identifier');",
									"    pm.expect(jsonData.targets[0].findings_count).to.eql(1, 'Wrong findings_count');",
									"    pm.expect(jsonData.targets[0].max_score).to.eql(1.5, 'Wrong max_score');",
									"",
									"    pm.expect(jsonData.targets[1].target_id).to.eql('e49b1b46-fb19-409f-b40d-9c2721b7b7bd', 'Wrong target_id');",
									"    pm.expect(jsonData.targets[1].identifier).to.eql('magical.almeida.adevinta.com', 'Wrong identifier');",
									"    pm.expect(jsonData.targets[1].findings_count).to.eql(1, 'Wrong findings_count');",
									"    pm.expect(jsonData.targets[1].max_score).to.eql(0, 'Wrong max_score');",
									"});",
									"",
									"pm.test(\"Targets Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(00, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(2, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/summary?labels=HSTS,issue",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"summary"
							],
							"query": [
								{
									"key": "labels",
									"value": "HSTS,issue"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get target",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Target data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.target).to.have.property('id').to.be.eql('dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352');",
									"    pm.expect(jsonData.target).to.have.property('identifier').to.be.eql('sweet.khayyam.adevinta.com');",
									"    pm.expect(jsonData.target).to.have.property('teams');",
									"    pm.expect(jsonData.target).to.have.property('tags');",
									"    pm.expect(jsonData.target.teams).to.be.an('array');",
									"    pm.expect(jsonData.target.teams.length).to.be.eql(1)",
									"    pm.expect(jsonData.target.teams[0]).to.be.eql('e9250fc8-ee94-45aa-9e99-d7786fed9de2')",
									"    pm.expect(jsonData.target.tags).to.be.an('array');",
									"    pm.expect(jsonData.target.tags.length).to.be.eql(1)",
									"    pm.expect(jsonData.target.tags[0]).to.be.eql('jang')",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get target - Not Foud",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.be.eql('Not Found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/aaaaa",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"aaaaa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get MTTR for a target",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"MTTR data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('mttr').to.be.eql(1465);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/f26e803e-d03f-4329-a056-6451ba053c6b/mttr",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"f26e803e-d03f-4329-a056-6451ba053c6b",
								"mttr"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get MTTR for a target - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.be.eql('Not Found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352/mttr",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352",
								"mttr"
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by target",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352/findings",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352",
								"findings"
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by target - OPEN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352/findings?status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352",
								"findings"
							],
							"query": [
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by target - FIXED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352/findings?status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352",
								"findings"
							],
							"query": [
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by target 2 - OPEN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/f26e803e-d03f-4329-a056-6451ba053c6b/findings?status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"f26e803e-d03f-4329-a056-6451ba053c6b",
								"findings"
							],
							"query": [
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by target 2 - FIXED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/f26e803e-d03f-4329-a056-6451ba053c6b/findings?status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"f26e803e-d03f-4329-a056-6451ba053c6b",
								"findings"
							],
							"query": [
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by target - Sort by score asc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(2, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings order is correct\", function () {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.findings[0].score).to.eql(1, 'test_order');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(2, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/e516f505-6e76-46b2-b05e-91aa05b96af2/findings?sortBy=score",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"e516f505-6e76-46b2-b05e-91aa05b96af2",
								"findings"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "score"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by target - Sort by score desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(2, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings order is correct\", function () {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.findings[0].score).to.eql(2, 'test_order');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(2, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/e516f505-6e76-46b2-b05e-91aa05b96af2/findings?sortBy=-score",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"e516f505-6e76-46b2-b05e-91aa05b96af2",
								"findings"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "-score"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get finding by target, issue and affected resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.finding).to.be.an('Object');",
									"    pm.expect(jsonData.finding).to.have.property('id');",
									"    pm.expect(jsonData.finding).to.have.property('details');",
									"    pm.expect(jsonData.finding).to.have.property('impact_details');",
									"    pm.expect(jsonData.finding).to.have.property('status');",
									"    pm.expect(jsonData.finding).to.have.property('score');",
									"    pm.expect(jsonData.finding).to.have.property('total_exposure');",
									"    if (jsonData.finding.status===\"OPEN\"){",
									"        pm.expect(jsonData.finding).to.have.property('current_exposure');",
									"    }",
									"        pm.expect(jsonData.finding).to.have.property('resources');",
									"        pm.expect(jsonData.finding.resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.finding).to.have.property('issue');",
									"        pm.expect(jsonData.finding.issue).to.be.an('Object');",
									"        pm.expect(jsonData.finding.issue).to.have.property('id');",
									"        pm.expect(jsonData.finding.issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.finding.issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.finding.issue).to.have.property('description');",
									"        pm.expect(jsonData.finding.issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.finding.issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.finding).to.have.property('target');",
									"        pm.expect(jsonData.finding.target).to.be.an('Object');",
									"        pm.expect(jsonData.finding.target).to.have.property('id');",
									"        pm.expect(jsonData.finding.target).to.have.property('identifier');",
									"        pm.expect(jsonData.finding.target).to.have.property('teams');",
									"        pm.expect(jsonData.finding.target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.finding.target.teams.length;j++){",
									"            pm.expect(jsonData.finding.target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.finding.target).to.have.property('tags');",
									"        pm.expect(jsonData.finding.target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.finding.target.tags.length;j++){",
									"            pm.expect(jsonData.finding.target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.finding).to.have.property('source');",
									"        pm.expect(jsonData.finding.source).to.be.an('Object');",
									"        pm.expect(jsonData.finding.source).to.have.property('id');",
									"        pm.expect(jsonData.finding.source).to.have.property('name');",
									"        pm.expect(jsonData.finding.source).to.have.property('component');",
									"        pm.expect(jsonData.finding.source).to.have.property('instance');",
									"        pm.expect(jsonData.finding.source).to.have.property('options');",
									"        pm.expect(jsonData.finding.source).to.have.property('time');",
									"        ",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.finding).to.have.property('id').to.be.eql('3c54f23c-8749-45c2-81c2-50dbb7b6e19a');",
									"    pm.expect(jsonData.finding).to.have.property('details').to.contains('Global score given by Mozilla Observatory');",
									"    pm.expect(jsonData.finding).to.have.property('issue').to.have.property('summary').to.be.eql('Mozilla HTTP Observatory');",
									"    pm.expect(jsonData.finding).to.have.property('target').to.have.property('identifier').to.be.eql('sweet.khayyam.adevinta.com');",
									"    pm.expect(jsonData.finding).to.have.property('source').to.have.property('instance').to.be.eql('0edf04e8-554b-4905-80b4-985492a8ff71');",
									"    pm.expect(jsonData.finding).to.have.property('affected_resource').to.be.eql('sweet.khayyam.adevinta.com');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352/issues/c6a1099c-6141-415c-8fd8-30d68aedb90c/resources/sweet.khayyam.adevinta.com",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352",
								"issues",
								"c6a1099c-6141-415c-8fd8-30d68aedb90c",
								"resources",
								"sweet.khayyam.adevinta.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by target and issue - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.be.eql('Not Found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352/issues/aaaa",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352",
								"issues",
								"aaaa"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Sources",
			"item": [
				{
					"name": "List sources",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Sources data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.sources).to.be.an('array');",
									"    pm.expect(jsonData.sources.length).to.be.eql(20, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.sources.length;i++){",
									"        pm.expect(jsonData.sources[i]).to.have.property('id');",
									"        pm.expect(jsonData.sources[i]).to.have.property('name');",
									"        pm.expect(jsonData.sources[i]).to.have.property('component');",
									"        pm.expect(jsonData.sources[i]).to.have.property('instance');",
									"        pm.expect(jsonData.sources[i]).to.have.property('options');",
									"        pm.expect(jsonData.sources[i]).to.have.property('time');",
									"        pm.expect(jsonData.sources[i]).to.have.property('target_id');",
									"",
									"        pm.expect(jsonData.sources[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.sources[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Sources Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(220, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/sources",
							"host": [
								"{{host}}"
							],
							"path": [
								"sources"
							]
						}
					},
					"response": []
				},
				{
					"name": "List sources - page 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Sources data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.sources).to.be.an('array');",
									"    pm.expect(jsonData.sources.length).to.be.eql(20, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.sources.length;i++){",
									"        pm.expect(jsonData.sources[i]).to.have.property('id');",
									"        pm.expect(jsonData.sources[i]).to.have.property('name');",
									"        pm.expect(jsonData.sources[i]).to.have.property('component');",
									"        pm.expect(jsonData.sources[i]).to.have.property('instance');",
									"        pm.expect(jsonData.sources[i]).to.have.property('options');",
									"        pm.expect(jsonData.sources[i]).to.have.property('time');",
									"        pm.expect(jsonData.sources[i]).to.have.property('target_id');",
									"",
									"        pm.expect(jsonData.sources[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.sources[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Sources Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(220, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/sources?page=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"sources"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List sources - page 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Sources data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.sources).to.be.an('array');",
									"    pm.expect(jsonData.sources.length).to.be.eql(20, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.sources.length;i++){",
									"        pm.expect(jsonData.sources[i]).to.have.property('id');",
									"        pm.expect(jsonData.sources[i]).to.have.property('name');",
									"        pm.expect(jsonData.sources[i]).to.have.property('component');",
									"        pm.expect(jsonData.sources[i]).to.have.property('instance');",
									"        pm.expect(jsonData.sources[i]).to.have.property('options');",
									"        pm.expect(jsonData.sources[i]).to.have.property('time');",
									"        pm.expect(jsonData.sources[i]).to.have.property('target_id');",
									"",
									"        pm.expect(jsonData.sources[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.sources[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Sources Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(200,'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(220,'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/sources?page=11",
							"host": [
								"{{host}}"
							],
							"path": [
								"sources"
							],
							"query": [
								{
									"key": "page",
									"value": "11"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List sources - size 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Sources data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.sources).to.be.an('array');",
									"    pm.expect(jsonData.sources.length).to.be.eql(5, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.sources.length;i++){",
									"        pm.expect(jsonData.sources[i]).to.have.property('id');",
									"        pm.expect(jsonData.sources[i]).to.have.property('name');",
									"        pm.expect(jsonData.sources[i]).to.have.property('component');",
									"        pm.expect(jsonData.sources[i]).to.have.property('instance');",
									"        pm.expect(jsonData.sources[i]).to.have.property('options');",
									"        pm.expect(jsonData.sources[i]).to.have.property('time');",
									"        pm.expect(jsonData.sources[i]).to.have.property('target_id');",
									"",
									"        pm.expect(jsonData.sources[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.sources[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Sources Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(5, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(220, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/sources?size=5",
							"host": [
								"{{host}}"
							],
							"path": [
								"sources"
							],
							"query": [
								{
									"key": "size",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List sources - size 5, page 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Sources data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.sources).to.be.an('array');",
									"    pm.expect(jsonData.sources.length).to.be.eql(5, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.sources.length;i++){",
									"        pm.expect(jsonData.sources[i]).to.have.property('id');",
									"        pm.expect(jsonData.sources[i]).to.have.property('name');",
									"        pm.expect(jsonData.sources[i]).to.have.property('component');",
									"        pm.expect(jsonData.sources[i]).to.have.property('instance');",
									"        pm.expect(jsonData.sources[i]).to.have.property('options');",
									"        pm.expect(jsonData.sources[i]).to.have.property('time');",
									"        pm.expect(jsonData.sources[i]).to.have.property('target_id');",
									"",
									"        pm.expect(jsonData.sources[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.sources[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Sources Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(5, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(220, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/sources?size=5&page=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"sources"
							],
							"query": [
								{
									"key": "size",
									"value": "5"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List sources - size 5, page 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Sources data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.sources).to.be.an('array');",
									"    pm.expect(jsonData.sources.length).to.be.eql(5, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.sources.length;i++){",
									"        pm.expect(jsonData.sources[i]).to.have.property('id');",
									"        pm.expect(jsonData.sources[i]).to.have.property('name');",
									"        pm.expect(jsonData.sources[i]).to.have.property('component');",
									"        pm.expect(jsonData.sources[i]).to.have.property('instance');",
									"        pm.expect(jsonData.sources[i]).to.have.property('options');",
									"        pm.expect(jsonData.sources[i]).to.have.property('time');",
									"        pm.expect(jsonData.sources[i]).to.have.property('target_id');",
									"",
									"        pm.expect(jsonData.sources[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.sources[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Sources Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(5, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(215, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(220, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/sources?size=5&page=44",
							"host": [
								"{{host}}"
							],
							"path": [
								"sources"
							],
							"query": [
								{
									"key": "size",
									"value": "5"
								},
								{
									"key": "page",
									"value": "44"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get source",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Source data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.source).to.have.property('id').to.be.eql('06cd03ee-f50b-4cb4-b78b-bc283399b8d5');",
									"    pm.expect(jsonData.source).to.have.property('name').to.be.eql('vulcan');",
									"    pm.expect(jsonData.source).to.have.property('component').to.be.eql('vulcan-http-headers');",
									"    pm.expect(jsonData.source).to.have.property('instance').to.be.eql('78cb00e2-bf60-4172-b89f-0cef56451380');",
									"    pm.expect(jsonData.source).to.have.property('options').to.be.eql('{}');",
									"    pm.expect(jsonData.source).to.have.property('time').to.be.eql('2019-09-08T08:30:09Z');",
									"    pm.expect(jsonData.source).to.have.property('target_id').to.be.eql('dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/sources/06cd03ee-f50b-4cb4-b78b-bc283399b8d5",
							"host": [
								"{{host}}"
							],
							"path": [
								"sources",
								"06cd03ee-f50b-4cb4-b78b-bc283399b8d5"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get source - Not found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.be.eql('Not Found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/sources/aaaaa",
							"host": [
								"{{host}}"
							],
							"path": [
								"sources",
								"aaaaa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get MTTR for a source",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"MTTR data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('mttr').to.be.eql(1104.5);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/sources/05a5d3fb-12e8-48e1-ac23-e85070d56143/mttr",
							"host": [
								"{{host}}"
							],
							"path": [
								"sources",
								"05a5d3fb-12e8-48e1-ac23-e85070d56143",
								"mttr"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get MTTR for a source - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.be.eql('Not Found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/sources/05a5d3fb-12e8-48e1-ac23-e85070dxxxxx/mttr",
							"host": [
								"{{host}}"
							],
							"path": [
								"sources",
								"05a5d3fb-12e8-48e1-ac23-e85070dxxxxx",
								"mttr"
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by source",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/sources/06cd03ee-f50b-4cb4-b78b-bc283399b8d5/findings",
							"host": [
								"{{host}}"
							],
							"path": [
								"sources",
								"06cd03ee-f50b-4cb4-b78b-bc283399b8d5",
								"findings"
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by source - OPEN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/sources/06cd03ee-f50b-4cb4-b78b-bc283399b8d5/findings?status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"sources",
								"06cd03ee-f50b-4cb4-b78b-bc283399b8d5",
								"findings"
							],
							"query": [
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by source - FIXED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/sources/06cd03ee-f50b-4cb4-b78b-bc283399b8d5/findings?status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"sources",
								"06cd03ee-f50b-4cb4-b78b-bc283399b8d5",
								"findings"
							],
							"query": [
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by source 2 - OPEN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/sources/05a5d3fb-12e8-48e1-ac23-e85070d56143/findings?status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"sources",
								"05a5d3fb-12e8-48e1-ac23-e85070d56143",
								"findings"
							],
							"query": [
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by source 2 - FIXED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/sources/05a5d3fb-12e8-48e1-ac23-e85070d56143/findings?status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"sources",
								"05a5d3fb-12e8-48e1-ac23-e85070d56143",
								"findings"
							],
							"query": [
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by source - Sort by score asc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(3, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings order is correct\", function () {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.findings[0].score).to.eql(1, 'test_order');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(3, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/sources/f5673fa6-d3d9-4338-b07d-a2c03a4533e0/findings?sortBy=score",
							"host": [
								"{{host}}"
							],
							"path": [
								"sources",
								"f5673fa6-d3d9-4338-b07d-a2c03a4533e0",
								"findings"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "score"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by source - Sort by score desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(3, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings order is correct\", function () {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.findings[0].score).to.eql(3.9, 'test_order');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(3, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/sources/f5673fa6-d3d9-4338-b07d-a2c03a4533e0/findings?sortBy=-score",
							"host": [
								"{{host}}"
							],
							"path": [
								"sources",
								"f5673fa6-d3d9-4338-b07d-a2c03a4533e0",
								"findings"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "-score"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			]
		},
		{
			"name": "Findings",
			"item": [
				{
					"name": "List All findings",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(20, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(33, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							]
						}
					},
					"response": []
				},
				{
					"name": "List All findings - matching identifier",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    pm.expect(jsonData.findings[0]).to.have.property('target');",
									"    pm.expect(jsonData.findings[0].target).to.be.an('Object');",
									"    pm.expect(jsonData.findings[0].target).to.have.property('id');",
									"    pm.expect(jsonData.findings[0].target).to.have.property('identifier');",
									"    pm.expect(jsonData.findings[0].target.id).to.be.eql('1fe8fa6e-8214-4fa7-b404-e5d7563d3ab3', 'Target ID does not match');",
									"    pm.expect(jsonData.findings[0].target.identifier).to.be.eql('cool.galileo.adevinta.com', 'Target identifier does not match');",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?identifier=cool.galileo.adevinta.com&identifiermatch=true",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "identifier",
									"value": "cool.galileo.adevinta.com"
								},
								{
									"key": "identifiermatch",
									"value": "true"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - OPEN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(20, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status').to.be.eql(\"OPEN\");",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(28, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - FIXED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(3, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status').to.be.eql(\"FIXED\");",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(3, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - FALSE_POSITIVE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status').to.be.eql(\"FALSE_POSITIVE\");",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure').to.be.eql(0);",
									"        pm.expect(jsonData.findings[i]).to.not.have.property('current_exposure');",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?status=FALSE_POSITIVE",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "status",
									"value": "FALSE_POSITIVE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=jang",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "jang"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=e9250fc8-ee94-45aa-9e99-d7786fed9de2",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "e9250fc8-ee94-45aa-9e99-d7786fed9de2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by tag, OPEN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id').to.be.eql('3c54f23c-8749-45c2-81c2-50dbb7b6e19a');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=jang&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "jang"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by team, OPEN",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id').to.be.eql('3c54f23c-8749-45c2-81c2-50dbb7b6e19a');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=e9250fc8-ee94-45aa-9e99-d7786fed9de2&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "e9250fc8-ee94-45aa-9e99-d7786fed9de2"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by tag, FIXED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id').to.be.eql('f4e6e3db-8a86-4737-b384-f02f99556cf8');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=torvalds&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "torvalds"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings by team, FIXED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id').to.be.eql('f4e6e3db-8a86-4737-b384-f02f99556cf8');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=728e65fc-d568-4c1f-ac6b-a032b9b02b7c&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "728e65fc-d568-4c1f-ac6b-a032b9b02b7c"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings with minScore=5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(3, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(3, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?minScore=5",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "minScore",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings with maxScore=2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(20, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(23, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?maxScore=2",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "maxScore",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - OPEN, minDate=2019-10-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(8, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        ",
									"        if (jsonData.findings[i].id=='bd35cc2f-183e-4170-8a1a-ef20b7cb299b') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(4163+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(4167+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(2027+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(2031+offset, 'test_current_exposure');",
									"        }",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(8, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?minDate=2019-10-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "minDate",
									"value": "2019-10-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - OPEN, maxDate=2019-10-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(20, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        ",
									"        if (jsonData.findings[i].id=='eedfdae5-87a9-4f15-b85c-c13ce762a300') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(5623+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(5627+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(2737+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(2741+offset, 'test_current_exposure');",
									"        }",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(27, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?maxDate=2019-10-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "maxDate",
									"value": "2019-10-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - FIXED, minDate=2019-10-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(2, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        ",
									"        if (jsonData.findings[i].id=='8d9027d1-1b05-459e-bb10-353dfb57bdf4') {",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.eql(4586, 'test_total_exposure');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(2, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?minDate=2019-10-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "minDate",
									"value": "2019-10-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - FIXED, maxDate=2019-10-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(3, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        ",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        ",
									"        if (jsonData.findings[i].id=='05915447-2d85-4b8a-9a79-5ba6f5b55946') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(4157+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(4161+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(2027+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(2031+offset, 'test_current_exposure');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(3, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?maxDate=2019-10-02&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "maxDate",
									"value": "2019-10-02"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - OPEN, atDate=2019-08-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(20, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status').to.be.eql('OPEN');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"",
									"        if (jsonData.findings[i].id=='61078ebe-13f1-4eaa-be38-170a1fa976b6') {",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.eql(2702, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.eql(2702, 'test_current_exposure');",
									"        }",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(20, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?atDate=2019-08-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "atDate",
									"value": "2019-08-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - FIXED, atDate=2019-08-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(5, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status').to.be.eql('FIXED');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        ",
									"        if (jsonData.findings[i].id=='eb95d2ae-540b-46ef-a36c-72c2da4e9252') {",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.eql(2639, 'test_total_exposure');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.not.have.property('current_exposure');",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(5, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?atDate=2019-08-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "atDate",
									"value": "2019-08-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - atDate=2019-07-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(20, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        ",
									"        if (jsonData.findings[i].id=='eb95d2ae-540b-46ef-a36c-72c2da4e9252') {",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.eql(1958, 'test_total_exposure');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status=='OPEN') {",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        if (jsonData.findings[i].status=='FIXED') {",
									"            pm.expect(jsonData.findings[i]).to.not.have.property('current_exposure');",
									"        }",
									"        if (jsonData.findings[i].status=='FALSE_POSITIVE') {",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.eql(0, 'test_total_exposure');",
									"        }",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(24, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?atDate=2019-07-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "atDate",
									"value": "2019-07-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - atDate=2019-10-10",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(20, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        ",
									"        if (jsonData.findings[i].id=='eb95d2ae-540b-46ef-a36c-72c2da4e9252') {",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.eql(4142, 'test_total_exposure');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status=='OPEN') {",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        if (jsonData.findings[i].status=='FIXED') {",
									"            pm.expect(jsonData.findings[i]).to.not.have.property('current_exposure');",
									"        }",
									"        if (jsonData.findings[i].status=='FALSE_POSITIVE') {",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.eql(0, 'test_total_exposure');",
									"        }",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(32, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?atDate=2019-10-10",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "atDate",
									"value": "2019-10-10"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - FALSE_ POSITIVE, atDate=2019-10-10",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status=='OPEN') {",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        if (jsonData.findings[i].status=='FIXED') {",
									"            pm.expect(jsonData.findings[i]).to.not.have.property('current_exposure');",
									"        }",
									"        if (jsonData.findings[i].status=='FALSE_POSITIVE') {",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.eql(0, 'test_total_exposure');",
									"        }",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?atDate=2019-10-10&status=FALSE_POSITIVE",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "atDate",
									"value": "2019-10-10"
								},
								{
									"key": "status",
									"value": "FALSE_POSITIVE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - FALSE_ POSITIVE, atDate=2019-07-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status=='OPEN') {",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        if (jsonData.findings[i].status=='FIXED') {",
									"            pm.expect(jsonData.findings[i]).to.not.have.property('current_exposure');",
									"        }",
									"        if (jsonData.findings[i].status=='FALSE_POSITIVE') {",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.eql(0, 'test_total_exposure');",
									"        }",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?atDate=2019-07-01&status=FALSE_POSITIVE",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "atDate",
									"value": "2019-07-01"
								},
								{
									"key": "status",
									"value": "FALSE_POSITIVE"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - Sort by score asc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(20, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings order is correct\", function () {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.findings[0].score).to.eql(0, 'test_order');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(33, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?sortBy=score",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "score"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - Sort by score desc",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(20, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings order is correct\", function () {",
									"var jsonData = pm.response.json();",
									"pm.expect(jsonData.findings[0].score).to.eql(6.9, 'test_order');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(33, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?sortBy=-score",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "sortBy",
									"value": "-score"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - page 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(20, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        if (jsonData.findings[i].status===\"FALSE_POSITIVE\"){",
									"            pm.expect(jsonData.findings[i]).to.not.have.property('current_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.eql(0);",
									"        }        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(33, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?page=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - page 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(13, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        if (jsonData.findings[i].status===\"FALSE_POSITIVE\"){",
									"            pm.expect(jsonData.findings[i]).to.not.have.property('current_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.eql(0);",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(20, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(33, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?page=2",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - size 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(5, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(5, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(33, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?size=5",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "size",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - size 5, page 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(5, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(5, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(33, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?size=5&page=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "size",
									"value": "5"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - size 5, page 6",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(5, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(5, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(25, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(33, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?size=5&page=6",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "size",
									"value": "5"
								},
								{
									"key": "page",
									"value": "6"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - Filter by label",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?labels=TLS",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "labels",
									"value": "TLS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - Filter by multiple labels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(2, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(2, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?labels=TLS,issue,HTTP",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "labels",
									"value": "TLS,issue,HTTP"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get finding",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.finding).to.be.an('Object');",
									"    pm.expect(jsonData.finding).to.have.property('id');",
									"    pm.expect(jsonData.finding).to.have.property('details');",
									"    pm.expect(jsonData.finding).to.have.property('impact_details');",
									"    pm.expect(jsonData.finding).to.have.property('status');",
									"    pm.expect(jsonData.finding).to.have.property('score');",
									"    pm.expect(jsonData.finding).to.have.property('total_exposure');",
									"    if (jsonData.finding.status===\"OPEN\"){",
									"        pm.expect(jsonData.finding).to.have.property('current_exposure');",
									"    }",
									"        pm.expect(jsonData.finding).to.have.property('resources');",
									"        pm.expect(jsonData.finding.resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.finding).to.have.property('issue');",
									"        pm.expect(jsonData.finding.issue).to.be.an('Object');",
									"        pm.expect(jsonData.finding.issue).to.have.property('id');",
									"        pm.expect(jsonData.finding.issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.finding.issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.finding.issue).to.have.property('description');",
									"        pm.expect(jsonData.finding.issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.finding.issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.finding).to.have.property('target');",
									"        pm.expect(jsonData.finding.target).to.be.an('Object');",
									"        pm.expect(jsonData.finding.target).to.have.property('id');",
									"        pm.expect(jsonData.finding.target).to.have.property('identifier');",
									"        pm.expect(jsonData.finding.target).to.have.property('teams');",
									"        pm.expect(jsonData.finding.target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.finding.target.teams.length;j++){",
									"            pm.expect(jsonData.finding.target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.finding.target).to.have.property('tags');",
									"        pm.expect(jsonData.finding.target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.finding.target.tags.length;j++){",
									"            pm.expect(jsonData.finding.target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.finding).to.have.property('source');",
									"        pm.expect(jsonData.finding.source).to.be.an('Object');",
									"        pm.expect(jsonData.finding.source).to.have.property('id');",
									"        pm.expect(jsonData.finding.source).to.have.property('name');",
									"        pm.expect(jsonData.finding.source).to.have.property('component');",
									"        pm.expect(jsonData.finding.source).to.have.property('instance');",
									"        pm.expect(jsonData.finding.source).to.have.property('options');",
									"        pm.expect(jsonData.finding.source).to.have.property('time');",
									"        ",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.finding).to.have.property('id').to.be.eql('3c54f23c-8749-45c2-81c2-50dbb7b6e19a');",
									"    pm.expect(jsonData.finding).to.have.property('details').to.contains('Global score given by Mozilla Observatory');",
									"    pm.expect(jsonData.finding).to.have.property('issue').to.have.property('summary').to.contains('Mozilla HTTP Observatory');",
									"    pm.expect(jsonData.finding).to.have.property('target').to.have.property('identifier').to.contains('sweet.khayyam.adevinta.com');",
									"    pm.expect(jsonData.finding).to.have.property('source').to.have.property('instance').to.be.eql('0edf04e8-554b-4905-80b4-985492a8ff71');",
									"    pm.expect(jsonData.finding).to.have.property('affected_resource').to.be.eql(\"sweet.khayyam.adevinta.com\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings/3c54f23c-8749-45c2-81c2-50dbb7b6e19a",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings",
								"3c54f23c-8749-45c2-81c2-50dbb7b6e19a"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get finding - with AffectedResourceString",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.finding).to.be.an('Object');",
									"    pm.expect(jsonData.finding).to.have.property('id');",
									"    pm.expect(jsonData.finding).to.have.property('details');",
									"    pm.expect(jsonData.finding).to.have.property('impact_details');",
									"    pm.expect(jsonData.finding).to.have.property('status');",
									"    pm.expect(jsonData.finding).to.have.property('score');",
									"    pm.expect(jsonData.finding).to.have.property('total_exposure');",
									"    if (jsonData.finding.status===\"OPEN\"){",
									"        pm.expect(jsonData.finding).to.have.property('current_exposure');",
									"    }",
									"    pm.expect(jsonData.finding).to.have.property('resources');",
									"    pm.expect(jsonData.finding.resources).to.be.an('Array');",
									"    ",
									"    pm.expect(jsonData.finding).to.have.property('issue');",
									"    pm.expect(jsonData.finding.issue).to.be.an('Object');",
									"    pm.expect(jsonData.finding.issue).to.have.property('id');",
									"    pm.expect(jsonData.finding.issue).to.have.property('summary').to.be.not.empty;",
									"    pm.expect(jsonData.finding.issue).to.have.property('cwe_id');",
									"    pm.expect(jsonData.finding.issue).to.have.property('description');",
									"    pm.expect(jsonData.finding.issue).to.have.property('recommendations');",
									"    pm.expect(jsonData.finding.issue).to.have.property('reference_links');",
									"",
									"    pm.expect(jsonData.finding).to.have.property('target');",
									"    pm.expect(jsonData.finding.target).to.be.an('Object');",
									"    pm.expect(jsonData.finding.target).to.have.property('id');",
									"    pm.expect(jsonData.finding.target).to.have.property('identifier');",
									"    pm.expect(jsonData.finding.target).to.have.property('teams');",
									"    pm.expect(jsonData.finding.target.teams).to.be.an('array');",
									"    for (j=0; j<jsonData.finding.target.teams.length;j++){",
									"        pm.expect(jsonData.finding.target.teams[j]).to.be.an('string');",
									"    }",
									"    pm.expect(jsonData.finding.target).to.have.property('tags');",
									"    pm.expect(jsonData.finding.target.tags).to.be.an('array');",
									"    for (j=0; j<jsonData.finding.target.tags.length;j++){",
									"        pm.expect(jsonData.finding.target.tags[j]).to.be.an('string');",
									"    }",
									"    ",
									"    pm.expect(jsonData.finding).to.have.property('source');",
									"    pm.expect(jsonData.finding.source).to.be.an('Object');",
									"    pm.expect(jsonData.finding.source).to.have.property('id');",
									"    pm.expect(jsonData.finding.source).to.have.property('name');",
									"    pm.expect(jsonData.finding.source).to.have.property('component');",
									"    pm.expect(jsonData.finding.source).to.have.property('instance');",
									"    pm.expect(jsonData.finding.source).to.have.property('options');",
									"    pm.expect(jsonData.finding.source).to.have.property('time');",
									"        ",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.finding).to.have.property('id').to.be.eql('c329e4ff-a0bd-42e0-b324-766c642cf9a2');",
									"    pm.expect(jsonData.finding).to.have.property('details').to.contains('Fancy Details.');",
									"    pm.expect(jsonData.finding).to.have.property('issue').to.have.property('summary').to.contains('A fancy new issue');",
									"    pm.expect(jsonData.finding).to.have.property('target').to.have.property('identifier').to.contains('unreadable.adevinta.com');",
									"    pm.expect(jsonData.finding).to.have.property('source').to.have.property('instance').to.be.eql('0da1d7fc-bc82-49bc-90c4-ac2785f2a274');",
									"    pm.expect(jsonData.finding).to.have.property('affected_resource').to.be.eql(\"I'm human readable\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings/c329e4ff-a0bd-42e0-b324-766c642cf9a2",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings",
								"c329e4ff-a0bd-42e0-b324-766c642cf9a2"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get finding - Not Foud",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.be.eql('Not Found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings/aaaaa",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings",
								"aaaaa"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get MTTR for a finding",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"MTTR data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('mttr').to.be.eql(744);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings/89ca61bb-a234-4588-9b13-fe6ddaf1d082/mttr",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings",
								"89ca61bb-a234-4588-9b13-fe6ddaf1d082",
								"mttr"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get MTTR for a finding - Not Found",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});",
									"",
									"pm.test(\"Error data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.be.eql('Not Found');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings/3c54f23c-8749-45c2-81c2-50dbb7b6e19a/mttr",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings",
								"3c54f23c-8749-45c2-81c2-50dbb7b6e19a",
								"mttr"
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings events",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Events data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.events).to.be.an('array');",
									"    pm.expect(jsonData.events.length).to.be.eql(11, 'Wrong array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.events.length;i++){",
									"        pm.expect(jsonData.events[i]).to.have.property('id');",
									"        pm.expect(jsonData.events[i]).to.have.property('finding_id');",
									"        pm.expect(jsonData.events[i]).to.have.property('source_id');",
									"        pm.expect(jsonData.events[i]).to.have.property('score');",
									"        pm.expect(jsonData.events[i]).to.have.property('time');",
									"",
									"        pm.expect(jsonData.events[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.events[i].id;",
									"    }",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(11);",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings/3c54f23c-8749-45c2-81c2-50dbb7b6e19a/events",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings",
								"3c54f23c-8749-45c2-81c2-50dbb7b6e19a",
								"events"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get finding - Total Exposure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.finding).to.have.property('id').to.be.eql('3c54f23c-8749-45c2-81c2-50dbb7b6e19a');",
									"    pm.expect(jsonData.finding).to.have.property('total_exposure');",
									"    pm.expect(jsonData.finding).to.have.property('current_exposure');",
									"    ",
									"    offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"    pm.expect(jsonData.finding.total_exposure).to.be.gte(6370+offset, 'total_exposure');",
									"    pm.expect(jsonData.finding.total_exposure).to.be.lte(6374+offset, 'total_exposure');",
									"    pm.expect(jsonData.finding.current_exposure).to.be.gte(6370+offset, 'current_exposure');",
									"    pm.expect(jsonData.finding.current_exposure).to.be.lte(6374+offset, 'current_exposure');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings/3c54f23c-8749-45c2-81c2-50dbb7b6e19a",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings",
								"3c54f23c-8749-45c2-81c2-50dbb7b6e19a"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get finding - Total Exposure FIXED",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.finding).to.have.property('id').to.be.eql('f4e6e3db-8a86-4737-b384-f02f99556cf8');",
									"    pm.expect(jsonData.finding).to.have.property('total_exposure').to.be.eql(1465, 'total exposure');",
									"    pm.expect(jsonData.finding).to.not.have.property('current_exposure');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings/f4e6e3db-8a86-4737-b384-f02f99556cf8",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings",
								"f4e6e3db-8a86-4737-b384-f02f99556cf8"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get finding by issue, target and affected resource",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.finding).to.be.an('Object');",
									"    pm.expect(jsonData.finding).to.have.property('id');",
									"    pm.expect(jsonData.finding).to.have.property('details');",
									"    pm.expect(jsonData.finding).to.have.property('impact_details');",
									"    pm.expect(jsonData.finding).to.have.property('status');",
									"    pm.expect(jsonData.finding).to.have.property('score');",
									"    pm.expect(jsonData.finding).to.have.property('total_exposure');",
									"    if (jsonData.finding.status===\"OPEN\"){",
									"        pm.expect(jsonData.finding).to.have.property('current_exposure');",
									"    }",
									"        pm.expect(jsonData.finding).to.have.property('resources');",
									"        pm.expect(jsonData.finding.resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.finding).to.have.property('issue');",
									"        pm.expect(jsonData.finding.issue).to.be.an('Object');",
									"        pm.expect(jsonData.finding.issue).to.have.property('id');",
									"        pm.expect(jsonData.finding.issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.finding.issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.finding.issue).to.have.property('description');",
									"        pm.expect(jsonData.finding.issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.finding.issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.finding).to.have.property('target');",
									"        pm.expect(jsonData.finding.target).to.be.an('Object');",
									"        pm.expect(jsonData.finding.target).to.have.property('id');",
									"        pm.expect(jsonData.finding.target).to.have.property('identifier');",
									"        pm.expect(jsonData.finding.target).to.have.property('teams');",
									"        pm.expect(jsonData.finding.target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.finding.target.teams.length;j++){",
									"            pm.expect(jsonData.finding.target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.finding.target).to.have.property('tags');",
									"        pm.expect(jsonData.finding.target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.finding.target.tags.length;j++){",
									"            pm.expect(jsonData.finding.target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.finding).to.have.property('source');",
									"        pm.expect(jsonData.finding.source).to.be.an('Object');",
									"        pm.expect(jsonData.finding.source).to.have.property('id');",
									"        pm.expect(jsonData.finding.source).to.have.property('name');",
									"        pm.expect(jsonData.finding.source).to.have.property('component');",
									"        pm.expect(jsonData.finding.source).to.have.property('instance');",
									"        pm.expect(jsonData.finding.source).to.have.property('options');",
									"        pm.expect(jsonData.finding.source).to.have.property('time');",
									"        ",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.finding).to.have.property('id').to.be.eql('3c54f23c-8749-45c2-81c2-50dbb7b6e19a');",
									"    pm.expect(jsonData.finding).to.have.property('details').to.contains('Global score given by Mozilla Observatory');",
									"    pm.expect(jsonData.finding).to.have.property('issue').to.have.property('summary').to.be.eql('Mozilla HTTP Observatory');",
									"    pm.expect(jsonData.finding).to.have.property('target').to.have.property('identifier').to.be.eql('sweet.khayyam.adevinta.com');",
									"    pm.expect(jsonData.finding).to.have.property('source').to.have.property('instance').to.be.eql('0edf04e8-554b-4905-80b4-985492a8ff71');",
									"    pm.expect(jsonData.finding).to.have.property('affected_resource').to.be.eql('sweet.khayyam.adevinta.com');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/issues/c6a1099c-6141-415c-8fd8-30d68aedb90c/targets/dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352/resources/sweet.khayyam.adevinta.com",
							"host": [
								"{{host}}"
							],
							"path": [
								"issues",
								"c6a1099c-6141-415c-8fd8-30d68aedb90c",
								"targets",
								"dc7fdc6c-e9d2-4e63-9ef1-ffce36ad6352",
								"resources",
								"sweet.khayyam.adevinta.com"
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - OPEN after 2019-04-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"",
									"        if (jsonData.findings[i].id=='eb95d2ae-540b-46ef-a36c-72c2da4e9252') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(5406+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(5411+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(558+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(562+offset, 'test_current_exposure');",
									"        }",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=lumiere&minDate=2019-04-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "lumiere"
								},
								{
									"key": "minDate",
									"value": "2019-04-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - OPEN after 2019-08-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"",
									"        if (jsonData.findings[i].id=='eb95d2ae-540b-46ef-a36c-72c2da4e9252') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(5406+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(5411+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(558+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(562+offset, 'test_current_exposure');",
									"        }",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=lumiere&minDate=2019-08-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "lumiere"
								},
								{
									"key": "minDate",
									"value": "2019-08-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - OPEN after 2019-12-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        ",
									"        if (jsonData.findings[i].id=='eb95d2ae-540b-46ef-a36c-72c2da4e9252') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(5406+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(5411+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(558+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(562+offset, 'test_current_exposure');",
									"        }",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=lumiere&minDate=2019-12-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "lumiere"
								},
								{
									"key": "minDate",
									"value": "2019-12-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - OPEN after 2020-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=lumiere&minDate=2020-01-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "lumiere"
								},
								{
									"key": "minDate",
									"value": "2020-01-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - OPEN before 2019-04-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=lumiere&maxDate=2019-04-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "lumiere"
								},
								{
									"key": "maxDate",
									"value": "2019-04-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - OPEN before 2019-08-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        ",
									"        if (jsonData.findings[i].id=='eb95d2ae-540b-46ef-a36c-72c2da4e9252') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(5406+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(5411+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(558+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(562+offset, 'test_current_exposure');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=lumiere&maxDate=2019-08-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "lumiere"
								},
								{
									"key": "maxDate",
									"value": "2019-08-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - OPEN before 2019-12-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        ",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        ",
									"        if (jsonData.findings[i].id=='eb95d2ae-540b-46ef-a36c-72c2da4e9252') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(5406+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(5411+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(558+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(562+offset, 'test_current_exposure');",
									"        }",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=lumiere&maxDate=2019-12-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "lumiere"
								},
								{
									"key": "maxDate",
									"value": "2019-12-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - OPEN before 2020-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        ",
									"        if (jsonData.findings[i].id=='eb95d2ae-540b-46ef-a36c-72c2da4e9252') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(5406+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(5411+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(558+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(562+offset, 'test_current_exposure');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=lumiere&maxDate=2020-01-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "lumiere"
								},
								{
									"key": "maxDate",
									"value": "2020-01-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - OPEN between 2019-07-01 and 2019-09-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        ",
									"        if (jsonData.findings[i].id=='eb95d2ae-540b-46ef-a36c-72c2da4e9252') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(5406+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(5411+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(558+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(562+offset, 'test_current_exposure');",
									"        }",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=lumiere&minDate=2019-07-01&maxDate=2019-09-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "lumiere"
								},
								{
									"key": "minDate",
									"value": "2019-07-01"
								},
								{
									"key": "maxDate",
									"value": "2019-09-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - OPEN between 2019-09-01 and 2019-10-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=lumiere&minDate=2019-09-01&maxDate=2019-10-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "lumiere"
								},
								{
									"key": "minDate",
									"value": "2019-09-01"
								},
								{
									"key": "maxDate",
									"value": "2019-10-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - OPEN between 2019-08-02 and 2019-08-05",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=lumiere&minDate=2019-08-02&maxDate=2019-08-05&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "lumiere"
								},
								{
									"key": "minDate",
									"value": "2019-08-02"
								},
								{
									"key": "maxDate",
									"value": "2019-08-05"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - FIXED after 2019-04-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=lumiere&minDate=2019-04-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "lumiere"
								},
								{
									"key": "minDate",
									"value": "2019-04-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - FIXED after 2019-08-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=lumiere&minDate=2019-08-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "lumiere"
								},
								{
									"key": "minDate",
									"value": "2019-08-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - FIXED after 2019-12-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=lumiere&minDate=2019-12-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "lumiere"
								},
								{
									"key": "minDate",
									"value": "2019-12-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - FIXED after 2020-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=lumiere&minDate=2020-01-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "lumiere"
								},
								{
									"key": "minDate",
									"value": "2020-01-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - FIXED before 2019-04-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=lumiere&maxDate=2019-04-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "lumiere"
								},
								{
									"key": "maxDate",
									"value": "2019-04-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - FIXED before 2019-08-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        ",
									"        if (jsonData.findings[i].id=='eb95d2ae-540b-46ef-a36c-72c2da4e9252') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(5406+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(5411+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(558+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(562+offset, 'test_current_exposure');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=lumiere&maxDate=2019-08-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "lumiere"
								},
								{
									"key": "maxDate",
									"value": "2019-08-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - FIXED before 2019-12-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        ",
									"        if (jsonData.findings[i].id=='eb95d2ae-540b-46ef-a36c-72c2da4e9252') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(5406+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(5411+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(558+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(562+offset, 'test_current_exposure');",
									"        }",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=lumiere&maxDate=2019-12-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "lumiere"
								},
								{
									"key": "maxDate",
									"value": "2019-12-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - FIXED before 2020-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=lumiere&maxDate=2020-01-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "lumiere"
								},
								{
									"key": "maxDate",
									"value": "2020-01-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - FIXED between 2019-07-01 and 2019-09-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=lumiere&minDate=2019-07-01&maxDate=2019-09-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "lumiere"
								},
								{
									"key": "minDate",
									"value": "2019-07-01"
								},
								{
									"key": "maxDate",
									"value": "2019-09-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - FIXED between 2019-07-01 and 2019-12-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        ",
									"        if (jsonData.findings[i].id=='eb95d2ae-540b-46ef-a36c-72c2da4e9252') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(5406+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(5411+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(558+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(562+offset, 'test_current_exposure');",
									"        }",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=lumiere&minDate=2019-07-01&maxDate=2019-12-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "lumiere"
								},
								{
									"key": "minDate",
									"value": "2019-07-01"
								},
								{
									"key": "maxDate",
									"value": "2019-12-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - FIXED between 2019-12-01 and 2020-12-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=lumiere&minDate=2019-12-01&maxDate=2020-12-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "lumiere"
								},
								{
									"key": "minDate",
									"value": "2019-12-01"
								},
								{
									"key": "maxDate",
									"value": "2020-12-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - FIXED at 2019-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=lumiere&atDate=2019-01-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "lumiere"
								},
								{
									"key": "atDate",
									"value": "2019-01-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - FIXED at 2019-12-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        sum_total_exposure =+ jsonData.findings[i].total_exposure;",
									"        pm.expect(jsonData.findings[i]).to.not.have.property('current_exposure');",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"    ",
									"    pm.expect(sum_total_exposure).to.be.eql(4848, 'sum_total_exposure');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=lumiere&atDate=2019-12-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "lumiere"
								},
								{
									"key": "atDate",
									"value": "2019-12-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - FIXED at 2020-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=lumiere&atDate=2020-01-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "lumiere"
								},
								{
									"key": "atDate",
									"value": "2020-01-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - OPEN at 2019-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=lumiere&atDate=2019-01-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "lumiere"
								},
								{
									"key": "atDate",
									"value": "2019-01-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - OPEN at 2019-06-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    sum_total_exposure = 0;",
									"    sum_current_exposure = 0;",
									"",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        sum_total_exposure =+ jsonData.findings[i].total_exposure;",
									"        pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        sum_current_exposure =+ jsonData.findings[i].current_exposure;",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"    ",
									"    pm.expect(sum_total_exposure).to.be.eql(1238, 'sum_total_exposure');",
									"    pm.expect(sum_current_exposure).to.be.eql(1238, 'sum_current_exposure');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=lumiere&atDate=2019-06-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "lumiere"
								},
								{
									"key": "atDate",
									"value": "2019-06-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - OPEN at 2019-12-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=lumiere&atDate=2019-12-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "lumiere"
								},
								{
									"key": "atDate",
									"value": "2019-12-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - lumiere - OPEN at 2020-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    sum_total_exposure = 0;",
									"    sum_current_exposure = 0;",
									"",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        sum_total_exposure =+ jsonData.findings[i].total_exposure;",
									"        pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        sum_current_exposure =+ jsonData.findings[i].current_exposure;",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"    ",
									"    pm.expect(sum_total_exposure).to.be.eql(5410, 'sum_total_exposure');",
									"    pm.expect(sum_current_exposure).to.be.eql(561, 'sum_current_exposure');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=lumiere&atDate=2020-01-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "lumiere"
								},
								{
									"key": "atDate",
									"value": "2020-01-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - 0e6589fb-593c-4eff-8e6e-63c3eec229ac - OPEN after 2019-04-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"",
									"        if (jsonData.findings[i].id=='eb95d2ae-540b-46ef-a36c-72c2da4e9252') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(5406+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(5411+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(558+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(562+offset, 'test_current_exposure');",
									"        }",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=0e6589fb-593c-4eff-8e6e-63c3eec229ac&minDate=2019-04-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "0e6589fb-593c-4eff-8e6e-63c3eec229ac"
								},
								{
									"key": "minDate",
									"value": "2019-04-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - 0e6589fb-593c-4eff-8e6e-63c3eec229ac - OPEN after 2019-08-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"",
									"        if (jsonData.findings[i].id=='eb95d2ae-540b-46ef-a36c-72c2da4e9252') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(5406+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(5411+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(558+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(562+offset, 'test_current_exposure');",
									"        }",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=0e6589fb-593c-4eff-8e6e-63c3eec229ac&minDate=2019-08-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "0e6589fb-593c-4eff-8e6e-63c3eec229ac"
								},
								{
									"key": "minDate",
									"value": "2019-08-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - 0e6589fb-593c-4eff-8e6e-63c3eec229ac - OPEN after 2019-12-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        ",
									"        if (jsonData.findings[i].id=='eb95d2ae-540b-46ef-a36c-72c2da4e9252') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(5406+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(5411+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(558+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(562+offset, 'test_current_exposure');",
									"        }",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=0e6589fb-593c-4eff-8e6e-63c3eec229ac&minDate=2019-12-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "0e6589fb-593c-4eff-8e6e-63c3eec229ac"
								},
								{
									"key": "minDate",
									"value": "2019-12-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - 0e6589fb-593c-4eff-8e6e-63c3eec229ac - OPEN after 2020-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=0e6589fb-593c-4eff-8e6e-63c3eec229ac&minDate=2020-01-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "0e6589fb-593c-4eff-8e6e-63c3eec229ac"
								},
								{
									"key": "minDate",
									"value": "2020-01-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - 0e6589fb-593c-4eff-8e6e-63c3eec229ac - OPEN before 2019-04-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=0e6589fb-593c-4eff-8e6e-63c3eec229ac&maxDate=2019-04-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "0e6589fb-593c-4eff-8e6e-63c3eec229ac"
								},
								{
									"key": "maxDate",
									"value": "2019-04-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - 0e6589fb-593c-4eff-8e6e-63c3eec229ac - OPEN before 2019-08-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        ",
									"        if (jsonData.findings[i].id=='eb95d2ae-540b-46ef-a36c-72c2da4e9252') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(5406+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(5411+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(558+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(562+offset, 'test_current_exposure');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=0e6589fb-593c-4eff-8e6e-63c3eec229ac&maxDate=2019-08-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "0e6589fb-593c-4eff-8e6e-63c3eec229ac"
								},
								{
									"key": "maxDate",
									"value": "2019-08-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - 0e6589fb-593c-4eff-8e6e-63c3eec229ac - OPEN before 2019-12-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        ",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        ",
									"        if (jsonData.findings[i].id=='eb95d2ae-540b-46ef-a36c-72c2da4e9252') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(5406+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(5411+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(558+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(562+offset, 'test_current_exposure');",
									"        }",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=0e6589fb-593c-4eff-8e6e-63c3eec229ac&maxDate=2019-12-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "0e6589fb-593c-4eff-8e6e-63c3eec229ac"
								},
								{
									"key": "maxDate",
									"value": "2019-12-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - 0e6589fb-593c-4eff-8e6e-63c3eec229ac - OPEN before 2020-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        ",
									"        if (jsonData.findings[i].id=='eb95d2ae-540b-46ef-a36c-72c2da4e9252') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(5406+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(5411+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(558+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(562+offset, 'test_current_exposure');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=0e6589fb-593c-4eff-8e6e-63c3eec229ac&maxDate=2020-01-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "0e6589fb-593c-4eff-8e6e-63c3eec229ac"
								},
								{
									"key": "maxDate",
									"value": "2020-01-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - 0e6589fb-593c-4eff-8e6e-63c3eec229ac - OPEN between 2019-07-01 and 2019-09-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        ",
									"        if (jsonData.findings[i].id=='eb95d2ae-540b-46ef-a36c-72c2da4e9252') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(5406+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(5411+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(558+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(562+offset, 'test_current_exposure');",
									"        }",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=0e6589fb-593c-4eff-8e6e-63c3eec229ac&minDate=2019-07-01&maxDate=2019-09-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "0e6589fb-593c-4eff-8e6e-63c3eec229ac"
								},
								{
									"key": "minDate",
									"value": "2019-07-01"
								},
								{
									"key": "maxDate",
									"value": "2019-09-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - 0e6589fb-593c-4eff-8e6e-63c3eec229ac - OPEN between 2019-09-01 and 2019-10-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=0e6589fb-593c-4eff-8e6e-63c3eec229ac&minDate=2019-09-01&maxDate=2019-10-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "0e6589fb-593c-4eff-8e6e-63c3eec229ac"
								},
								{
									"key": "minDate",
									"value": "2019-09-01"
								},
								{
									"key": "maxDate",
									"value": "2019-10-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - 0e6589fb-593c-4eff-8e6e-63c3eec229ac - OPEN between 2019-08-02 and 2019-08-05",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=0e6589fb-593c-4eff-8e6e-63c3eec229ac&minDate=2019-08-02&maxDate=2019-08-05&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "0e6589fb-593c-4eff-8e6e-63c3eec229ac"
								},
								{
									"key": "minDate",
									"value": "2019-08-02"
								},
								{
									"key": "maxDate",
									"value": "2019-08-05"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - 0e6589fb-593c-4eff-8e6e-63c3eec229ac - FIXED after 2019-04-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=0e6589fb-593c-4eff-8e6e-63c3eec229ac&minDate=2019-04-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "0e6589fb-593c-4eff-8e6e-63c3eec229ac"
								},
								{
									"key": "minDate",
									"value": "2019-04-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - 0e6589fb-593c-4eff-8e6e-63c3eec229ac - FIXED after 2019-08-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=0e6589fb-593c-4eff-8e6e-63c3eec229ac&minDate=2019-08-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "0e6589fb-593c-4eff-8e6e-63c3eec229ac"
								},
								{
									"key": "minDate",
									"value": "2019-08-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - 0e6589fb-593c-4eff-8e6e-63c3eec229ac - FIXED after 2019-12-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=0e6589fb-593c-4eff-8e6e-63c3eec229ac&minDate=2019-12-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "0e6589fb-593c-4eff-8e6e-63c3eec229ac"
								},
								{
									"key": "minDate",
									"value": "2019-12-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - 0e6589fb-593c-4eff-8e6e-63c3eec229ac - FIXED after 2020-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=0e6589fb-593c-4eff-8e6e-63c3eec229ac&minDate=2020-01-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "0e6589fb-593c-4eff-8e6e-63c3eec229ac"
								},
								{
									"key": "minDate",
									"value": "2020-01-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - 0e6589fb-593c-4eff-8e6e-63c3eec229ac - FIXED before 2019-04-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=0e6589fb-593c-4eff-8e6e-63c3eec229ac&maxDate=2019-04-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "0e6589fb-593c-4eff-8e6e-63c3eec229ac"
								},
								{
									"key": "maxDate",
									"value": "2019-04-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - 0e6589fb-593c-4eff-8e6e-63c3eec229ac - FIXED before 2019-08-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        ",
									"        if (jsonData.findings[i].id=='eb95d2ae-540b-46ef-a36c-72c2da4e9252') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(5406+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(5411+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(558+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(562+offset, 'test_current_exposure');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=0e6589fb-593c-4eff-8e6e-63c3eec229ac&maxDate=2019-08-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "0e6589fb-593c-4eff-8e6e-63c3eec229ac"
								},
								{
									"key": "maxDate",
									"value": "2019-08-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - 0e6589fb-593c-4eff-8e6e-63c3eec229ac - FIXED before 2019-12-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        ",
									"        if (jsonData.findings[i].id=='eb95d2ae-540b-46ef-a36c-72c2da4e9252') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(5406+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(5411+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(558+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(562+offset, 'test_current_exposure');",
									"        }",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=0e6589fb-593c-4eff-8e6e-63c3eec229ac&maxDate=2019-12-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "0e6589fb-593c-4eff-8e6e-63c3eec229ac"
								},
								{
									"key": "maxDate",
									"value": "2019-12-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - 0e6589fb-593c-4eff-8e6e-63c3eec229ac - FIXED before 2020-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=0e6589fb-593c-4eff-8e6e-63c3eec229ac&maxDate=2020-01-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "0e6589fb-593c-4eff-8e6e-63c3eec229ac"
								},
								{
									"key": "maxDate",
									"value": "2020-01-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - 0e6589fb-593c-4eff-8e6e-63c3eec229ac - FIXED between 2019-07-01 and 2019-09-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=0e6589fb-593c-4eff-8e6e-63c3eec229ac&minDate=2019-07-01&maxDate=2019-09-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "0e6589fb-593c-4eff-8e6e-63c3eec229ac"
								},
								{
									"key": "minDate",
									"value": "2019-07-01"
								},
								{
									"key": "maxDate",
									"value": "2019-09-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - 0e6589fb-593c-4eff-8e6e-63c3eec229ac - FIXED between 2019-07-01 and 2019-12-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        if (jsonData.findings[i].status===\"OPEN\"){",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        }",
									"        ",
									"        if (jsonData.findings[i].id=='eb95d2ae-540b-46ef-a36c-72c2da4e9252') {",
									"            offset = Math.floor(Math.abs((new Date() - new Date(2020, 0, 1, 0, 0, 0)) / (60*60*1000)));",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.gte(5406+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].total_exposure).to.be.lte(5411+offset, 'test_total_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.gte(558+offset, 'test_current_exposure');",
									"            pm.expect(jsonData.findings[i].current_exposure).to.be.lte(562+offset, 'test_current_exposure');",
									"        }",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=0e6589fb-593c-4eff-8e6e-63c3eec229ac&minDate=2019-07-01&maxDate=2019-12-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "0e6589fb-593c-4eff-8e6e-63c3eec229ac"
								},
								{
									"key": "minDate",
									"value": "2019-07-01"
								},
								{
									"key": "maxDate",
									"value": "2019-12-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - 0e6589fb-593c-4eff-8e6e-63c3eec229ac - FIXED between 2019-12-01 and 2020-12-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=0e6589fb-593c-4eff-8e6e-63c3eec229ac&minDate=2019-12-01&maxDate=2020-12-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "0e6589fb-593c-4eff-8e6e-63c3eec229ac"
								},
								{
									"key": "minDate",
									"value": "2019-12-01"
								},
								{
									"key": "maxDate",
									"value": "2020-12-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - 0e6589fb-593c-4eff-8e6e-63c3eec229ac - FIXED at 2019-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=0e6589fb-593c-4eff-8e6e-63c3eec229ac&atDate=2019-01-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "0e6589fb-593c-4eff-8e6e-63c3eec229ac"
								},
								{
									"key": "atDate",
									"value": "2019-01-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - 0e6589fb-593c-4eff-8e6e-63c3eec229ac - FIXED at 2019-12-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        sum_total_exposure =+ jsonData.findings[i].total_exposure;",
									"        pm.expect(jsonData.findings[i]).to.not.have.property('current_exposure');",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"    ",
									"    pm.expect(sum_total_exposure).to.be.eql(4848, 'sum_total_exposure');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=0e6589fb-593c-4eff-8e6e-63c3eec229ac&atDate=2019-12-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "0e6589fb-593c-4eff-8e6e-63c3eec229ac"
								},
								{
									"key": "atDate",
									"value": "2019-12-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - 0e6589fb-593c-4eff-8e6e-63c3eec229ac - FIXED at 2020-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=0e6589fb-593c-4eff-8e6e-63c3eec229ac&atDate=2020-01-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "0e6589fb-593c-4eff-8e6e-63c3eec229ac"
								},
								{
									"key": "atDate",
									"value": "2020-01-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - 0e6589fb-593c-4eff-8e6e-63c3eec229ac - OPEN at 2019-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=0e6589fb-593c-4eff-8e6e-63c3eec229ac&atDate=2019-01-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "0e6589fb-593c-4eff-8e6e-63c3eec229ac"
								},
								{
									"key": "atDate",
									"value": "2019-01-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - 0e6589fb-593c-4eff-8e6e-63c3eec229ac - OPEN at 2019-06-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    sum_total_exposure = 0;",
									"    sum_current_exposure = 0;",
									"",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        sum_total_exposure =+ jsonData.findings[i].total_exposure;",
									"        pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        sum_current_exposure =+ jsonData.findings[i].current_exposure;",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"    ",
									"    pm.expect(sum_total_exposure).to.be.eql(1238, 'sum_total_exposure');",
									"    pm.expect(sum_current_exposure).to.be.eql(1238, 'sum_current_exposure');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=0e6589fb-593c-4eff-8e6e-63c3eec229ac&atDate=2019-06-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "0e6589fb-593c-4eff-8e6e-63c3eec229ac"
								},
								{
									"key": "atDate",
									"value": "2019-06-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - 0e6589fb-593c-4eff-8e6e-63c3eec229ac - OPEN at 2019-12-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=0e6589fb-593c-4eff-8e6e-63c3eec229ac&atDate=2019-12-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "0e6589fb-593c-4eff-8e6e-63c3eec229ac"
								},
								{
									"key": "atDate",
									"value": "2019-12-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List findings - 0e6589fb-593c-4eff-8e6e-63c3eec229ac - OPEN at 2020-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    sum_total_exposure = 0;",
									"    sum_current_exposure = 0;",
									"",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        sum_total_exposure =+ jsonData.findings[i].total_exposure;",
									"        pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        sum_current_exposure =+ jsonData.findings[i].current_exposure;",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"    ",
									"    pm.expect(sum_total_exposure).to.be.eql(5410, 'sum_total_exposure');",
									"    pm.expect(sum_current_exposure).to.be.eql(561, 'sum_current_exposure');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=0e6589fb-593c-4eff-8e6e-63c3eec229ac&atDate=2020-01-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "0e6589fb-593c-4eff-8e6e-63c3eec229ac"
								},
								{
									"key": "atDate",
									"value": "2020-01-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Should return currently expired finding - kemp - at 2019-11-08 as OPEN, including a FALSE POSITIVE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(2, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    sum_total_exposure = 0;",
									"    sum_current_exposure = 0;",
									"",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        if (jsonData.findings[i].id ===\"de67ebcb-1247-4664-b311-5430a9a5ee46\") {",
									"            pm.expect(jsonData.findings[i]).to.have.property('status').to.be.eql('FALSE_POSITIVE');",
									"        } else {",
									"            pm.expect(jsonData.findings[i]).to.have.property('status').to.be.eql('OPEN');",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"            sum_current_exposure = sum_current_exposure + jsonData.findings[i].current_exposure;",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        sum_total_exposure =  sum_total_exposure + jsonData.findings[i].total_exposure;",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"    ",
									"    pm.expect(sum_total_exposure).to.be.eql(735, 'sum_total_exposure');",
									"    pm.expect(sum_current_exposure).to.be.eql(735, 'sum_current_exposure');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(2, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=kemp&atDate=2019-11-08",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "kemp"
								},
								{
									"key": "atDate",
									"value": "2019-11-08"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Should return currently expired finding - 504b9ccd-5923-4e7a-bc7c-a142fb03de19 - at 2019-11-08 as OPEN, including a FALSE POSITIVE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(2, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    sum_total_exposure = 0;",
									"    sum_current_exposure = 0;",
									"",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        if (jsonData.findings[i].id ===\"de67ebcb-1247-4664-b311-5430a9a5ee46\") {",
									"            pm.expect(jsonData.findings[i]).to.have.property('status').to.be.eql('FALSE_POSITIVE');",
									"        } else {",
									"            pm.expect(jsonData.findings[i]).to.have.property('status').to.be.eql('OPEN');",
									"            pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"            sum_current_exposure = sum_current_exposure + jsonData.findings[i].current_exposure;",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        sum_total_exposure =  sum_total_exposure + jsonData.findings[i].total_exposure;",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"    ",
									"    pm.expect(sum_total_exposure).to.be.eql(735, 'sum_total_exposure');",
									"    pm.expect(sum_current_exposure).to.be.eql(735, 'sum_current_exposure');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(2, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=504b9ccd-5923-4e7a-bc7c-a142fb03de19&atDate=2019-11-08",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "504b9ccd-5923-4e7a-bc7c-a142fb03de19"
								},
								{
									"key": "atDate",
									"value": "2019-11-08"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Should return currently expired finding - kemp - OPEN at 2019-10-10",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    sum_total_exposure = 0;",
									"    sum_current_exposure = 0;",
									"",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status').to.be.eql('OPEN');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        sum_total_exposure =+ jsonData.findings[i].total_exposure;",
									"        pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        sum_current_exposure =+ jsonData.findings[i].current_exposure;",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"    ",
									"    pm.expect(sum_total_exposure).to.be.eql(39, 'sum_total_exposure');",
									"    pm.expect(sum_current_exposure).to.be.eql(39, 'sum_current_exposure');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=kemp&atDate=2019-10-10&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "kemp"
								},
								{
									"key": "atDate",
									"value": "2019-10-10"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Should return currently expired finding - 504b9ccd-5923-4e7a-bc7c-a142fb03de19 - OPEN at 2019-10-10",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(1, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    sum_total_exposure = 0;",
									"    sum_current_exposure = 0;",
									"",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status').to.be.eql('OPEN');",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        sum_total_exposure =+ jsonData.findings[i].total_exposure;",
									"        pm.expect(jsonData.findings[i]).to.have.property('current_exposure');",
									"        sum_current_exposure =+ jsonData.findings[i].current_exposure;",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"    ",
									"    pm.expect(sum_total_exposure).to.be.eql(39, 'sum_total_exposure');",
									"    pm.expect(sum_current_exposure).to.be.eql(39, 'sum_current_exposure');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(1, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=504b9ccd-5923-4e7a-bc7c-a142fb03de19&atDate=2019-10-10&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "504b9ccd-5923-4e7a-bc7c-a142fb03de19"
								},
								{
									"key": "atDate",
									"value": "2019-10-10"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Should NOT return currently expired finding - kemp - FIXED at 2020-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=kemp&atDate=2020-01-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "kemp"
								},
								{
									"key": "atDate",
									"value": "2020-01-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Should NOT return currently expired finding - 504b9ccd-5923-4e7a-bc7c-a142fb03de19 - FIXED at 2020-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=504b9ccd-5923-4e7a-bc7c-a142fb03de19&atDate=2020-01-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "504b9ccd-5923-4e7a-bc7c-a142fb03de19"
								},
								{
									"key": "atDate",
									"value": "2020-01-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Should NOT return currently expired finding - kemp - OPEN at 2020-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=kemp&atDate=2020-01-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "kemp"
								},
								{
									"key": "atDate",
									"value": "2020-01-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Should NOT return currently expired finding - 504b9ccd-5923-4e7a-bc7c-a142fb03de19 - OPEN at 2020-01-01",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(0, 'Wrong array length');",
									"});",
									"",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=504b9ccd-5923-4e7a-bc7c-a142fb03de19&atDate=2020-01-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "504b9ccd-5923-4e7a-bc7c-a142fb03de19"
								},
								{
									"key": "atDate",
									"value": "2020-01-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Should return currently expired finding - kemp - at 2020-01-01 as EXPIRED, including a FALSE_POSITIVE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(2, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    sum_current_exposure = 0;",
									"",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        if (jsonData.findings[i].id ===\"de67ebcb-1247-4664-b311-5430a9a5ee46\") {",
									"            pm.expect(jsonData.findings[i]).to.have.property('status').to.be.eql('FALSE_POSITIVE');",
									"        } else {",
									"            pm.expect(jsonData.findings[i]).to.have.property('status').to.be.eql('EXPIRED');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        sum_total_exposure =+ jsonData.findings[i].total_exposure;",
									"        pm.expect(jsonData.findings[i]).to.not.have.property('current_exposure');",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"    ",
									"    pm.expect(sum_total_exposure).to.be.eql(0, 'sum_total_exposure');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(2, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?tag=kemp&atDate=2020-01-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "tag",
									"value": "kemp"
								},
								{
									"key": "atDate",
									"value": "2020-01-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Should return currently expired finding - 504b9ccd-5923-4e7a-bc7c-a142fb03de19 - at 2020-01-01 as EXPIRED, including a FALSE_POSITIVE",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.findings).to.be.an('array');",
									"    pm.expect(jsonData.findings.length).to.be.eql(2, 'Wrong array length');",
									"    previousID = ''",
									"    ",
									"    sum_current_exposure = 0;",
									"",
									"    for (i=0; i<jsonData.findings.length;i++){",
									"        pm.expect(jsonData.findings[i]).to.have.property('id');",
									"        pm.expect(jsonData.findings[i]).to.have.property('details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('impact_details');",
									"        pm.expect(jsonData.findings[i]).to.have.property('status');",
									"        if (jsonData.findings[i].id ===\"de67ebcb-1247-4664-b311-5430a9a5ee46\") {",
									"            pm.expect(jsonData.findings[i]).to.have.property('status').to.be.eql('FALSE_POSITIVE');",
									"        } else {",
									"            pm.expect(jsonData.findings[i]).to.have.property('status').to.be.eql('EXPIRED');",
									"        }",
									"        pm.expect(jsonData.findings[i]).to.have.property('score');",
									"        pm.expect(jsonData.findings[i]).to.have.property('total_exposure');",
									"        sum_total_exposure =+ jsonData.findings[i].total_exposure;",
									"        pm.expect(jsonData.findings[i]).to.not.have.property('current_exposure');",
									"        pm.expect(jsonData.findings[i]).to.have.property('resources');",
									"        pm.expect(jsonData.findings[i].resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('issue');",
									"        pm.expect(jsonData.findings[i].issue).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('description');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.findings[i].issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.findings[i]).to.have.property('target');",
									"        pm.expect(jsonData.findings[i].target).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('identifier');",
									"        pm.expect(jsonData.findings[i].target).to.have.property('teams');",
									"        pm.expect(jsonData.findings[i].target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.teams.length;j++){",
									"            pm.expect(jsonData.findings[i].target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.findings[i].target).to.have.property('tags');",
									"        pm.expect(jsonData.findings[i].target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.findings[i].target.tags.length;j++){",
									"            pm.expect(jsonData.findings[i].target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.findings[i]).to.have.property('source');",
									"        pm.expect(jsonData.findings[i].source).to.be.an('Object');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('id');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('name');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('component');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('instance');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('options');",
									"        pm.expect(jsonData.findings[i].source).to.have.property('time');",
									"        ",
									"        pm.expect(jsonData.findings[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.findings[i].id;",
									"    }",
									"    ",
									"    pm.expect(sum_total_exposure).to.be.eql(0, 'sum_total_exposure');",
									"});",
									"",
									"pm.test(\"Findings Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(2, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/findings?team=504b9ccd-5923-4e7a-bc7c-a142fb03de19&atDate=2020-01-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings"
							],
							"query": [
								{
									"key": "team",
									"value": "504b9ccd-5923-4e7a-bc7c-a142fb03de19"
								},
								{
									"key": "atDate",
									"value": "2020-01-01"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Stats",
			"item": [
				{
					"name": "Size",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('size');",
									"    pm.expect(jsonData.size).to.be.an('object');",
									"    pm.expect(jsonData.size).to.have.property('sources').to.be.eql(220);",
									"    pm.expect(jsonData.size).to.have.property('targets').to.be.eql(28);",
									"    pm.expect(jsonData.size).to.have.property('issues').to.be.eql(25);",
									"    pm.expect(jsonData.size).to.have.property('findings').to.be.eql(33);",
									"    pm.expect(jsonData.size).to.have.property('finding_events').to.be.eql(267);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/size",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"size"
							]
						}
					},
					"response": []
				},
				{
					"name": "Open",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(2);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(12);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(14);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - lederberg",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(3);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(1);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?tag=lederberg",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "tag",
									"value": "lederberg"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - 313898a6-3739-4e64-b80f-c4cbd0d3bc0d",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(3);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(1);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?team=313898a6-3739-4e64-b80f-c4cbd0d3bc0d",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "team",
									"value": "313898a6-3739-4e64-b80f-c4cbd0d3bc0d"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - lederberg or jang or cori",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(5);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(2);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?tags=lederberg,jang,cori",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "tags",
									"value": "lederberg,jang,cori"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - 313898a6-3739-4e64-b80f-c4cbd0d3bc0d or e9250fc8-ee94-45aa-9e99-d7786fed9de2 or 578c873a-f5b1-4959-986c-ef1421822433",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(5);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(2);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?teams=313898a6-3739-4e64-b80f-c4cbd0d3bc0d,e9250fc8-ee94-45aa-9e99-d7786fed9de2,578c873a-f5b1-4959-986c-ef1421822433",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "teams",
									"value": "313898a6-3739-4e64-b80f-c4cbd0d3bc0d,e9250fc8-ee94-45aa-9e99-d7786fed9de2,578c873a-f5b1-4959-986c-ef1421822433"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - lederberg - minDate: April 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(2);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(1);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?tag=lederberg&minDate=2019-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "tag",
									"value": "lederberg"
								},
								{
									"key": "minDate",
									"value": "2019-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - 313898a6-3739-4e64-b80f-c4cbd0d3bc0d - minDate: April 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(2);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(1);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?team=313898a6-3739-4e64-b80f-c4cbd0d3bc0d&minDate=2019-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "team",
									"value": "313898a6-3739-4e64-b80f-c4cbd0d3bc0d"
								},
								{
									"key": "minDate",
									"value": "2019-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - lederberg - minDate: May 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?tag=lederberg&minDate=2019-05-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "tag",
									"value": "lederberg"
								},
								{
									"key": "minDate",
									"value": "2019-05-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - 313898a6-3739-4e64-b80f-c4cbd0d3bc0d - minDate: May 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?team=313898a6-3739-4e64-b80f-c4cbd0d3bc0d&minDate=2019-05-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "team",
									"value": "313898a6-3739-4e64-b80f-c4cbd0d3bc0d"
								},
								{
									"key": "minDate",
									"value": "2019-05-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - lederberg - maxDate: April 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(1);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?tag=lederberg&maxDate=2019-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "tag",
									"value": "lederberg"
								},
								{
									"key": "maxDate",
									"value": "2019-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - 313898a6-3739-4e64-b80f-c4cbd0d3bc0d - maxDate: April 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(1);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?team=313898a6-3739-4e64-b80f-c4cbd0d3bc0d&maxDate=2019-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "team",
									"value": "313898a6-3739-4e64-b80f-c4cbd0d3bc0d"
								},
								{
									"key": "maxDate",
									"value": "2019-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - lederberg - maxDate: May 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(3);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(1);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?tag=lederberg&maxDate=2019-05-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "tag",
									"value": "lederberg"
								},
								{
									"key": "maxDate",
									"value": "2019-05-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - 313898a6-3739-4e64-b80f-c4cbd0d3bc0d - maxDate: May 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(3);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(1);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?team=313898a6-3739-4e64-b80f-c4cbd0d3bc0d&maxDate=2019-05-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "team",
									"value": "313898a6-3739-4e64-b80f-c4cbd0d3bc0d"
								},
								{
									"key": "maxDate",
									"value": "2019-05-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - lederberg - minDate: April 2019 & maxDate: May 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(2);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(1);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?tag=lederberg&minDate=2019-04-01&maxDate=2019-05-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "tag",
									"value": "lederberg"
								},
								{
									"key": "minDate",
									"value": "2019-04-01"
								},
								{
									"key": "maxDate",
									"value": "2019-05-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - 313898a6-3739-4e64-b80f-c4cbd0d3bc0d - minDate: April 2019 & maxDate: May 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(2);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(1);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?team=313898a6-3739-4e64-b80f-c4cbd0d3bc0d&minDate=2019-04-01&maxDate=2019-05-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "team",
									"value": "313898a6-3739-4e64-b80f-c4cbd0d3bc0d"
								},
								{
									"key": "minDate",
									"value": "2019-04-01"
								},
								{
									"key": "maxDate",
									"value": "2019-05-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - lederberg - minDate: May 2019 & maxDate: Jun 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?tag=lederberg&minDate=2019-05-01&maxDate=2019-06-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "tag",
									"value": "lederberg"
								},
								{
									"key": "minDate",
									"value": "2019-05-01"
								},
								{
									"key": "maxDate",
									"value": "2019-06-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - 313898a6-3739-4e64-b80f-c4cbd0d3bc0d - minDate: May 2019 & maxDate: Jun 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?team=313898a6-3739-4e64-b80f-c4cbd0d3bc0d&minDate=2019-05-01&maxDate=2019-06-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "team",
									"value": "313898a6-3739-4e64-b80f-c4cbd0d3bc0d"
								},
								{
									"key": "minDate",
									"value": "2019-05-01"
								},
								{
									"key": "maxDate",
									"value": "2019-06-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - lederberg - atDate: Apr 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(1);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?tag=lederberg&atDate=2019-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "tag",
									"value": "lederberg"
								},
								{
									"key": "atDate",
									"value": "2019-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - 313898a6-3739-4e64-b80f-c4cbd0d3bc0d - atDate: Apr 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(1);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?team=313898a6-3739-4e64-b80f-c4cbd0d3bc0d&atDate=2019-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "team",
									"value": "313898a6-3739-4e64-b80f-c4cbd0d3bc0d"
								},
								{
									"key": "atDate",
									"value": "2019-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - lederberg - atDate: May 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(3);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(1);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?tag=lederberg&atDate=2019-05-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "tag",
									"value": "lederberg"
								},
								{
									"key": "atDate",
									"value": "2019-05-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - 313898a6-3739-4e64-b80f-c4cbd0d3bc0d - atDate: May 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(3);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(1);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?team=313898a6-3739-4e64-b80f-c4cbd0d3bc0d&atDate=2019-05-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "team",
									"value": "313898a6-3739-4e64-b80f-c4cbd0d3bc0d"
								},
								{
									"key": "atDate",
									"value": "2019-05-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - kemp - atDate 2019-11-08 - should count expired",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(1);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?tag=kemp&atDate=2019-11-08",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "tag",
									"value": "kemp"
								},
								{
									"key": "atDate",
									"value": "2019-11-08"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - 504b9ccd-5923-4e7a-bc7c-a142fb03de19 - atDate 2019-11-08 - should count expired",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(1);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?team=504b9ccd-5923-4e7a-bc7c-a142fb03de19&atDate=2019-11-08",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "team",
									"value": "504b9ccd-5923-4e7a-bc7c-a142fb03de19"
								},
								{
									"key": "atDate",
									"value": "2019-11-08"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - kemp - atDate 2020-01-08 - should not count expired",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?tag=kemp&atDate=2020-01-08",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "tag",
									"value": "kemp"
								},
								{
									"key": "atDate",
									"value": "2020-01-08"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - 504b9ccd-5923-4e7a-bc7c-a142fb03de19 - atDate 2020-01-08 - should not count expired",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?team=504b9ccd-5923-4e7a-bc7c-a142fb03de19&atDate=2020-01-08",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "team",
									"value": "504b9ccd-5923-4e7a-bc7c-a142fb03de19"
								},
								{
									"key": "atDate",
									"value": "2020-01-08"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - Filter by labels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(1);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?labels=HTTP",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "labels",
									"value": "HTTP"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Open - Filter by multiple labels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('open_issues');",
									"    pm.expect(jsonData.open_issues).to.be.an('object');",
									"    pm.expect(jsonData.open_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.open_issues).to.have.property('low').to.be.eql(1);",
									"    pm.expect(jsonData.open_issues).to.have.property('informational').to.be.eql(1);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/open?labels=HTTP,TLS,issue",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"open"
							],
							"query": [
								{
									"key": "labels",
									"value": "HTTP,TLS,issue"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fixed",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fixed_issues');",
									"    pm.expect(jsonData.fixed_issues).to.be.an('object');",
									"    pm.expect(jsonData.fixed_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('low').to.be.eql(1);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('informational').to.be.eql(2);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/fixed",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"fixed"
							]
						}
					},
					"response": []
				},
				{
					"name": "Fixed - torvalds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fixed_issues');",
									"    pm.expect(jsonData.fixed_issues).to.be.an('object');",
									"    pm.expect(jsonData.fixed_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('low').to.be.eql(1);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/fixed?tag=torvalds",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"fixed"
							],
							"query": [
								{
									"key": "tag",
									"value": "torvalds"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fixed - 728e65fc-d568-4c1f-ac6b-a032b9b02b7c",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fixed_issues');",
									"    pm.expect(jsonData.fixed_issues).to.be.an('object');",
									"    pm.expect(jsonData.fixed_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('low').to.be.eql(1);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/fixed?team=728e65fc-d568-4c1f-ac6b-a032b9b02b7c",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"fixed"
							],
							"query": [
								{
									"key": "team",
									"value": "728e65fc-d568-4c1f-ac6b-a032b9b02b7c"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fixed - torvalds and satoshi and blackwell",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fixed_issues');",
									"    pm.expect(jsonData.fixed_issues).to.be.an('object');",
									"    pm.expect(jsonData.fixed_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('low').to.be.eql(1);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('informational').to.be.eql(2);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/fixed?tags=torvalds,satoshi,blackwell",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"fixed"
							],
							"query": [
								{
									"key": "tags",
									"value": "torvalds,satoshi,blackwell"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fixed - 728e65fc-d568-4c1f-ac6b-a032b9b02b7c and d36391f4-a063-481b-b02f-21811913b01d and df33e608-4952-4a8f-8828-e27006115b46",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fixed_issues');",
									"    pm.expect(jsonData.fixed_issues).to.be.an('object');",
									"    pm.expect(jsonData.fixed_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('low').to.be.eql(1);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('informational').to.be.eql(2);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/fixed?teams=728e65fc-d568-4c1f-ac6b-a032b9b02b7c,d36391f4-a063-481b-b02f-21811913b01d,df33e608-4952-4a8f-8828-e27006115b46",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"fixed"
							],
							"query": [
								{
									"key": "teams",
									"value": "728e65fc-d568-4c1f-ac6b-a032b9b02b7c,d36391f4-a063-481b-b02f-21811913b01d,df33e608-4952-4a8f-8828-e27006115b46"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fixed - torvalds - minDate: Apr 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fixed_issues');",
									"    pm.expect(jsonData.fixed_issues).to.be.an('object');",
									"    pm.expect(jsonData.fixed_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('low').to.be.eql(1);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/fixed?tag=torvalds&minDate=2019-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"fixed"
							],
							"query": [
								{
									"key": "tag",
									"value": "torvalds"
								},
								{
									"key": "minDate",
									"value": "2019-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fixed - 728e65fc-d568-4c1f-ac6b-a032b9b02b7c - minDate: Apr 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fixed_issues');",
									"    pm.expect(jsonData.fixed_issues).to.be.an('object');",
									"    pm.expect(jsonData.fixed_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('low').to.be.eql(1);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/fixed?team=728e65fc-d568-4c1f-ac6b-a032b9b02b7c&minDate=2019-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"fixed"
							],
							"query": [
								{
									"key": "team",
									"value": "728e65fc-d568-4c1f-ac6b-a032b9b02b7c"
								},
								{
									"key": "minDate",
									"value": "2019-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fixed - torvalds - minDate: April 2020",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fixed_issues');",
									"    pm.expect(jsonData.fixed_issues).to.be.an('object');",
									"    pm.expect(jsonData.fixed_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/fixed?tag=torvalds&minDate=2020-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"fixed"
							],
							"query": [
								{
									"key": "tag",
									"value": "torvalds"
								},
								{
									"key": "minDate",
									"value": "2020-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fixed - 728e65fc-d568-4c1f-ac6b-a032b9b02b7c - minDate: April 2020",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fixed_issues');",
									"    pm.expect(jsonData.fixed_issues).to.be.an('object');",
									"    pm.expect(jsonData.fixed_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/fixed?team=728e65fc-d568-4c1f-ac6b-a032b9b02b7c&minDate=2020-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"fixed"
							],
							"query": [
								{
									"key": "team",
									"value": "728e65fc-d568-4c1f-ac6b-a032b9b02b7c"
								},
								{
									"key": "minDate",
									"value": "2020-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fixed - torvalds - maxDate: Apr 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fixed_issues');",
									"    pm.expect(jsonData.fixed_issues).to.be.an('object');",
									"    pm.expect(jsonData.fixed_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/fixed?tag=torvalds&maxDate=2019-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"fixed"
							],
							"query": [
								{
									"key": "tag",
									"value": "torvalds"
								},
								{
									"key": "maxDate",
									"value": "2019-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fixed - 728e65fc-d568-4c1f-ac6b-a032b9b02b7c - maxDate: Apr 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fixed_issues');",
									"    pm.expect(jsonData.fixed_issues).to.be.an('object');",
									"    pm.expect(jsonData.fixed_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/fixed?team=728e65fc-d568-4c1f-ac6b-a032b9b02b7c&maxDate=2019-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"fixed"
							],
							"query": [
								{
									"key": "team",
									"value": "728e65fc-d568-4c1f-ac6b-a032b9b02b7c"
								},
								{
									"key": "maxDate",
									"value": "2019-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fixed - torvalds - maxDate: Apr 2020",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fixed_issues');",
									"    pm.expect(jsonData.fixed_issues).to.be.an('object');",
									"    pm.expect(jsonData.fixed_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('low').to.be.eql(1);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/fixed?tag=torvalds&maxDate=2020-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"fixed"
							],
							"query": [
								{
									"key": "tag",
									"value": "torvalds"
								},
								{
									"key": "maxDate",
									"value": "2020-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fixed - 728e65fc-d568-4c1f-ac6b-a032b9b02b7c - maxDate: Apr 2020",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fixed_issues');",
									"    pm.expect(jsonData.fixed_issues).to.be.an('object');",
									"    pm.expect(jsonData.fixed_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('low').to.be.eql(1);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/fixed?team=728e65fc-d568-4c1f-ac6b-a032b9b02b7c&maxDate=2020-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"fixed"
							],
							"query": [
								{
									"key": "team",
									"value": "728e65fc-d568-4c1f-ac6b-a032b9b02b7c"
								},
								{
									"key": "maxDate",
									"value": "2020-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fixed - torvalds - minDate: Dec 2019 - maxDate: Dec 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fixed_issues');",
									"    pm.expect(jsonData.fixed_issues).to.be.an('object');",
									"    pm.expect(jsonData.fixed_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/fixed?tag=torvalds&minDate=2019-12-01&maxDate=2019-12-31",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"fixed"
							],
							"query": [
								{
									"key": "tag",
									"value": "torvalds"
								},
								{
									"key": "minDate",
									"value": "2019-12-01"
								},
								{
									"key": "maxDate",
									"value": "2019-12-31"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fixed - 728e65fc-d568-4c1f-ac6b-a032b9b02b7c - minDate: Dec 2019 - maxDate: Dec 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fixed_issues');",
									"    pm.expect(jsonData.fixed_issues).to.be.an('object');",
									"    pm.expect(jsonData.fixed_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/fixed?team=728e65fc-d568-4c1f-ac6b-a032b9b02b7c&minDate=2019-12-01&maxDate=2019-12-31",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"fixed"
							],
							"query": [
								{
									"key": "team",
									"value": "728e65fc-d568-4c1f-ac6b-a032b9b02b7c"
								},
								{
									"key": "minDate",
									"value": "2019-12-01"
								},
								{
									"key": "maxDate",
									"value": "2019-12-31"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fixed - torvalds - minDate: Jan 2020 - maxDate: Jan 2020",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fixed_issues');",
									"    pm.expect(jsonData.fixed_issues).to.be.an('object');",
									"    pm.expect(jsonData.fixed_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('low').to.be.eql(1);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/fixed?tag=torvalds&minDate=2020-01-01&maxDate=2020-01-31",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"fixed"
							],
							"query": [
								{
									"key": "tag",
									"value": "torvalds"
								},
								{
									"key": "minDate",
									"value": "2020-01-01"
								},
								{
									"key": "maxDate",
									"value": "2020-01-31"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fixed - 728e65fc-d568-4c1f-ac6b-a032b9b02b7c - minDate: Jan 2020 - maxDate: Jan 2020",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fixed_issues');",
									"    pm.expect(jsonData.fixed_issues).to.be.an('object');",
									"    pm.expect(jsonData.fixed_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('low').to.be.eql(1);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/fixed?team=728e65fc-d568-4c1f-ac6b-a032b9b02b7c&minDate=2020-01-01&maxDate=2020-01-31",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"fixed"
							],
							"query": [
								{
									"key": "team",
									"value": "728e65fc-d568-4c1f-ac6b-a032b9b02b7c"
								},
								{
									"key": "minDate",
									"value": "2020-01-01"
								},
								{
									"key": "maxDate",
									"value": "2020-01-31"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fixed - torvalds - atDate: Dec 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fixed_issues');",
									"    pm.expect(jsonData.fixed_issues).to.be.an('object');",
									"    pm.expect(jsonData.fixed_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/fixed?tag=torvalds&atDate=2019-12-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"fixed"
							],
							"query": [
								{
									"key": "tag",
									"value": "torvalds"
								},
								{
									"key": "atDate",
									"value": "2019-12-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fixed - 728e65fc-d568-4c1f-ac6b-a032b9b02b7c - atDate: Dec 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fixed_issues');",
									"    pm.expect(jsonData.fixed_issues).to.be.an('object');",
									"    pm.expect(jsonData.fixed_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/fixed?team=728e65fc-d568-4c1f-ac6b-a032b9b02b7c&atDate=2019-12-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"fixed"
							],
							"query": [
								{
									"key": "team",
									"value": "728e65fc-d568-4c1f-ac6b-a032b9b02b7c"
								},
								{
									"key": "atDate",
									"value": "2019-12-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fixed - torvalds - atDate: Feb 2020",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fixed_issues');",
									"    pm.expect(jsonData.fixed_issues).to.be.an('object');",
									"    pm.expect(jsonData.fixed_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('low').to.be.eql(1);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/fixed?tag=torvalds&atDate=2020-02-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"fixed"
							],
							"query": [
								{
									"key": "tag",
									"value": "torvalds"
								},
								{
									"key": "atDate",
									"value": "2020-02-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fixed - 728e65fc-d568-4c1f-ac6b-a032b9b02b7c - atDate: Feb 2020",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fixed_issues');",
									"    pm.expect(jsonData.fixed_issues).to.be.an('object');",
									"    pm.expect(jsonData.fixed_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('low').to.be.eql(1);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/fixed?team=728e65fc-d568-4c1f-ac6b-a032b9b02b7c&atDate=2020-02-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"fixed"
							],
							"query": [
								{
									"key": "team",
									"value": "728e65fc-d568-4c1f-ac6b-a032b9b02b7c"
								},
								{
									"key": "atDate",
									"value": "2020-02-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fixed - kemp - atDate: 2020-01-01 - should not count expired",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fixed_issues');",
									"    pm.expect(jsonData.fixed_issues).to.be.an('object');",
									"    pm.expect(jsonData.fixed_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/fixed?tag=kemp&atDate=2020-01-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"fixed"
							],
							"query": [
								{
									"key": "tag",
									"value": "kemp"
								},
								{
									"key": "atDate",
									"value": "2020-01-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fixed - 504b9ccd-5923-4e7a-bc7c-a142fb03de19 - atDate: 2020-01-01 - should not count expired",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fixed_issues');",
									"    pm.expect(jsonData.fixed_issues).to.be.an('object');",
									"    pm.expect(jsonData.fixed_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/fixed?team=504b9ccd-5923-4e7a-bc7c-a142fb03de19&atDate=2020-01-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"fixed"
							],
							"query": [
								{
									"key": "team",
									"value": "504b9ccd-5923-4e7a-bc7c-a142fb03de19"
								},
								{
									"key": "atDate",
									"value": "2020-01-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Fixed - Filter by labels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('fixed_issues');",
									"    pm.expect(jsonData.fixed_issues).to.be.an('object');",
									"    pm.expect(jsonData.fixed_issues).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('low').to.be.eql(1);",
									"    pm.expect(jsonData.fixed_issues).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/fixed?labels=HSTS",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"fixed"
							],
							"query": [
								{
									"key": "labels",
									"value": "HSTS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(20, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(24, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							]
						}
					},
					"response": []
				},
				{
					"name": "List issues - page 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(20, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(24, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues?page=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							],
							"query": [
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List issues - page 2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(4, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(20,'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(24,'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues?page=2",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							],
							"query": [
								{
									"key": "page",
									"value": "2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List issues - size 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(5, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(5, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(24, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues?size=5",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							],
							"query": [
								{
									"key": "size",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List issues - size 5, page 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(5, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(5, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(24, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues?size=5&page=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							],
							"query": [
								{
									"key": "size",
									"value": "5"
								},
								{
									"key": "page",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List issues - size 5, page 5",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(4, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(5, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(20, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(24, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues?size=5&page=5",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							],
							"query": [
								{
									"key": "size",
									"value": "5"
								},
								{
									"key": "page",
									"value": "5"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues - minDate: Apr 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(20, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(24, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues?minDate=2019-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							],
							"query": [
								{
									"key": "minDate",
									"value": "2019-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues - minDate: Jan 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(19, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(19, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues?minDate=2020-01-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							],
							"query": [
								{
									"key": "minDate",
									"value": "2020-01-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues - minDate: Jun 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(17, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(17, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues?maxDate=2019-06-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							],
							"query": [
								{
									"key": "maxDate",
									"value": "2019-06-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues - minDate: Feb 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(20, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(24, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues?maxDate=2020-02-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							],
							"query": [
								{
									"key": "maxDate",
									"value": "2020-02-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues - minDate: Jun 2019 - maxDate: Jul 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(17, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(17, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues?minDate=2019-06-01&maxDate=2019-07-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							],
							"query": [
								{
									"key": "minDate",
									"value": "2019-06-01"
								},
								{
									"key": "maxDate",
									"value": "2019-07-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues - minDate: Jun 2020 - maxDate: Jul 2020",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(0, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(0, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues?minDate=2020-06-01&maxDate=2020-07-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							],
							"query": [
								{
									"key": "minDate",
									"value": "2020-06-01"
								},
								{
									"key": "maxDate",
									"value": "2020-07-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues - minDate: Jun 2019 - maxDate: Jul 2019 - minScore: 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(4, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(4, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues?minDate=2019-06-01&maxDate=2019-07-01&minScore=3",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							],
							"query": [
								{
									"key": "minDate",
									"value": "2019-06-01"
								},
								{
									"key": "maxDate",
									"value": "2019-07-01"
								},
								{
									"key": "minScore",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues - minDate: Jun 2019 - maxDate: Jul 2019 - minScore: 3 - maxScore: 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(3, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(3, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues?minDate=2019-06-01&maxDate=2019-07-01&minScore=3&maxScore=4",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							],
							"query": [
								{
									"key": "minDate",
									"value": "2019-06-01"
								},
								{
									"key": "maxDate",
									"value": "2019-07-01"
								},
								{
									"key": "minScore",
									"value": "3"
								},
								{
									"key": "maxScore",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues - minDate: Jun 2019 - maxDate: Jul 2019 - maxScore: 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(16, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(16, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues?minDate=2019-06-01&maxDate=2019-07-01&maxScore=4",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							],
							"query": [
								{
									"key": "minDate",
									"value": "2019-06-01"
								},
								{
									"key": "maxDate",
									"value": "2019-07-01"
								},
								{
									"key": "maxScore",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues - minScore: 3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(8, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(8, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues?minScore=3",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							],
							"query": [
								{
									"key": "minScore",
									"value": "3"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues - minScore: 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(20, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(22, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(true, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues?maxScore=4",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							],
							"query": [
								{
									"key": "maxScore",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Issues - minScore: 3 & maxScore: 4",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Issues data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.issues).to.be.an('array');",
									"    pm.expect(jsonData.issues.length).to.be.eql(6, 'Wrong issues array length');",
									"    previousID = ''",
									"    for (i=0; i<jsonData.issues.length;i++){",
									"        pm.expect(jsonData.issues[i]).to.have.property('id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.issues[i]).to.have.property('cwe_id');",
									"        pm.expect(jsonData.issues[i]).to.have.property('description');",
									"        pm.expect(jsonData.issues[i]).to.have.property('recommendations');",
									"        pm.expect(jsonData.issues[i]).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.issues[i].id).to.not.be.eql(previousID, 'There are two occurrences of the same value');",
									"        previousID=jsonData.issues[i].id;",
									"    }",
									"});",
									"",
									"pm.test(\"Issues Pagination data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.pagination.limit).to.eql(20, 'limit');",
									"    pm.expect(jsonData.pagination.offset).to.eql(0, 'offset');",
									"    pm.expect(jsonData.pagination.total).to.eql(6, 'total');",
									"    pm.expect(jsonData.pagination.more).to.eql(false, 'more');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/issues?minScore=3&maxScore=4",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"issues"
							],
							"query": [
								{
									"key": "minScore",
									"value": "3"
								},
								{
									"key": "maxScore",
									"value": "4"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Assets",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('assets');",
									"    pm.expect(jsonData.assets).to.be.an('object');",
									"    pm.expect(jsonData.assets).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.assets).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.assets).to.have.property('medium').to.be.eql(2);",
									"    pm.expect(jsonData.assets).to.have.property('low').to.be.eql(8);",
									"    pm.expect(jsonData.assets).to.have.property('informational').to.be.eql(12);",
									"    pm.expect(jsonData.assets).to.have.property('total').to.be.eql(28);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/assets",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"assets"
							]
						}
					},
					"response": []
				},
				{
					"name": "Assets - lederberg",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('assets');",
									"    pm.expect(jsonData.assets).to.be.an('object');",
									"    pm.expect(jsonData.assets).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.assets).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.assets).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.assets).to.have.property('low').to.be.eql(1);",
									"    pm.expect(jsonData.assets).to.have.property('informational').to.be.eql(0);",
									"    pm.expect(jsonData.assets).to.have.property('total').to.be.eql(1);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/assets?tag=lederberg",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"assets"
							],
							"query": [
								{
									"key": "tag",
									"value": "lederberg"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Assets - 313898a6-3739-4e64-b80f-c4cbd0d3bc0d",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('assets');",
									"    pm.expect(jsonData.assets).to.be.an('object');",
									"    pm.expect(jsonData.assets).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.assets).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.assets).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.assets).to.have.property('low').to.be.eql(1);",
									"    pm.expect(jsonData.assets).to.have.property('informational').to.be.eql(0);",
									"    pm.expect(jsonData.assets).to.have.property('total').to.be.eql(1);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/assets?team=313898a6-3739-4e64-b80f-c4cbd0d3bc0d",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"assets"
							],
							"query": [
								{
									"key": "team",
									"value": "313898a6-3739-4e64-b80f-c4cbd0d3bc0d"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Assets - lederberg and jang",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('assets');",
									"    pm.expect(jsonData.assets).to.be.an('object');",
									"    pm.expect(jsonData.assets).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.assets).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.assets).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.assets).to.have.property('low').to.be.eql(1);",
									"    pm.expect(jsonData.assets).to.have.property('informational').to.be.eql(1);",
									"    pm.expect(jsonData.assets).to.have.property('total').to.be.eql(2);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/assets?tags=lederberg,jang",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"assets"
							],
							"query": [
								{
									"key": "tags",
									"value": "lederberg,jang"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Assets - 313898a6-3739-4e64-b80f-c4cbd0d3bc0d and e9250fc8-ee94-45aa-9e99-d7786fed9de2",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('assets');",
									"    pm.expect(jsonData.assets).to.be.an('object');",
									"    pm.expect(jsonData.assets).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.assets).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.assets).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.assets).to.have.property('low').to.be.eql(1);",
									"    pm.expect(jsonData.assets).to.have.property('informational').to.be.eql(1);",
									"    pm.expect(jsonData.assets).to.have.property('total').to.be.eql(2);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/assets?teams=313898a6-3739-4e64-b80f-c4cbd0d3bc0d,e9250fc8-ee94-45aa-9e99-d7786fed9de2",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"assets"
							],
							"query": [
								{
									"key": "teams",
									"value": "313898a6-3739-4e64-b80f-c4cbd0d3bc0d,e9250fc8-ee94-45aa-9e99-d7786fed9de2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Assets - non existing tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('assets');",
									"    pm.expect(jsonData.assets).to.be.an('object');",
									"    pm.expect(jsonData.assets).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.assets).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.assets).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.assets).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.assets).to.have.property('informational').to.be.eql(0);",
									"    pm.expect(jsonData.assets).to.have.property('total').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/assets?tags=thisteamdoesnotexist",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"assets"
							],
							"query": [
								{
									"key": "tags",
									"value": "thisteamdoesnotexist"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Assets - non existing team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('assets');",
									"    pm.expect(jsonData.assets).to.be.an('object');",
									"    pm.expect(jsonData.assets).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.assets).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.assets).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.assets).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.assets).to.have.property('informational').to.be.eql(0);",
									"    pm.expect(jsonData.assets).to.have.property('total').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/assets?teams=00000000-0000-0000-0000-000000000000",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"assets"
							],
							"query": [
								{
									"key": "teams",
									"value": "00000000-0000-0000-0000-000000000000"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Assets - Identifiers: elegant.wiles.adevinta.com and affectionate.hertz.adevinta.com",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('assets');",
									"    pm.expect(jsonData.assets).to.be.an('object');",
									"    pm.expect(jsonData.assets).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.assets).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.assets).to.have.property('medium').to.be.eql(1);",
									"    pm.expect(jsonData.assets).to.have.property('low').to.be.eql(1);",
									"    pm.expect(jsonData.assets).to.have.property('informational').to.be.eql(0);",
									"    pm.expect(jsonData.assets).to.have.property('total').to.be.eql(2);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/assets?identifiers=elegant.wiles.adevinta.com,affectionate.hertz.adevinta.com",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"assets"
							],
							"query": [
								{
									"key": "identifiers",
									"value": "elegant.wiles.adevinta.com,affectionate.hertz.adevinta.com"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Assets - labels: TLS and HTTP",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('assets');",
									"    pm.expect(jsonData.assets).to.be.an('object');",
									"    pm.expect(jsonData.assets).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.assets).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.assets).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.assets).to.have.property('low').to.be.eql(1);",
									"    pm.expect(jsonData.assets).to.have.property('informational').to.be.eql(1);",
									"    pm.expect(jsonData.assets).to.have.property('total').to.be.eql(28);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/assets?labels=TLS,HTTP",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"assets"
							],
							"query": [
								{
									"key": "labels",
									"value": "TLS,HTTP"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MTTR",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('mttr');",
									"    pm.expect(jsonData.mttr).to.be.an('object');",
									"    pm.expect(jsonData.mttr).to.have.property('total').to.be.eql(2021.1);",
									"    pm.expect(jsonData.mttr).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('low').to.be.eql(1910.3334);",
									"    pm.expect(jsonData.mttr).to.have.property('informational').to.be.eql(2068.5715);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/mttr",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"mttr"
							]
						}
					},
					"response": []
				},
				{
					"name": "MTTR - torvalds",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('mttr');",
									"    pm.expect(jsonData.mttr).to.be.an('object');",
									"    pm.expect(jsonData.mttr).to.have.property('total').to.be.eql(1465);",
									"    pm.expect(jsonData.mttr).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('low').to.be.eql(1465);",
									"    pm.expect(jsonData.mttr).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/mttr?tag=torvalds",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"mttr"
							],
							"query": [
								{
									"key": "tag",
									"value": "torvalds"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MTTR - 728e65fc-d568-4c1f-ac6b-a032b9b02b7c",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('mttr');",
									"    pm.expect(jsonData.mttr).to.be.an('object');",
									"    pm.expect(jsonData.mttr).to.have.property('total').to.be.eql(1465);",
									"    pm.expect(jsonData.mttr).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('low').to.be.eql(1465);",
									"    pm.expect(jsonData.mttr).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/mttr?team=728e65fc-d568-4c1f-ac6b-a032b9b02b7c",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"mttr"
							],
							"query": [
								{
									"key": "team",
									"value": "728e65fc-d568-4c1f-ac6b-a032b9b02b7c"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MTTR - torvalds and satoshi",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('mttr');",
									"    pm.expect(jsonData.mttr).to.be.an('object');",
									"    pm.expect(jsonData.mttr).to.have.property('total').to.be.eql(1441);",
									"    pm.expect(jsonData.mttr).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('low').to.be.eql(1465);",
									"    pm.expect(jsonData.mttr).to.have.property('informational').to.be.eql(1417);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/mttr?tags=torvalds,satoshi",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"mttr"
							],
							"query": [
								{
									"key": "tags",
									"value": "torvalds,satoshi"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MTTR - 728e65fc-d568-4c1f-ac6b-a032b9b02b7c and d36391f4-a063-481b-b02f-21811913b01d",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('mttr');",
									"    pm.expect(jsonData.mttr).to.be.an('object');",
									"    pm.expect(jsonData.mttr).to.have.property('total').to.be.eql(1441);",
									"    pm.expect(jsonData.mttr).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('low').to.be.eql(1465);",
									"    pm.expect(jsonData.mttr).to.have.property('informational').to.be.eql(1417);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/mttr?teams=728e65fc-d568-4c1f-ac6b-a032b9b02b7c,d36391f4-a063-481b-b02f-21811913b01d",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"mttr"
							],
							"query": [
								{
									"key": "teams",
									"value": "728e65fc-d568-4c1f-ac6b-a032b9b02b7c,d36391f4-a063-481b-b02f-21811913b01d"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MTTR - torvalds - minDate: Apr 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('mttr');",
									"    pm.expect(jsonData.mttr).to.be.an('object');",
									"    pm.expect(jsonData.mttr).to.have.property('total').to.be.eql(1465);",
									"    pm.expect(jsonData.mttr).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('low').to.be.eql(1465);",
									"    pm.expect(jsonData.mttr).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/mttr?tag=torvalds&minDate=2019-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"mttr"
							],
							"query": [
								{
									"key": "tag",
									"value": "torvalds"
								},
								{
									"key": "minDate",
									"value": "2019-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MTTR - 728e65fc-d568-4c1f-ac6b-a032b9b02b7c - minDate: Apr 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('mttr');",
									"    pm.expect(jsonData.mttr).to.be.an('object');",
									"    pm.expect(jsonData.mttr).to.have.property('total').to.be.eql(1465);",
									"    pm.expect(jsonData.mttr).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('low').to.be.eql(1465);",
									"    pm.expect(jsonData.mttr).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/mttr?team=728e65fc-d568-4c1f-ac6b-a032b9b02b7c&minDate=2019-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"mttr"
							],
							"query": [
								{
									"key": "team",
									"value": "728e65fc-d568-4c1f-ac6b-a032b9b02b7c"
								},
								{
									"key": "minDate",
									"value": "2019-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MTTR - torvalds - minDate: Apr 2020",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('mttr');",
									"    pm.expect(jsonData.mttr).to.be.an('object');",
									"    pm.expect(jsonData.mttr).to.have.property('total').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/mttr?tag=torvalds&minDate=2020-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"mttr"
							],
							"query": [
								{
									"key": "tag",
									"value": "torvalds"
								},
								{
									"key": "minDate",
									"value": "2020-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MTTR - 728e65fc-d568-4c1f-ac6b-a032b9b02b7c - minDate: Apr 2020",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('mttr');",
									"    pm.expect(jsonData.mttr).to.be.an('object');",
									"    pm.expect(jsonData.mttr).to.have.property('total').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/mttr?team=728e65fc-d568-4c1f-ac6b-a032b9b02b7c&minDate=2020-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"mttr"
							],
							"query": [
								{
									"key": "team",
									"value": "728e65fc-d568-4c1f-ac6b-a032b9b02b7c"
								},
								{
									"key": "minDate",
									"value": "2020-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MTTR - torvalds - maxDate: Apr 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('mttr');",
									"    pm.expect(jsonData.mttr).to.be.an('object');",
									"    pm.expect(jsonData.mttr).to.have.property('total').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/mttr?tag=torvalds&maxDate=2019-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"mttr"
							],
							"query": [
								{
									"key": "tag",
									"value": "torvalds"
								},
								{
									"key": "maxDate",
									"value": "2019-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MTTR - 728e65fc-d568-4c1f-ac6b-a032b9b02b7c - maxDate: Apr 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('mttr');",
									"    pm.expect(jsonData.mttr).to.be.an('object');",
									"    pm.expect(jsonData.mttr).to.have.property('total').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/mttr?team=728e65fc-d568-4c1f-ac6b-a032b9b02b7c&maxDate=2019-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"mttr"
							],
							"query": [
								{
									"key": "team",
									"value": "728e65fc-d568-4c1f-ac6b-a032b9b02b7c"
								},
								{
									"key": "maxDate",
									"value": "2019-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MTTR - torvalds - maxDate: Apr 2020",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('mttr');",
									"    pm.expect(jsonData.mttr).to.be.an('object');",
									"    pm.expect(jsonData.mttr).to.have.property('total').to.be.eql(1465);",
									"    pm.expect(jsonData.mttr).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('low').to.be.eql(1465);",
									"    pm.expect(jsonData.mttr).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/mttr?tag=torvalds&maxDate=2020-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"mttr"
							],
							"query": [
								{
									"key": "tag",
									"value": "torvalds"
								},
								{
									"key": "maxDate",
									"value": "2020-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MTTR - 728e65fc-d568-4c1f-ac6b-a032b9b02b7c - maxDate: Apr 2020",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('mttr');",
									"    pm.expect(jsonData.mttr).to.be.an('object');",
									"    pm.expect(jsonData.mttr).to.have.property('total').to.be.eql(1465);",
									"    pm.expect(jsonData.mttr).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('low').to.be.eql(1465);",
									"    pm.expect(jsonData.mttr).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/mttr?team=728e65fc-d568-4c1f-ac6b-a032b9b02b7c&maxDate=2020-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"mttr"
							],
							"query": [
								{
									"key": "team",
									"value": "728e65fc-d568-4c1f-ac6b-a032b9b02b7c"
								},
								{
									"key": "maxDate",
									"value": "2020-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MTTR - torvalds - minDate: Dec 2019 - maxDate: Dec 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('mttr');",
									"    pm.expect(jsonData.mttr).to.be.an('object');",
									"    pm.expect(jsonData.mttr).to.have.property('total').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/mttr?tag=torvalds&minDate=2019-12-01&maxDate=2019-12-31",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"mttr"
							],
							"query": [
								{
									"key": "tag",
									"value": "torvalds"
								},
								{
									"key": "minDate",
									"value": "2019-12-01"
								},
								{
									"key": "maxDate",
									"value": "2019-12-31"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MTTR - 728e65fc-d568-4c1f-ac6b-a032b9b02b7c - minDate: Dec 2019 - maxDate: Dec 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('mttr');",
									"    pm.expect(jsonData.mttr).to.be.an('object');",
									"    pm.expect(jsonData.mttr).to.have.property('total').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('low').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/mttr?team=728e65fc-d568-4c1f-ac6b-a032b9b02b7c&minDate=2019-12-01&maxDate=2019-12-31",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"mttr"
							],
							"query": [
								{
									"key": "team",
									"value": "728e65fc-d568-4c1f-ac6b-a032b9b02b7c"
								},
								{
									"key": "minDate",
									"value": "2019-12-01"
								},
								{
									"key": "maxDate",
									"value": "2019-12-31"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MTTR - torvalds - minDate: Jan 2020 - maxDate: Jan 2020",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('mttr');",
									"    pm.expect(jsonData.mttr).to.be.an('object');",
									"    pm.expect(jsonData.mttr).to.have.property('total').to.be.eql(1465);",
									"    pm.expect(jsonData.mttr).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('low').to.be.eql(1465);",
									"    pm.expect(jsonData.mttr).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/mttr?tag=torvalds&minDate=2020-01-01&maxDate=2020-01-31",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"mttr"
							],
							"query": [
								{
									"key": "tag",
									"value": "torvalds"
								},
								{
									"key": "minDate",
									"value": "2020-01-01"
								},
								{
									"key": "maxDate",
									"value": "2020-01-31"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MTTR - 728e65fc-d568-4c1f-ac6b-a032b9b02b7c - minDate: Jan 2020 - maxDate: Jan 2020",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('mttr');",
									"    pm.expect(jsonData.mttr).to.be.an('object');",
									"    pm.expect(jsonData.mttr).to.have.property('total').to.be.eql(1465);",
									"    pm.expect(jsonData.mttr).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('low').to.be.eql(1465);",
									"    pm.expect(jsonData.mttr).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/mttr?team=728e65fc-d568-4c1f-ac6b-a032b9b02b7c&minDate=2020-01-01&maxDate=2020-01-31",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"mttr"
							],
							"query": [
								{
									"key": "team",
									"value": "728e65fc-d568-4c1f-ac6b-a032b9b02b7c"
								},
								{
									"key": "minDate",
									"value": "2020-01-01"
								},
								{
									"key": "maxDate",
									"value": "2020-01-31"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "MTTR - labels:HSTS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('mttr');",
									"    pm.expect(jsonData.mttr).to.be.an('object');",
									"    pm.expect(jsonData.mttr).to.have.property('total').to.be.eql(1465);",
									"    pm.expect(jsonData.mttr).to.have.property('critical').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('high').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('medium').to.be.eql(0);",
									"    pm.expect(jsonData.mttr).to.have.property('low').to.be.eql(1465);",
									"    pm.expect(jsonData.mttr).to.have.property('informational').to.be.eql(0);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/mttr?labels=HSTS",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"mttr"
							],
							"query": [
								{
									"key": "labels",
									"value": "HSTS"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Exposure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('exposure');",
									"    pm.expect(jsonData.exposure).to.be.an('object');",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_10').to.be.eql(5574.1);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_25').to.be.eql(15939.75);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_50').to.be.eql(18381);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_75').to.be.eql(18819);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_90').to.be.eql(18820);",
									"    pm.expect(jsonData.exposure).to.have.property('mean').to.be.eql(15777.75);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/exposure",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"exposure"
							]
						}
					},
					"response": []
				},
				{
					"name": "Exposure - lederberg",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('exposure');",
									"    pm.expect(jsonData.exposure).to.be.an('object');",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_10').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_25').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_50').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_75').to.be.eql(18944.25);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_90').to.be.eql(19171.5);",
									"    pm.expect(jsonData.exposure).to.have.property('mean').to.be.eql(18944.25);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/exposure?tag=lederberg",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"exposure"
							],
							"query": [
								{
									"key": "tag",
									"value": "lederberg"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Exposure - 313898a6-3739-4e64-b80f-c4cbd0d3bc0d",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('exposure');",
									"    pm.expect(jsonData.exposure).to.be.an('object');",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_10').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_25').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_50').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_75').to.be.eql(18944.25);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_90').to.be.eql(19171.5);",
									"    pm.expect(jsonData.exposure).to.have.property('mean').to.be.eql(18944.25);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/exposure?team=313898a6-3739-4e64-b80f-c4cbd0d3bc0d",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"exposure"
							],
							"query": [
								{
									"key": "team",
									"value": "313898a6-3739-4e64-b80f-c4cbd0d3bc0d"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Exposure - lederberg and blackburn",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('exposure');",
									"    pm.expect(jsonData.exposure).to.be.an('object');",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_10').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_25').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_50').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_75').to.be.eql(18820);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_90').to.be.eql(19121.8);",
									"    pm.expect(jsonData.exposure).to.have.property('mean').to.be.eql(18919.4);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/exposure?tags=lederberg,blackburn",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"exposure"
							],
							"query": [
								{
									"key": "tags",
									"value": "lederberg,blackburn"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Exposure - 313898a6-3739-4e64-b80f-c4cbd0d3bc0d and f8114a01-44cd-480a-bb43-156ddcbdf91b",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('exposure');",
									"    pm.expect(jsonData.exposure).to.be.an('object');",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_10').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_25').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_50').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_75').to.be.eql(18820);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_90').to.be.eql(19121.8);",
									"    pm.expect(jsonData.exposure).to.have.property('mean').to.be.eql(18919.4);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/exposure?teams=313898a6-3739-4e64-b80f-c4cbd0d3bc0d,f8114a01-44cd-480a-bb43-156ddcbdf91b",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"exposure"
							],
							"query": [
								{
									"key": "teams",
									"value": "313898a6-3739-4e64-b80f-c4cbd0d3bc0d,f8114a01-44cd-480a-bb43-156ddcbdf91b"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Exposure - lederberg - atDate: April 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('exposure');",
									"    pm.expect(jsonData.exposure).to.be.an('object');",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_10').to.be.eql(277);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_25').to.be.eql(277);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_50').to.be.eql(277);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_75').to.be.eql(277);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_90').to.be.eql(277);",
									"    pm.expect(jsonData.exposure).to.have.property('mean').to.be.eql(277);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/exposure?tag=lederberg&atDate=2019-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"exposure"
							],
							"query": [
								{
									"key": "tag",
									"value": "lederberg"
								},
								{
									"key": "atDate",
									"value": "2019-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Exposure - 313898a6-3739-4e64-b80f-c4cbd0d3bc0d - atDate: April 2019",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('exposure');",
									"    pm.expect(jsonData.exposure).to.be.an('object');",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_10').to.be.eql(277);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_25').to.be.eql(277);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_50').to.be.eql(277);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_75').to.be.eql(277);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_90').to.be.eql(277);",
									"    pm.expect(jsonData.exposure).to.have.property('mean').to.be.eql(277);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/exposure?team=313898a6-3739-4e64-b80f-c4cbd0d3bc0d&atDate=2019-04-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"exposure"
							],
							"query": [
								{
									"key": "team",
									"value": "313898a6-3739-4e64-b80f-c4cbd0d3bc0d"
								},
								{
									"key": "atDate",
									"value": "2019-04-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Exposure - lederberg - minScore: 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('exposure');",
									"    pm.expect(jsonData.exposure).to.be.an('object');",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_10').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_25').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_50').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_75').to.be.eql(18944.25);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_90').to.be.eql(19171.5);",
									"    pm.expect(jsonData.exposure).to.have.property('mean').to.be.eql(18944.25);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/exposure?tag=lederberg&minScore=0",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"exposure"
							],
							"query": [
								{
									"key": "tag",
									"value": "lederberg"
								},
								{
									"key": "minScore",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Exposure - 313898a6-3739-4e64-b80f-c4cbd0d3bc0d - minScore: 0",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('exposure');",
									"    pm.expect(jsonData.exposure).to.be.an('object');",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_10').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_25').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_50').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_75').to.be.eql(18944.25);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_90').to.be.eql(19171.5);",
									"    pm.expect(jsonData.exposure).to.have.property('mean').to.be.eql(18944.25);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/exposure?team=313898a6-3739-4e64-b80f-c4cbd0d3bc0d&minScore=0",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"exposure"
							],
							"query": [
								{
									"key": "team",
									"value": "313898a6-3739-4e64-b80f-c4cbd0d3bc0d"
								},
								{
									"key": "minScore",
									"value": "0"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Exposure - lederberg - minScore: 3.9",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('exposure');",
									"    pm.expect(jsonData.exposure).to.be.an('object');",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_10').to.be.eql(18868.5);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_25').to.be.eql(18944.25);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_50').to.be.eql(19070.5);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_75').to.be.eql(19196.75);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_90').to.be.eql(19272.5);",
									"    pm.expect(jsonData.exposure).to.have.property('mean').to.be.eql(19070.5);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/exposure?tag=lederberg&minScore=3.9",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"exposure"
							],
							"query": [
								{
									"key": "tag",
									"value": "lederberg"
								},
								{
									"key": "minScore",
									"value": "3.9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Exposure - 313898a6-3739-4e64-b80f-c4cbd0d3bc0d - minScore: 3.9",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('exposure');",
									"    pm.expect(jsonData.exposure).to.be.an('object');",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_10').to.be.eql(18868.5);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_25').to.be.eql(18944.25);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_50').to.be.eql(19070.5);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_75').to.be.eql(19196.75);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_90').to.be.eql(19272.5);",
									"    pm.expect(jsonData.exposure).to.have.property('mean').to.be.eql(19070.5);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/exposure?team=313898a6-3739-4e64-b80f-c4cbd0d3bc0d&minScore=3.9",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"exposure"
							],
							"query": [
								{
									"key": "team",
									"value": "313898a6-3739-4e64-b80f-c4cbd0d3bc0d"
								},
								{
									"key": "minScore",
									"value": "3.9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Exposure - 313898a6-3739-4e64-b80f-c4cbd0d3bc0d - maxScore: 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('exposure');",
									"    pm.expect(jsonData.exposure).to.be.an('object');",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_10').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_25').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_50').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_75').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_90').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('mean').to.be.eql(18818);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/exposure?team=313898a6-3739-4e64-b80f-c4cbd0d3bc0d&maxScore=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"exposure"
							],
							"query": [
								{
									"key": "team",
									"value": "313898a6-3739-4e64-b80f-c4cbd0d3bc0d"
								},
								{
									"key": "maxScore",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Exposure - lederberg - maxScore: 6.9",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('exposure');",
									"    pm.expect(jsonData.exposure).to.be.an('object');",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_10').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_25').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_50').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_75').to.be.eql(18944.25);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_90').to.be.eql(19171.5);",
									"    pm.expect(jsonData.exposure).to.have.property('mean').to.be.eql(18944.25);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/exposure?tag=lederberg&maxScore=6.9",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"exposure"
							],
							"query": [
								{
									"key": "tag",
									"value": "lederberg"
								},
								{
									"key": "maxScore",
									"value": "6.9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Exposure - 313898a6-3739-4e64-b80f-c4cbd0d3bc0d - maxScore: 6.9",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('exposure');",
									"    pm.expect(jsonData.exposure).to.be.an('object');",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_10').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_25').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_50').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_75').to.be.eql(18944.25);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_90').to.be.eql(19171.5);",
									"    pm.expect(jsonData.exposure).to.have.property('mean').to.be.eql(18944.25);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/exposure?team=313898a6-3739-4e64-b80f-c4cbd0d3bc0d&maxScore=6.9",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"exposure"
							],
							"query": [
								{
									"key": "team",
									"value": "313898a6-3739-4e64-b80f-c4cbd0d3bc0d"
								},
								{
									"key": "maxScore",
									"value": "6.9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Exposure - lederberg - minScore: 1 - maxScore: 6.9",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('exposure');",
									"    pm.expect(jsonData.exposure).to.be.an('object');",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_10').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_25').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_50').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_75').to.be.eql(19070.5);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_90').to.be.eql(19222);",
									"    pm.expect(jsonData.exposure).to.have.property('mean').to.be.eql(18986.334);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/exposure?tag=lederberg&minScore=1&maxScore=6.9",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"exposure"
							],
							"query": [
								{
									"key": "tag",
									"value": "lederberg"
								},
								{
									"key": "minScore",
									"value": "1"
								},
								{
									"key": "maxScore",
									"value": "6.9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Exposure - 313898a6-3739-4e64-b80f-c4cbd0d3bc0d - minScore: 1 - maxScore: 6.9",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('exposure');",
									"    pm.expect(jsonData.exposure).to.be.an('object');",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_10').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_25').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_50').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_75').to.be.eql(19070.5);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_90').to.be.eql(19222);",
									"    pm.expect(jsonData.exposure).to.have.property('mean').to.be.eql(18986.334);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/exposure?team=313898a6-3739-4e64-b80f-c4cbd0d3bc0d&minScore=1&maxScore=6.9",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"exposure"
							],
							"query": [
								{
									"key": "team",
									"value": "313898a6-3739-4e64-b80f-c4cbd0d3bc0d"
								},
								{
									"key": "minScore",
									"value": "1"
								},
								{
									"key": "maxScore",
									"value": "6.9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Exposure - lederberg - minScore: 0 - maxScore: 3.9",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('exposure');",
									"    pm.expect(jsonData.exposure).to.be.an('object');",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_10').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_25').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_50').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_75').to.be.eql(18944.25);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_90').to.be.eql(19171.5);",
									"    pm.expect(jsonData.exposure).to.have.property('mean').to.be.eql(18944.25);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/exposure?tag=lederberg&minScore=0&maxScore=3.9",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"exposure"
							],
							"query": [
								{
									"key": "tag",
									"value": "lederberg"
								},
								{
									"key": "minScore",
									"value": "0"
								},
								{
									"key": "maxScore",
									"value": "3.9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Exposure - 313898a6-3739-4e64-b80f-c4cbd0d3bc0d - minScore: 0 - maxScore: 3.9",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('exposure');",
									"    pm.expect(jsonData.exposure).to.be.an('object');",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_10').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_25').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_50').to.be.eql(18818);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_75').to.be.eql(18944.25);",
									"    pm.expect(jsonData.exposure).to.have.property('percentile_90').to.be.eql(19171.5);",
									"    pm.expect(jsonData.exposure).to.have.property('mean').to.be.eql(18944.25);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/exposure?team=313898a6-3739-4e64-b80f-c4cbd0d3bc0d&minScore=0&maxScore=3.9",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"exposure"
							],
							"query": [
								{
									"key": "team",
									"value": "313898a6-3739-4e64-b80f-c4cbd0d3bc0d"
								},
								{
									"key": "minScore",
									"value": "0"
								},
								{
									"key": "maxScore",
									"value": "3.9"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Current Exposure",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('current_exposure');",
									"    pm.expect(jsonData.current_exposure).to.be.an('object');",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_10').to.be.eql(14475.7);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_25').to.be.eql(15192.5);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_50').to.be.eql(18817);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_75').to.be.eql(18819.25);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_90').to.be.eql(18820);",
									"    pm.expect(jsonData.current_exposure).to.have.property('mean').to.be.eql(17257.607);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/exposure/current",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"exposure",
								"current"
							]
						}
					},
					"response": []
				},
				{
					"name": "Current Exposure - lederberg",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('current_exposure');",
									"    pm.expect(jsonData.current_exposure).to.be.an('object');",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_10').to.be.eql(18818);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_25').to.be.eql(18818);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_50').to.be.eql(18818);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_75').to.be.eql(18944.25);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_90').to.be.eql(19171.5);",
									"    pm.expect(jsonData.current_exposure).to.have.property('mean').to.be.eql(18944.25);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/exposure/current?tag=lederberg",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"exposure",
								"current"
							],
							"query": [
								{
									"key": "tag",
									"value": "lederberg"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Current Exposure - 313898a6-3739-4e64-b80f-c4cbd0d3bc0d",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('current_exposure');",
									"    pm.expect(jsonData.current_exposure).to.be.an('object');",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_10').to.be.eql(18818);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_25').to.be.eql(18818);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_50').to.be.eql(18818);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_75').to.be.eql(18944.25);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_90').to.be.eql(19171.5);",
									"    pm.expect(jsonData.current_exposure).to.have.property('mean').to.be.eql(18944.25);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/exposure/current?team=313898a6-3739-4e64-b80f-c4cbd0d3bc0d",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"exposure",
								"current"
							],
							"query": [
								{
									"key": "team",
									"value": "313898a6-3739-4e64-b80f-c4cbd0d3bc0d"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Current Exposure - lederberg and lumiere",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('current_exposure');",
									"    pm.expect(jsonData.current_exposure).to.be.an('object');",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_10').to.be.eql(15331.4);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_25').to.be.eql(18818);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_50').to.be.eql(18818);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_75').to.be.eql(18818);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_90').to.be.eql(19121);",
									"    pm.expect(jsonData.current_exposure).to.have.property('mean').to.be.eql(17756.8);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/exposure/current?tags=lederberg,lumiere",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"exposure",
								"current"
							],
							"query": [
								{
									"key": "tags",
									"value": "lederberg,lumiere"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Current Exposure - 313898a6-3739-4e64-b80f-c4cbd0d3bc0d and 0e6589fb-593c-4eff-8e6e-63c3eec229ac",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('current_exposure');",
									"    pm.expect(jsonData.current_exposure).to.be.an('object');",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_10').to.be.eql(15331.4);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_25').to.be.eql(18818);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_50').to.be.eql(18818);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_75').to.be.eql(18818);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_90').to.be.eql(19121);",
									"    pm.expect(jsonData.current_exposure).to.have.property('mean').to.be.eql(17756.8);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/exposure/current?teams=313898a6-3739-4e64-b80f-c4cbd0d3bc0d,0e6589fb-593c-4eff-8e6e-63c3eec229ac",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"exposure",
								"current"
							],
							"query": [
								{
									"key": "teams",
									"value": "313898a6-3739-4e64-b80f-c4cbd0d3bc0d,0e6589fb-593c-4eff-8e6e-63c3eec229ac"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Current Exposure - lederberg - minScore: 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('current_exposure');",
									"    pm.expect(jsonData.current_exposure).to.be.an('object');",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_10').to.be.eql(18818);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_25').to.be.eql(18818);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_50').to.be.eql(18818);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_75').to.be.eql(19070.5);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_90').to.be.eql(19222);",
									"    pm.expect(jsonData.current_exposure).to.have.property('mean').to.be.eql(18986.334);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/exposure/current?tag=lederberg&minScore=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"exposure",
								"current"
							],
							"query": [
								{
									"key": "tag",
									"value": "lederberg"
								},
								{
									"key": "minScore",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Current Exposure - 313898a6-3739-4e64-b80f-c4cbd0d3bc0d - minScore: 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('current_exposure');",
									"    pm.expect(jsonData.current_exposure).to.be.an('object');",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_10').to.be.eql(18818);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_25').to.be.eql(18818);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_50').to.be.eql(18818);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_75').to.be.eql(19070.5);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_90').to.be.eql(19222);",
									"    pm.expect(jsonData.current_exposure).to.have.property('mean').to.be.eql(18986.334);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/exposure/current?team=313898a6-3739-4e64-b80f-c4cbd0d3bc0d&minScore=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"exposure",
								"current"
							],
							"query": [
								{
									"key": "team",
									"value": "313898a6-3739-4e64-b80f-c4cbd0d3bc0d"
								},
								{
									"key": "minScore",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Current Exposure - lederberg - minScore: 1 - maxScore: 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('current_exposure');",
									"    pm.expect(jsonData.current_exposure).to.be.an('object');",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_10').to.be.eql(18818);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_25').to.be.eql(18818);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_50').to.be.eql(18818);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_75').to.be.eql(18818);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_90').to.be.eql(18818);",
									"    pm.expect(jsonData.current_exposure).to.have.property('mean').to.be.eql(18818);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/exposure/current?tag=lederberg&minScore=1&maxScore=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"exposure",
								"current"
							],
							"query": [
								{
									"key": "tag",
									"value": "lederberg"
								},
								{
									"key": "minScore",
									"value": "1"
								},
								{
									"key": "maxScore",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Current Exposure - 313898a6-3739-4e64-b80f-c4cbd0d3bc0d - minScore: 1 - maxScore: 1",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('current_exposure');",
									"    pm.expect(jsonData.current_exposure).to.be.an('object');",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_10').to.be.eql(18818);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_25').to.be.eql(18818);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_50').to.be.eql(18818);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_75').to.be.eql(18818);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_90').to.be.eql(18818);",
									"    pm.expect(jsonData.current_exposure).to.have.property('mean').to.be.eql(18818);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/exposure/current?team=313898a6-3739-4e64-b80f-c4cbd0d3bc0d&minScore=1&maxScore=1",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"exposure",
								"current"
							],
							"query": [
								{
									"key": "team",
									"value": "313898a6-3739-4e64-b80f-c4cbd0d3bc0d"
								},
								{
									"key": "minScore",
									"value": "1"
								},
								{
									"key": "maxScore",
									"value": "1"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Current Exposure - labels:TLS,HTTP,HSTS",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Stats data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('current_exposure');",
									"    pm.expect(jsonData.current_exposure).to.be.an('object');",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_10').to.be.eql(13154);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_25').to.be.eql(13374.5);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_50').to.be.eql(13742);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_75').to.be.eql(14109.5);",
									"    pm.expect(jsonData.current_exposure).to.have.property('percentile_90').to.be.eql(14330);",
									"    pm.expect(jsonData.current_exposure).to.have.property('mean').to.be.eql(13742);",
									"",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/stats/exposure/current?labels=TLS,HTTP,HSTS",
							"host": [
								"{{host}}"
							],
							"path": [
								"stats",
								"exposure",
								"current"
							],
							"query": [
								{
									"key": "labels",
									"value": "TLS,HTTP,HSTS"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Labels",
			"item": [
				{
					"name": "List labels",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Labels data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.labels.length).to.be.eql(4, 'Wrong labels array length');",
									"    pm.expect(jsonData.labels).to.be.an('Array');",
									"    pm.expect(jsonData.labels).to.contains('TLS');",
									"    pm.expect(jsonData.labels).to.contains('issue');",
									"    pm.expect(jsonData.labels).to.contains('HTTP');",
									"    pm.expect(jsonData.labels).to.contains('HSTS');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/labels",
							"host": [
								"{{host}}"
							],
							"path": [
								"labels"
							]
						}
					},
					"response": []
				},
				{
					"name": "List labels by status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Labels data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.labels).to.be.an('Array');",
									"    pm.expect(jsonData.labels.length).to.be.eql(1, 'Wrong labels array length');",
									"    pm.expect(jsonData.labels[0]).to.eql('HSTS', 'Wrong label');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/labels?status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"labels"
							],
							"query": [
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List labels by tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Labels data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.labels).to.be.an('Array');",
									"    pm.expect(jsonData.labels.length).to.be.eql(1, 'Wrong labels array length');",
									"    pm.expect(jsonData.labels[0]).to.eql('HSTS', 'Wrong label');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/labels?tag=torvalds",
							"host": [
								"{{host}}"
							],
							"path": [
								"labels"
							],
							"query": [
								{
									"key": "tag",
									"value": "torvalds"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List labels by team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Labels data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.labels).to.be.an('Array');",
									"    pm.expect(jsonData.labels.length).to.be.eql(1, 'Wrong labels array length');",
									"    pm.expect(jsonData.labels[0]).to.eql('HSTS', 'Wrong label');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/labels?team=728e65fc-d568-4c1f-ac6b-a032b9b02b7c",
							"host": [
								"{{host}}"
							],
							"path": [
								"labels"
							],
							"query": [
								{
									"key": "team",
									"value": "728e65fc-d568-4c1f-ac6b-a032b9b02b7c"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List labels by status and tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Labels data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.labels).to.be.an('Array');",
									"    pm.expect(jsonData.labels.length).to.be.eql(1, 'Wrong labels array length');",
									"    pm.expect(jsonData.labels[0]).to.eql('HSTS', 'Wrong label');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/labels?status=FIXED&tag=torvalds",
							"host": [
								"{{host}}"
							],
							"path": [
								"labels"
							],
							"query": [
								{
									"key": "status",
									"value": "FIXED"
								},
								{
									"key": "tag",
									"value": "torvalds"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List labels by status and team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Labels data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.labels).to.be.an('Array');",
									"    pm.expect(jsonData.labels.length).to.be.eql(1, 'Wrong labels array length');",
									"    pm.expect(jsonData.labels[0]).to.eql('HSTS', 'Wrong label');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/labels?status=FIXED&team=728e65fc-d568-4c1f-ac6b-a032b9b02b7c",
							"host": [
								"{{host}}"
							],
							"path": [
								"labels"
							],
							"query": [
								{
									"key": "status",
									"value": "FIXED"
								},
								{
									"key": "team",
									"value": "728e65fc-d568-4c1f-ac6b-a032b9b02b7c"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List labels by atDate",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Labels data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.labels).to.be.an('Array');",
									"    pm.expect(jsonData.labels.length).to.be.eql(2, 'Wrong labels array length');",
									"    pm.expect(jsonData.labels).to.contains('TLS');",
									"    pm.expect(jsonData.labels).to.contains('issue');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/labels?atDate=2019-05-01",
							"host": [
								"{{host}}"
							],
							"path": [
								"labels"
							],
							"query": [
								{
									"key": "atDate",
									"value": "2019-05-01"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List labels by atDate and status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Labels data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.labels).to.be.an('Array');",
									"    pm.expect(jsonData.labels.length).to.be.eql(3, 'Wrong labels array length');",
									"    pm.expect(jsonData.labels).to.contains('TLS');",
									"    pm.expect(jsonData.labels).to.contains('issue');",
									"    pm.expect(jsonData.labels).to.contains('HTTP');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/labels?atDate=2020-02-01&status=OPEN",
							"host": [
								"{{host}}"
							],
							"path": [
								"labels"
							],
							"query": [
								{
									"key": "atDate",
									"value": "2020-02-01"
								},
								{
									"key": "status",
									"value": "OPEN"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List labels by maxDate and status",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Labels data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.labels).to.be.an('Array');",
									"    pm.expect(jsonData.labels.length).to.be.eql(1, 'Wrong labels array length');",
									"    pm.expect(jsonData.labels[0]).to.eql('HSTS', 'Wrong label');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/labels?maxDate=2020-02-01&status=FIXED",
							"host": [
								"{{host}}"
							],
							"path": [
								"labels"
							],
							"query": [
								{
									"key": "maxDate",
									"value": "2020-02-01"
								},
								{
									"key": "status",
									"value": "FIXED"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "List labels by identifiers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Labels data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.labels).to.be.an('Array');",
									"    pm.expect(jsonData.labels.length).to.be.eql(3, 'Wrong labels array length');",
									"    pm.expect(jsonData.labels).to.contains('HTTP');",
									"    pm.expect(jsonData.labels).to.contains('TLS');",
									"    pm.expect(jsonData.labels).to.contains('issue');",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{host}}/labels?identifiers=focused.fermat.adevinta.com,magical.almeida.adevinta.com",
							"host": [
								"{{host}}"
							],
							"path": [
								"labels"
							],
							"query": [
								{
									"key": "identifiers",
									"value": "focused.fermat.adevinta.com,magical.almeida.adevinta.com"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Tags",
			"item": [
				{
					"name": "Delete target tag",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "TEAM team=c64490f7-f77e-43b9-9da1-39a7c0009afb"
							}
						],
						"url": {
							"raw": "{{host}}/targets/170725b3-dffd-4983-9a8e-cd3dfd55bc63/tags/sutherland",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"170725b3-dffd-4983-9a8e-cd3dfd55bc63",
								"tags",
								"sutherland"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete inexistent target tag should return 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "TEAM team=c64490f7-f77e-43b9-9da1-39a7c0009afb"
							}
						],
						"url": {
							"raw": "{{host}}/targets/170725b3-dffd-4983-9a8e-cd3dfd55bc63/tags/sutherland",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"170725b3-dffd-4983-9a8e-cd3dfd55bc63",
								"tags",
								"sutherland"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete unauthorized target tag should return 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "TEAM team=00000000-0000-0000-0000-000000000000"
							}
						],
						"url": {
							"raw": "{{host}}/targets/170725b3-dffd-4983-9a8e-cd3dfd55bc63/tags/sutherland",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"170725b3-dffd-4983-9a8e-cd3dfd55bc63",
								"tags",
								"sutherland"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete tag should return 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "TEAM team=55b9e1de-2ca6-432b-9f80-c14360ea4999"
							}
						],
						"url": {
							"raw": "{{host}}/targets/tags/spence",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"tags",
								"spence"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete inexistent tag should return 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "TEAM team=55b9e1de-2ca6-432b-9f80-c14360ea4999"
							}
						],
						"url": {
							"raw": "{{host}}/targets/tags/spence",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"tags",
								"spence"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete tag except for only team with tagged target should return 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{host}}/targets/tags/jang?exceptTeam=e9250fc8-ee94-45aa-9e99-d7786fed9de2",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"tags",
								"jang"
							],
							"query": [
								{
									"key": "exceptTeam",
									"value": "e9250fc8-ee94-45aa-9e99-d7786fed9de2"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete tag except for all teams with tagged target with should return 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "TEAM team=55b9e1de-2ca6-432b-9f80-c14360ea4999"
							}
						],
						"url": {
							"raw": "{{host}}/targets/tags/montalcini?exceptTeams=313898a6-3739-4e64-b80f-c4cbd0d3bc0d,e8fce463-8618-4fc9-af9b-c367c9bc3977,b07fd22f-344f-46ba-9732-8faaf1955545,3fddb683-5810-4847-9293-07a130484176",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"tags",
								"montalcini"
							],
							"query": [
								{
									"key": "exceptTeams",
									"value": "313898a6-3739-4e64-b80f-c4cbd0d3bc0d,e8fce463-8618-4fc9-af9b-c367c9bc3977,b07fd22f-344f-46ba-9732-8faaf1955545,3fddb683-5810-4847-9293-07a130484176"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete tag only for team without tagged target should return 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "TEAM team=55b9e1de-2ca6-432b-9f80-c14360ea4999"
							}
						],
						"url": {
							"raw": "{{host}}/targets/tags/jang?team=f8114a01-44cd-480a-bb43-156ddcbdf91b",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"tags",
								"jang"
							],
							"query": [
								{
									"key": "team",
									"value": "f8114a01-44cd-480a-bb43-156ddcbdf91b"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete tag only for teams without tagged target should return 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "TEAM team=55b9e1de-2ca6-432b-9f80-c14360ea4999"
							}
						],
						"url": {
							"raw": "{{host}}/targets/tags/jang?teams=f8114a01-44cd-480a-bb43-156ddcbdf91b,313898a6-3739-4e64-b80f-c4cbd0d3bc0d",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"tags",
								"jang"
							],
							"query": [
								{
									"key": "teams",
									"value": "f8114a01-44cd-480a-bb43-156ddcbdf91b,313898a6-3739-4e64-b80f-c4cbd0d3bc0d"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete tag except for some of the teams with tagged target should return 204",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "TEAM team=55b9e1de-2ca6-432b-9f80-c14360ea4999"
							}
						],
						"url": {
							"raw": "{{host}}/targets/tags/montalcini?exceptTeams=313898a6-3739-4e64-b80f-c4cbd0d3bc0d,e8fce463-8618-4fc9-af9b-c367c9bc3977,b07fd22f-344f-46ba-9732-8faaf1955545",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"tags",
								"montalcini"
							],
							"query": [
								{
									"key": "exceptTeams",
									"value": "313898a6-3739-4e64-b80f-c4cbd0d3bc0d,e8fce463-8618-4fc9-af9b-c367c9bc3977,b07fd22f-344f-46ba-9732-8faaf1955545"
								}
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Teams",
			"item": [
				{
					"name": "Delete target team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "TEAM team=c64490f7-f77e-43b9-9da1-39a7c0009afb"
							}
						],
						"url": {
							"raw": "{{host}}/targets/170725b3-dffd-4983-9a8e-cd3dfd55bc63/teams/c64490f7-f77e-43b9-9da1-39a7c0009afb",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"170725b3-dffd-4983-9a8e-cd3dfd55bc63",
								"teams",
								"c64490f7-f77e-43b9-9da1-39a7c0009afb"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete inexistent target team should return 403",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 403\", function () {",
									"    pm.response.to.have.status(403);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "TEAM team=c64490f7-f77e-43b9-9da1-39a7c0009afb"
							}
						],
						"url": {
							"raw": "{{host}}/targets/170725b3-dffd-4983-9a8e-cd3dfd55bc63/teams/c64490f7-f77e-43b9-9da1-39a7c0009afb",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"170725b3-dffd-4983-9a8e-cd3dfd55bc63",
								"teams",
								"c64490f7-f77e-43b9-9da1-39a7c0009afb"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete team",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 204\", function () {",
									"    pm.response.to.have.status(204);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "TEAM team=55b9e1de-2ca6-432b-9f80-c14360ea4999"
							}
						],
						"url": {
							"raw": "{{host}}/targets/teams/55b9e1de-2ca6-432b-9f80-c14360ea4999",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"teams",
								"55b9e1de-2ca6-432b-9f80-c14360ea4999"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete inexistent team should return 404",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 404\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "TEAM team=55b9e1de-2ca6-432b-9f80-c14360ea4999"
							}
						],
						"url": {
							"raw": "{{host}}/targets/teams/55b9e1de-2ca6-432b-9f80-c14360ea4999",
							"host": [
								"{{host}}"
							],
							"path": [
								"targets",
								"teams",
								"55b9e1de-2ca6-432b-9f80-c14360ea4999"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Findings Operations",
			"item": [
				{
					"name": "Udapte finding",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.finding).to.be.an('Object');",
									"    pm.expect(jsonData.finding).to.have.property('id');",
									"    pm.expect(jsonData.finding).to.have.property('details');",
									"    pm.expect(jsonData.finding).to.have.property('impact_details');",
									"    pm.expect(jsonData.finding).to.have.property('status');",
									"    pm.expect(jsonData.finding).to.have.property('score');",
									"    pm.expect(jsonData.finding).to.have.property('total_exposure');",
									"    if (jsonData.finding.status===\"OPEN\"){",
									"        pm.expect(jsonData.finding).to.have.property('current_exposure');",
									"    }",
									"        pm.expect(jsonData.finding).to.have.property('resources');",
									"        pm.expect(jsonData.finding.resources).to.be.an('Array');",
									"        ",
									"        pm.expect(jsonData.finding).to.have.property('issue');",
									"        pm.expect(jsonData.finding.issue).to.be.an('Object');",
									"        pm.expect(jsonData.finding.issue).to.have.property('id');",
									"        pm.expect(jsonData.finding.issue).to.have.property('summary').to.be.not.empty;",
									"        pm.expect(jsonData.finding.issue).to.have.property('cwe_id');",
									"        pm.expect(jsonData.finding.issue).to.have.property('description');",
									"        pm.expect(jsonData.finding.issue).to.have.property('recommendations');",
									"        pm.expect(jsonData.finding.issue).to.have.property('reference_links');",
									"",
									"        pm.expect(jsonData.finding).to.have.property('target');",
									"        pm.expect(jsonData.finding.target).to.be.an('Object');",
									"        pm.expect(jsonData.finding.target).to.have.property('id');",
									"        pm.expect(jsonData.finding.target).to.have.property('identifier');",
									"        pm.expect(jsonData.finding.target).to.have.property('teams');",
									"        pm.expect(jsonData.finding.target.teams).to.be.an('array');",
									"        for (j=0; j<jsonData.finding.target.teams.length;j++){",
									"            pm.expect(jsonData.finding.target.teams[j]).to.be.an('string');",
									"        }",
									"        pm.expect(jsonData.finding.target).to.have.property('tags');",
									"        pm.expect(jsonData.finding.target.tags).to.be.an('array');",
									"        for (j=0; j<jsonData.finding.target.tags.length;j++){",
									"            pm.expect(jsonData.finding.target.tags[j]).to.be.an('string');",
									"        }",
									"        ",
									"        pm.expect(jsonData.finding).to.have.property('source');",
									"        pm.expect(jsonData.finding.source).to.be.an('Object');",
									"        pm.expect(jsonData.finding.source).to.have.property('id');",
									"        pm.expect(jsonData.finding.source).to.have.property('name');",
									"        pm.expect(jsonData.finding.source).to.have.property('component');",
									"        pm.expect(jsonData.finding.source).to.have.property('instance');",
									"        pm.expect(jsonData.finding.source).to.have.property('options');",
									"        pm.expect(jsonData.finding.source).to.have.property('time');",
									"        ",
									"});",
									"",
									"pm.test(\"Findings data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData.finding).to.have.property('id').to.be.eql('3c54f23c-8749-45c2-81c2-50dbb7b6e19a');",
									"    pm.expect(jsonData.finding).to.have.property('details').to.contains('Global score given by Mozilla Observatory');",
									"    pm.expect(jsonData.finding).to.have.property('issue').to.have.property('summary').to.contains('Mozilla HTTP Observatory');",
									"    pm.expect(jsonData.finding).to.have.property('target').to.have.property('identifier').to.contains('sweet.khayyam.adevinta.com');",
									"    pm.expect(jsonData.finding).to.have.property('source').to.have.property('instance').to.be.eql('0edf04e8-554b-4905-80b4-985492a8ff71');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "TEAM team=e9250fc8-ee94-45aa-9e99-d7786fed9de2"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"status\": \"FALSE_POSITIVE\"\n}"
						},
						"url": {
							"raw": "{{host}}/findings/3c54f23c-8749-45c2-81c2-50dbb7b6e19a",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings",
								"3c54f23c-8749-45c2-81c2-50dbb7b6e19a"
							]
						}
					},
					"response": []
				},
				{
					"name": "Udapte finding - invalid",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 422\", function () {",
									"    pm.response.to.have.status(422);",
									"});",
									"",
									"pm.test(\"Error data is correct\", function () {",
									"    var jsonData = pm.response.json();",
									"    pm.expect(jsonData).to.have.property('message');",
									"    pm.expect(jsonData.message).to.be.eql(\"Invalid status: 'INVALID'\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "TEAM team=e9250fc8-ee94-45aa-9e99-d7786fed9de2"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n\t\"status\": \"INVALID\"\n}"
						},
						"url": {
							"raw": "{{host}}/findings/3c54f23c-8749-45c2-81c2-50dbb7b6e19a",
							"host": [
								"{{host}}"
							],
							"path": [
								"findings",
								"3c54f23c-8749-45c2-81c2-50dbb7b6e19a"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "host",
			"value": "http://127.0.0.1:8080",
			"type": "string"
		}
	]
}